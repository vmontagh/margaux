
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Apr 11 15:29:00 EDT 2012
//----------------------------------------------------

package edu.mit.csail.sdg.alloy4compiler.parser;

import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.TreeSet;
import java.util.Map;
import java.util.LinkedHashMap;
import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.Reader;
import java.io.IOException;
import java.io.StringReader;
import java_cup.runtime.*;
import edu.mit.csail.sdg.alloy4.Err;
import edu.mit.csail.sdg.alloy4.ErrorFatal;
import edu.mit.csail.sdg.alloy4.ErrorSyntax;
import edu.mit.csail.sdg.alloy4.Pos;
import edu.mit.csail.sdg.alloy4.Pair;
import edu.mit.csail.sdg.alloy4.Util;
import edu.mit.csail.sdg.alloy4.Version;
import edu.mit.csail.sdg.alloy4compiler.ast.Attr.AttrType;
import edu.mit.csail.sdg.alloy4compiler.ast.CommandScope;
import edu.mit.csail.sdg.alloy4compiler.ast.Decl;
import edu.mit.csail.sdg.alloy4compiler.ast.Expr;
import edu.mit.csail.sdg.alloy4compiler.ast.ExprBadJoin;
import edu.mit.csail.sdg.alloy4compiler.ast.ExprITE;
import edu.mit.csail.sdg.alloy4compiler.ast.ExprLet;
import edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary;
import edu.mit.csail.sdg.alloy4compiler.ast.ExprList;
import edu.mit.csail.sdg.alloy4compiler.ast.ExprConstant;
import edu.mit.csail.sdg.alloy4compiler.ast.ExprQt;
import edu.mit.csail.sdg.alloy4compiler.ast.ExprUnary;
import edu.mit.csail.sdg.alloy4compiler.ast.ExprVar;
import edu.mit.csail.sdg.alloy4compiler.ast.ObjBlock;
import edu.mit.csail.sdg.alloy4compiler.ast.ObjDecl;
import edu.mit.csail.sdg.alloy4compiler.ast.Sig;
import edu.mit.csail.sdg.alloy4compiler.ast.Sig.PrimSig;
import edu.mit.csail.sdg.alloy4compiler.ast.Bounds;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Apr 11 15:29:00 EDT 2012
  */
public class CompParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public CompParser() {super();}

  /** Constructor which sets the default scanner. */
  public CompParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public CompParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u017d\000\002\106\003\000\002\002\004\000\002\107" +
    "\005\000\002\107\010\000\002\107\006\000\002\107\010" +
    "\000\002\107\011\000\002\107\013\000\002\107\011\000" +
    "\002\107\010\000\002\107\005\000\002\107\006\000\002" +
    "\107\006\000\002\107\005\000\002\107\006\000\002\107" +
    "\006\000\002\107\004\000\002\107\004\000\002\107\004" +
    "\000\002\107\004\000\002\107\004\000\002\107\004\000" +
    "\002\107\004\000\002\107\002\000\002\013\003\000\002" +
    "\013\003\000\002\012\007\000\002\012\006\000\002\012" +
    "\011\000\002\012\010\000\002\012\007\000\002\012\006" +
    "\000\002\012\011\000\002\012\010\000\002\012\006\000" +
    "\002\027\002\000\002\027\004\000\002\075\004\000\002" +
    "\075\006\000\002\075\004\000\002\075\002\000\002\112" +
    "\003\000\002\112\005\000\002\111\004\000\002\111\004" +
    "\000\002\111\004\000\002\111\004\000\002\111\004\000" +
    "\002\111\004\000\002\111\004\000\002\110\004\000\002" +
    "\110\007\000\002\110\011\000\002\110\006\000\002\110" +
    "\003\000\002\110\006\000\002\110\010\000\002\110\005" +
    "\000\002\051\011\000\002\051\010\000\002\051\011\000" +
    "\002\051\010\000\002\051\006\000\002\052\003\000\002" +
    "\052\004\000\002\037\013\000\002\037\013\000\002\037" +
    "\010\000\002\037\015\000\002\037\015\000\002\037\012" +
    "\000\002\067\011\000\002\067\011\000\002\067\006\000" +
    "\002\067\013\000\002\067\013\000\002\067\010\000\002" +
    "\123\002\000\002\123\003\000\002\124\010\000\002\076" +
    "\011\000\002\100\003\000\002\100\003\000\002\100\003" +
    "\000\002\100\003\000\002\100\003\000\002\101\003\000" +
    "\002\101\004\000\002\077\004\000\002\077\004\000\002" +
    "\077\004\000\002\077\002\000\002\102\003\000\002\102" +
    "\003\000\002\102\003\000\002\102\003\000\002\102\005" +
    "\000\002\102\003\000\002\104\002\000\002\104\003\000" +
    "\002\103\003\000\002\103\005\000\002\105\003\000\002" +
    "\105\005\000\002\053\003\000\002\053\005\000\002\053" +
    "\005\000\002\054\003\000\002\054\005\000\002\055\003" +
    "\000\002\055\005\000\002\056\003\000\002\056\004\000" +
    "\002\056\005\000\002\056\006\000\002\014\006\000\002" +
    "\014\006\000\002\014\006\000\002\014\007\000\002\014" +
    "\006\000\002\014\005\000\002\014\007\000\002\014\007" +
    "\000\002\014\007\000\002\014\010\000\002\014\007\000" +
    "\002\014\006\000\002\015\003\000\002\015\006\000\002" +
    "\015\006\000\002\015\006\000\002\015\007\000\002\015" +
    "\006\000\002\015\005\000\002\015\007\000\002\015\007" +
    "\000\002\015\007\000\002\015\010\000\002\015\007\000" +
    "\002\015\006\000\002\020\005\000\002\020\003\000\002" +
    "\016\005\000\002\016\003\000\002\017\002\000\002\017" +
    "\003\000\002\017\005\000\002\017\004\000\002\125\003" +
    "\000\002\126\003\000\002\127\003\000\002\127\003\000" +
    "\002\127\005\000\002\127\005\000\002\127\005\000\002" +
    "\127\005\000\002\127\005\000\002\131\004\000\002\131" +
    "\005\000\002\130\003\000\002\130\003\000\002\130\004" +
    "\000\002\130\005\000\002\130\004\000\002\130\005\000" +
    "\002\130\005\000\002\130\007\000\002\132\003\000\002" +
    "\132\005\000\002\050\006\000\002\050\007\000\002\032" +
    "\002\000\002\032\003\000\002\031\005\000\002\031\004" +
    "\000\002\033\003\000\002\033\004\000\002\034\004\000" +
    "\002\034\003\000\002\035\002\000\002\035\003\000\002" +
    "\036\003\000\002\036\005\000\002\030\003\000\002\030" +
    "\003\000\002\030\003\000\002\005\004\000\002\005\005" +
    "\000\002\005\005\000\002\005\005\000\002\005\005\000" +
    "\002\005\005\000\002\005\005\000\002\063\003\000\002" +
    "\063\005\000\002\064\003\000\002\064\005\000\002\025" +
    "\003\000\002\025\005\000\002\026\003\000\002\026\005" +
    "\000\002\040\003\000\002\040\003\000\002\042\003\000" +
    "\002\042\007\000\002\044\007\000\002\044\005\000\002" +
    "\042\007\000\002\044\005\000\002\041\003\000\002\041" +
    "\003\000\002\043\003\000\002\043\007\000\002\045\007" +
    "\000\002\045\005\000\002\002\003\000\002\002\005\000" +
    "\002\003\003\000\002\003\005\000\002\057\003\000\002" +
    "\057\004\000\002\057\004\000\002\060\003\000\002\060" +
    "\004\000\002\010\005\000\002\010\005\000\002\010\005" +
    "\000\002\010\005\000\002\010\005\000\002\010\005\000" +
    "\002\010\005\000\002\010\005\000\002\010\005\000\002" +
    "\010\005\000\002\010\005\000\002\010\005\000\002\010" +
    "\004\000\002\010\004\000\002\010\004\000\002\010\004" +
    "\000\002\010\004\000\002\010\004\000\002\010\004\000" +
    "\002\010\003\000\002\011\005\000\002\011\005\000\002" +
    "\011\005\000\002\011\005\000\002\011\005\000\002\011" +
    "\005\000\002\011\005\000\002\011\005\000\002\011\005" +
    "\000\002\011\005\000\002\011\005\000\002\011\005\000" +
    "\002\011\004\000\002\011\004\000\002\011\004\000\002" +
    "\011\004\000\002\011\004\000\002\011\004\000\002\011" +
    "\004\000\002\011\003\000\002\113\003\000\002\113\005" +
    "\000\002\113\005\000\002\113\005\000\002\114\003\000" +
    "\002\114\005\000\002\114\005\000\002\114\005\000\002" +
    "\117\003\000\002\117\005\000\002\117\005\000\002\117" +
    "\005\000\002\117\005\000\002\120\003\000\002\120\005" +
    "\000\002\120\005\000\002\120\005\000\002\120\005\000" +
    "\002\115\003\000\002\115\005\000\002\115\005\000\002" +
    "\115\005\000\002\116\003\000\002\116\005\000\002\116" +
    "\005\000\002\116\005\000\002\061\003\000\002\061\004" +
    "\000\002\061\004\000\002\061\004\000\002\061\004\000" +
    "\002\061\004\000\002\061\004\000\002\062\003\000\002" +
    "\062\004\000\002\062\004\000\002\062\004\000\002\065" +
    "\003\000\002\065\005\000\002\066\003\000\002\066\005" +
    "\000\002\046\003\000\002\046\005\000\002\047\003\000" +
    "\002\047\005\000\002\072\003\000\002\072\003\000\002" +
    "\072\003\000\002\072\003\000\002\072\003\000\002\072" +
    "\003\000\002\072\003\000\002\072\003\000\002\072\003" +
    "\000\002\072\003\000\002\072\003\000\002\072\003\000" +
    "\002\072\003\000\002\072\003\000\002\072\003\000\002" +
    "\072\003\000\002\073\003\000\002\073\005\000\002\074" +
    "\003\000\002\074\005\000\002\021\003\000\002\021\005" +
    "\000\002\022\003\000\002\022\005\000\002\070\003\000" +
    "\002\070\005\000\002\071\003\000\002\071\005\000\002" +
    "\006\003\000\002\007\003\000\002\007\006\000\002\007" +
    "\006\000\002\007\006\000\002\007\006\000\002\007\006" +
    "\000\002\023\003\000\002\023\005\000\002\024\003\000" +
    "\002\024\005\000\002\024\005\000\002\024\005\000\002" +
    "\024\005\000\002\024\005\000\002\121\004\000\002\121" +
    "\004\000\002\121\004\000\002\121\004\000\002\121\004" +
    "\000\002\121\004\000\002\122\003\000\002\122\004\000" +
    "\002\122\004\000\002\122\004\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\003\000\002\004\003\000\002\004\003\000\002\004\005" +
    "\000\002\004\003\000\002\004\004\000\002\004\003\000" +
    "\002\004\006\000\002\004\005\000\002\133\007\000\002" +
    "\134\003\000\002\134\005\000\002\135\004\000\002\135" +
    "\004\000\002\012\010" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u02ee\000\002\001\uffea\000\004\002\u02f0\001\002\000" +
    "\036\002\001\035\031\043\011\047\024\051\020\066\017" +
    "\106\007\115\022\131\006\133\033\143\013\150\026\156" +
    "\014\162\034\001\uffb4\000\010\151\057\170\053\173\047" +
    "\001\002\000\002\001\uffaf\000\002\001\uffef\000\014\102" +
    "\246\151\057\170\053\173\047\175\u02e1\001\002\000\002" +
    "\001\uffee\000\014\060\uffb3\070\uffb3\104\uffb3\134\uffb3\142" +
    "\uffb3\001\uffac\000\002\001\uffab\000\012\102\246\151\057" +
    "\170\053\173\047\001\002\000\002\001\ufff0\000\014\102" +
    "\246\151\057\170\053\173\047\175\u02cc\001\002\000\002" +
    "\001\uffe9\000\002\001\ufff1\000\010\151\057\170\053\173" +
    "\047\001\002\000\016\035\031\106\007\133\033\143\u02bf" +
    "\156\014\162\034\001\002\000\010\151\057\170\053\173" +
    "\047\001\002\000\010\151\057\170\053\173\047\001\002" +
    "\000\002\001\uffe8\000\002\001\uffeb\000\004\076\u0256\001" +
    "\uffed\000\002\001\uffb0\000\002\001\uffec\000\002\001\uffae" +
    "\000\002\001\uffad\000\014\060\036\070\042\104\037\134" +
    "\041\142\040\001\002\000\010\151\057\170\053\173\047" +
    "\001\002\000\010\151\057\170\053\173\047\001\002\000" +
    "\020\121\051\151\045\157\052\165\044\170\053\172\050" +
    "\173\047\001\002\000\010\151\057\170\053\173\047\001" +
    "\002\000\020\121\051\151\045\157\052\165\044\170\053" +
    "\172\050\173\047\001\002\000\010\052\u020f\103\u0211\107" +
    "\u0210\001\uffa5\000\002\001\uffa3\000\004\160\u0116\001\002" +
    "\000\004\160\062\001\uff99\000\002\001\uff96\000\002\001" +
    "\uffa4\000\002\001\uffa0\000\002\001\uffa2\000\004\160\u0122" +
    "\001\002\000\004\056\055\001\002\000\010\151\057\170" +
    "\053\173\047\001\002\000\010\052\064\103\066\107\065" +
    "\001\002\000\004\160\060\001\002\000\004\173\047\001" +
    "\002\000\004\160\062\001\uff97\000\004\173\063\001\002" +
    "\000\002\001\uff95\000\116\031\124\032\150\033\154\034" +
    "\155\036\130\037\200\044\106\050\214\054\227\073\224" +
    "\074\122\101\171\102\131\104\221\105\210\106\157\107" +
    "\133\117\156\120\216\121\051\122\140\132\117\133\160" +
    "\151\204\152\203\157\052\161\165\162\211\164\166\165" +
    "\044\166\202\167\125\170\175\171\141\172\050\173\047" +
    "\174\153\175\143\001\002\000\022\053\076\054\067\063" +
    "\071\137\070\143\100\151\057\170\053\173\047\001\uff71" +
    "\000\022\053\076\054\067\063\071\137\070\143\100\151" +
    "\057\170\053\173\047\001\uff71\000\010\151\057\170\053" +
    "\173\047\001\002\000\010\151\057\170\053\173\047\001" +
    "\002\000\010\151\057\170\053\173\047\001\002\000\004" +
    "\053\u01f7\001\uff70\000\002\001\uff94\000\010\052\u01c0\053" +
    "\103\061\u01f3\001\002\000\002\001\uff82\000\022\053\076" +
    "\054\067\063\071\137\070\143\100\151\057\170\053\173" +
    "\047\001\uff71\000\004\146\u01ee\001\002\000\012\054\101" +
    "\151\057\170\053\173\047\001\002\000\010\151\057\170" +
    "\053\173\047\001\002\000\010\052\105\053\103\061\104" +
    "\001\002\000\010\151\057\170\053\173\047\001\002\000" +
    "\116\031\124\032\150\033\154\034\155\036\130\037\200" +
    "\044\106\050\214\054\u01e6\073\224\074\122\101\171\102" +
    "\131\104\221\105\210\106\157\107\133\117\156\120\216" +
    "\121\051\122\140\132\117\133\160\151\204\152\203\157" +
    "\052\161\165\162\211\164\166\165\044\166\202\167\125" +
    "\170\175\171\141\172\050\173\047\174\153\175\143\001" +
    "\002\000\116\031\124\032\150\033\154\034\155\036\130" +
    "\037\200\044\106\050\214\054\173\073\224\074\122\101" +
    "\171\102\131\104\221\105\210\106\157\107\133\117\156" +
    "\120\216\121\051\122\140\132\117\133\160\151\204\152" +
    "\203\157\052\161\165\162\211\164\166\165\044\166\202" +
    "\167\125\170\175\171\141\172\050\173\047\174\153\175" +
    "\143\001\002\000\010\151\057\170\053\173\047\001\002" +
    "\000\002\001\uff3a\000\002\001\uff3c\000\002\001\uff48\000" +
    "\006\041\u01db\076\u01da\001\uff2e\000\002\001\uff36\000\044" +
    "\004\354\005\341\006\355\007\347\010\350\011\357\012" +
    "\352\013\344\014\360\015\346\016\343\017\351\020\342" +
    "\021\353\022\345\023\361\055\u01d6\001\ufeba\000\002\001" +
    "\ufebc\000\002\001\ufee3\000\020\054\067\063\071\137\070" +
    "\143\100\151\057\170\053\173\047\001\002\000\002\001" +
    "\ufee7\000\004\141\u01d2\001\ufed8\000\002\001\ufe95\000\002" +
    "\001\ufedf\000\002\001\ufe93\000\102\031\124\032\150\033" +
    "\154\034\155\037\200\044\106\050\214\054\227\073\224" +
    "\074\122\101\171\102\131\103\316\104\221\105\210\107" +
    "\133\117\156\121\051\132\117\151\045\157\052\161\165" +
    "\164\166\165\044\166\202\167\125\170\175\171\141\172" +
    "\050\173\047\174\153\175\143\001\002\000\002\001\uff28" +
    "\000\002\001\uff2a\000\062\031\124\032\150\033\154\034" +
    "\155\044\106\050\214\054\227\073\224\074\122\101\171" +
    "\102\131\107\133\121\051\151\045\157\052\164\166\165" +
    "\044\167\125\170\175\171\141\172\050\173\047\174\153" +
    "\175\143\001\002\000\126\031\124\032\150\033\154\034" +
    "\155\036\130\037\200\044\106\050\214\054\u01aa\063\u01a6" +
    "\073\224\074\122\101\171\102\131\104\221\105\210\106" +
    "\157\107\133\117\156\120\216\121\051\122\140\132\117" +
    "\133\160\137\u01a7\143\u01ad\145\252\151\204\152\203\157" +
    "\052\161\165\162\211\164\166\165\044\166\202\167\125" +
    "\170\175\171\141\172\050\173\047\174\153\175\143\001" +
    "\002\000\002\001\uff8a\000\116\031\124\032\150\033\154" +
    "\034\155\036\130\037\200\044\106\050\214\054\227\073" +
    "\224\074\122\101\171\102\131\104\221\105\210\106\157" +
    "\107\133\117\156\120\216\121\051\122\140\132\117\133" +
    "\160\151\204\152\203\157\052\161\165\162\211\164\166" +
    "\165\044\166\202\167\125\170\175\171\141\172\050\173" +
    "\047\174\153\175\143\001\002\000\004\144\u01a2\001\ufeb6" +
    "\000\002\001\ufeb8\000\006\056\u01a0\103\305\001\ufeb2\000" +
    "\002\001\ufeb4\000\116\031\124\032\150\033\154\034\155" +
    "\036\130\037\200\044\106\050\214\054\227\073\224\074" +
    "\122\101\171\102\131\104\221\105\210\106\157\107\133" +
    "\117\156\120\216\121\051\122\140\132\117\133\160\151" +
    "\204\152\203\157\052\161\165\162\211\164\166\165\044" +
    "\166\202\167\125\170\175\171\141\172\050\173\047\174" +
    "\153\175\143\001\002\000\066\031\124\032\150\033\154" +
    "\037\200\044\106\050\214\074\122\102\131\104\221\105" +
    "\210\107\133\117\156\121\051\132\117\151\045\157\052" +
    "\161\165\164\166\165\044\166\202\170\175\171\141\172" +
    "\050\173\047\174\153\175\143\001\002\000\002\001\ufe8f" +
    "\000\002\001\ufe96\000\010\153\u0101\154\377\155\u0100\001" +
    "\ufefa\000\002\001\uff0e\000\032\061\u0182\071\u0180\072\u0179" +
    "\077\u017b\110\u0183\111\u017c\123\u017a\124\u017f\125\u017d\126" +
    "\u0178\127\u0181\130\u017e\001\uff23\000\002\001\uff26\000\002" +
    "\001\ufe92\000\004\136\u0174\001\uff49\000\002\001\uff4a\000" +
    "\002\001\ufe97\000\002\001\ufe91\000\004\103\u0171\001\002" +
    "\000\020\054\067\063\071\137\070\143\100\151\057\170" +
    "\053\173\047\001\002\000\062\031\124\032\150\033\154" +
    "\034\155\044\106\050\214\054\227\073\224\074\122\101" +
    "\171\102\131\107\133\121\051\151\045\157\052\164\166" +
    "\165\044\167\125\170\175\171\141\172\050\173\047\174" +
    "\153\175\143\001\002\000\062\031\124\032\150\033\154" +
    "\034\155\044\106\050\214\054\227\073\224\074\122\101" +
    "\171\102\131\107\133\121\051\151\045\157\052\164\166" +
    "\165\044\167\125\170\175\171\141\172\050\173\047\174" +
    "\153\175\143\001\002\000\004\075\u0131\001\uff3e\000\002" +
    "\001\uff40\000\002\001\ufece\000\002\001\ufed0\000\020\054" +
    "\067\063\071\137\070\143\100\151\057\170\053\173\047" +
    "\001\002\000\066\031\124\032\150\033\154\037\200\044" +
    "\106\050\214\074\122\102\131\104\221\105\210\107\133" +
    "\117\156\121\051\132\117\151\045\157\052\161\165\164" +
    "\166\165\044\166\202\170\175\171\141\172\050\173\047" +
    "\174\153\175\143\001\002\000\002\001\ufea7\000\002\001" +
    "\ufea9\000\102\031\124\032\150\033\154\034\155\037\200" +
    "\044\106\050\214\054\227\073\224\074\122\101\171\102" +
    "\131\103\321\104\221\105\210\107\133\117\156\121\051" +
    "\132\117\151\045\157\052\161\165\164\166\165\044\166" +
    "\202\167\125\170\175\171\141\172\050\173\047\174\153" +
    "\175\143\001\002\000\002\001\ufe9b\000\120\031\124\032" +
    "\150\033\154\034\155\036\130\037\200\044\106\050\214" +
    "\054\227\073\224\074\122\101\171\102\131\103\231\104" +
    "\221\105\210\106\157\107\133\117\156\120\216\121\051" +
    "\122\140\132\117\133\160\151\204\152\203\157\052\161" +
    "\165\162\211\164\166\165\044\166\202\167\125\170\175" +
    "\171\141\172\050\173\047\174\153\175\143\001\002\000" +
    "\010\026\u0124\027\u0126\030\u0125\001\ufeec\000\004\160\u0122" +
    "\001\ufe94\000\002\001\ufef1\000\004\040\u0120\001\ufed2\000" +
    "\020\054\067\063\071\137\070\143\100\151\057\170\053" +
    "\173\047\001\002\000\002\001\ufed4\000\020\054\067\063" +
    "\071\137\070\143\100\151\057\170\053\173\047\001\002" +
    "\000\062\031\124\032\150\033\154\034\155\044\106\050" +
    "\214\054\227\073\224\074\122\101\171\102\131\107\133" +
    "\121\051\151\045\157\052\164\166\165\044\167\125\170" +
    "\175\171\141\172\050\173\047\174\153\175\143\001\002" +
    "\000\064\031\124\032\150\033\154\034\155\044\106\050" +
    "\214\054\227\073\224\074\122\101\171\102\131\107\133" +
    "\121\051\151\045\157\052\160\u0116\164\166\165\044\167" +
    "\125\170\175\171\141\172\050\173\047\174\153\175\143" +
    "\001\002\000\002\001\uffa5\000\002\001\ufeaf\000\002\001" +
    "\ufeb0\000\020\054\067\063\071\137\070\143\100\151\057" +
    "\170\053\173\047\001\002\000\062\031\124\032\150\033" +
    "\154\034\155\044\106\050\214\054\227\073\224\074\122" +
    "\101\171\102\131\107\133\121\051\151\045\157\052\164" +
    "\166\165\044\167\125\170\175\171\141\172\050\173\047" +
    "\174\153\175\143\001\002\000\002\001\uff30\000\002\001" +
    "\uff38\000\066\031\124\032\150\033\154\037\200\044\106" +
    "\050\214\074\122\102\131\104\221\105\210\107\133\117" +
    "\156\121\051\132\117\151\045\157\052\161\165\164\166" +
    "\165\044\166\202\170\175\171\141\172\050\173\047\174" +
    "\153\175\143\001\002\000\002\001\ufe8d\000\062\031\124" +
    "\032\150\033\154\034\155\044\106\050\214\054\227\073" +
    "\224\074\122\101\171\102\131\107\133\121\051\151\045" +
    "\157\052\164\166\165\044\167\125\170\175\171\141\172" +
    "\050\173\047\174\153\175\143\001\002\000\012\024\263" +
    "\025\261\114\262\140\260\001\ufef5\000\002\001\ufef9\000" +
    "\010\151\057\170\053\173\047\001\002\000\002\001\uff2f" +
    "\000\002\001\uff37\000\100\031\124\032\150\033\154\034" +
    "\155\037\200\044\106\050\214\054\227\073\224\074\122" +
    "\101\171\102\131\104\221\105\210\107\133\117\156\121" +
    "\051\132\117\151\045\157\052\161\165\164\166\165\044" +
    "\166\202\167\125\170\175\171\141\172\050\173\047\174" +
    "\153\175\143\001\002\000\002\001\ufed7\000\002\001\ufedb" +
    "\000\004\103\231\001\002\000\002\001\ufede\000\116\031" +
    "\124\032\150\033\154\034\155\036\130\037\200\044\106" +
    "\050\214\054\227\073\224\074\122\101\171\102\131\104" +
    "\221\105\210\106\157\107\133\117\156\120\216\121\051" +
    "\122\140\132\117\133\160\151\204\152\203\157\052\161" +
    "\165\162\211\164\166\165\044\166\202\167\125\170\175" +
    "\171\141\172\050\173\047\174\153\175\143\001\uff4e\000" +
    "\002\001\uff4c\000\004\146\237\001\002\000\004\053\235" +
    "\001\uff4d\000\116\031\124\032\150\033\154\034\155\036" +
    "\130\037\200\044\106\050\214\054\227\073\224\074\122" +
    "\101\171\102\131\104\221\105\210\106\157\107\133\117" +
    "\156\120\216\121\051\122\140\132\117\133\160\151\204" +
    "\152\203\157\052\161\165\162\211\164\166\165\044\166" +
    "\202\167\125\170\175\171\141\172\050\173\047\174\153" +
    "\175\143\001\002\000\002\001\uff4b\000\002\001\ufead\000" +
    "\004\061\242\001\002\000\002\001\uff47\000\116\031\124" +
    "\032\150\033\154\034\155\036\130\037\200\044\106\050" +
    "\214\054\227\073\224\074\122\101\171\102\131\104\221" +
    "\105\210\106\157\107\133\117\156\120\216\121\051\122" +
    "\140\132\117\133\160\151\204\152\203\157\052\161\165" +
    "\162\211\164\166\165\044\166\202\167\125\170\175\171" +
    "\141\172\050\173\047\174\153\175\143\001\002\000\010" +
    "\045\247\053\244\102\246\001\002\000\010\151\057\170" +
    "\053\173\047\001\002\000\002\001\uff58\000\120\031\124" +
    "\032\150\033\154\034\155\036\130\037\200\044\106\050" +
    "\214\054\227\073\224\074\122\101\171\102\131\104\221" +
    "\105\210\106\157\107\133\117\156\120\216\121\051\122" +
    "\140\132\117\133\160\145\252\151\204\152\203\157\052" +
    "\161\165\162\211\164\166\165\044\166\202\167\125\170" +
    "\175\171\141\172\050\173\047\174\153\175\143\001\002" +
    "\000\116\031\124\032\150\033\154\034\155\036\130\037" +
    "\200\044\106\050\214\054\227\073\224\074\122\101\171" +
    "\102\131\104\221\105\210\106\157\107\133\117\156\120" +
    "\216\121\051\122\140\132\117\133\160\151\204\152\203" +
    "\157\052\161\165\162\211\164\166\165\044\166\202\167" +
    "\125\170\175\171\141\172\050\173\047\174\153\175\143" +
    "\001\002\000\002\001\uff4f\000\002\001\uff50\000\002\001" +
    "\uff53\000\002\001\uff52\000\120\031\124\032\150\033\154" +
    "\034\155\036\130\037\200\044\106\050\214\054\227\073" +
    "\224\074\122\101\171\102\131\104\221\105\210\106\157" +
    "\107\133\117\156\120\216\121\051\122\140\132\117\133" +
    "\160\145\255\151\204\152\203\157\052\161\165\162\211" +
    "\164\166\165\044\166\202\167\125\170\175\171\141\172" +
    "\050\173\047\174\153\175\143\001\002\000\002\001\uff54" +
    "\000\002\001\uff51\000\002\001\uff57\000\100\031\124\032" +
    "\150\033\154\034\155\037\200\044\106\050\273\054\227" +
    "\073\265\074\122\101\266\102\131\104\221\105\210\107" +
    "\133\117\156\121\051\132\117\151\045\157\052\161\165" +
    "\164\270\165\044\166\202\167\276\170\175\171\267\172" +
    "\050\173\047\174\153\175\143\001\002\000\100\031\124" +
    "\032\150\033\154\034\155\037\200\044\106\050\273\054" +
    "\227\073\265\074\122\101\266\102\131\104\221\105\210" +
    "\107\133\117\156\121\051\132\117\151\045\157\052\161" +
    "\165\164\270\165\044\166\202\167\276\170\175\171\267" +
    "\172\050\173\047\174\153\175\143\001\002\000\100\031" +
    "\124\032\150\033\154\034\155\037\200\044\106\050\273" +
    "\054\227\073\265\074\122\101\266\102\131\104\221\105" +
    "\210\107\133\117\156\121\051\132\117\151\045\157\052" +
    "\161\165\164\270\165\044\166\202\167\276\170\175\171" +
    "\267\172\050\173\047\174\153\175\143\001\002\000\100" +
    "\031\124\032\150\033\154\034\155\037\200\044\106\050" +
    "\273\054\227\073\265\074\122\101\266\102\131\104\221" +
    "\105\210\107\133\117\156\121\051\132\117\151\045\157" +
    "\052\161\165\164\270\165\044\166\202\167\276\170\175" +
    "\171\267\172\050\173\047\174\153\175\143\001\002\000" +
    "\004\040\336\001\ufed2\000\062\031\124\032\150\033\154" +
    "\034\155\044\106\050\273\054\227\073\265\074\122\101" +
    "\266\102\131\107\133\121\051\151\045\157\052\164\270" +
    "\165\044\167\276\170\175\171\267\172\050\173\047\174" +
    "\153\175\143\001\002\000\064\031\124\032\150\033\154" +
    "\034\155\044\106\050\273\054\227\073\265\074\122\101" +
    "\266\102\131\103\321\107\133\121\051\151\045\157\052" +
    "\164\270\165\044\167\276\170\175\171\267\172\050\173" +
    "\047\174\153\175\143\001\002\000\050\031\124\032\150" +
    "\033\154\044\106\050\273\074\122\102\131\107\133\121" +
    "\051\151\045\157\052\164\270\165\044\170\175\171\267" +
    "\172\050\173\047\174\153\175\143\001\002\000\050\031" +
    "\124\032\150\033\154\044\106\050\273\074\122\102\131" +
    "\107\133\121\051\151\045\157\052\164\270\165\044\170" +
    "\175\171\267\172\050\173\047\174\153\175\143\001\002" +
    "\000\044\004\354\005\341\006\355\007\347\010\350\011" +
    "\357\012\352\013\344\014\360\015\346\016\343\017\351" +
    "\020\342\021\353\022\345\023\361\055\340\001\ufeba\000" +
    "\004\141\334\001\ufed8\000\050\031\124\032\150\033\154" +
    "\044\106\050\273\074\122\102\131\107\133\121\051\151" +
    "\045\157\052\164\270\165\044\170\175\171\267\172\050" +
    "\173\047\174\153\175\143\001\002\000\010\026\325\027" +
    "\327\030\326\001\ufee9\000\006\056\306\103\305\001\ufeb2" +
    "\000\064\031\124\032\150\033\154\034\155\044\106\050" +
    "\273\054\227\073\265\074\122\101\266\102\131\103\316" +
    "\107\133\121\051\151\045\157\052\164\270\165\044\167" +
    "\276\170\175\171\267\172\050\173\047\174\153\175\143" +
    "\001\002\000\004\144\301\001\ufeb6\000\002\001\ufeee\000" +
    "\060\031\124\032\150\033\154\034\155\044\106\050\273" +
    "\054\227\074\122\101\302\102\131\107\133\121\051\151" +
    "\045\157\052\164\270\165\044\167\303\170\175\171\267" +
    "\172\050\173\047\174\153\175\143\001\002\000\004\103" +
    "\321\001\002\000\004\103\316\001\002\000\006\056\306" +
    "\103\305\001\ufeb1\000\116\031\124\032\150\033\154\034" +
    "\155\036\130\037\200\044\106\050\214\054\227\073\224" +
    "\074\122\101\171\102\131\104\221\105\210\106\157\107" +
    "\133\117\156\120\216\121\051\122\140\132\117\133\160" +
    "\151\204\152\203\157\052\161\165\162\211\164\166\165" +
    "\044\166\202\167\125\170\175\171\141\172\050\173\047" +
    "\174\153\175\143\001\uff4e\000\060\031\124\032\150\033" +
    "\154\034\307\044\106\050\273\054\311\074\122\101\310" +
    "\102\131\107\133\121\051\151\045\157\052\164\270\165" +
    "\044\167\312\170\175\171\267\172\050\173\047\174\153" +
    "\175\143\001\002\000\002\001\ufea4\000\002\001\ufea3\000" +
    "\002\001\ufea5\000\002\001\ufea2\000\002\001\ufea6\000\004" +
    "\146\315\001\002\000\002\001\ufeae\000\116\031\124\032" +
    "\150\033\154\034\155\036\130\037\200\044\106\050\214" +
    "\054\227\073\224\074\122\101\171\102\131\104\221\105" +
    "\210\106\157\107\133\117\156\120\216\121\051\122\140" +
    "\132\117\133\160\151\204\152\203\157\052\161\165\162" +
    "\211\164\166\165\044\166\202\167\125\170\175\171\141" +
    "\172\050\173\047\174\153\175\143\001\uff4e\000\004\146" +
    "\320\001\002\000\002\001\ufeaa\000\116\031\124\032\150" +
    "\033\154\034\155\036\130\037\200\044\106\050\214\054" +
    "\227\073\224\074\122\101\171\102\131\104\221\105\210" +
    "\106\157\107\133\117\156\120\216\121\051\122\140\132" +
    "\117\133\160\151\204\152\203\157\052\161\165\162\211" +
    "\164\166\165\044\166\202\167\125\170\175\171\141\172" +
    "\050\173\047\174\153\175\143\001\uff4e\000\004\146\323" +
    "\001\002\000\002\001\ufeab\000\002\001\ufed6\000\062\031" +
    "\124\032\150\033\154\034\155\044\106\050\273\054\227" +
    "\073\265\074\122\101\266\102\131\107\133\121\051\151" +
    "\045\157\052\164\270\165\044\167\276\170\175\171\267" +
    "\172\050\173\047\174\153\175\143\001\002\000\062\031" +
    "\124\032\150\033\154\034\155\044\106\050\273\054\227" +
    "\073\265\074\122\101\266\102\131\107\133\121\051\151" +
    "\045\157\052\164\270\165\044\167\276\170\175\171\267" +
    "\172\050\173\047\174\153\175\143\001\002\000\062\031" +
    "\124\032\150\033\154\034\155\044\106\050\273\054\227" +
    "\073\265\074\122\101\266\102\131\107\133\121\051\151" +
    "\045\157\052\164\270\165\044\167\276\170\175\171\267" +
    "\172\050\173\047\174\153\175\143\001\002\000\002\001" +
    "\ufee1\000\002\001\ufee0\000\002\001\ufee2\000\002\001\ufe98" +
    "\000\060\031\124\032\150\033\154\034\155\044\106\050" +
    "\273\054\227\074\122\101\302\102\131\107\133\121\051" +
    "\151\045\157\052\164\270\165\044\167\303\170\175\171" +
    "\267\172\050\173\047\174\153\175\143\001\002\000\004" +
    "\040\336\001\ufed1\000\060\031\124\032\150\033\154\034" +
    "\155\044\106\050\273\054\227\074\122\101\302\102\131" +
    "\107\133\121\051\151\045\157\052\164\270\165\044\167" +
    "\303\170\175\171\267\172\050\173\047\174\153\175\143" +
    "\001\002\000\002\001\ufecd\000\060\031\124\032\150\033" +
    "\154\034\155\044\106\050\273\054\227\074\122\101\302" +
    "\102\131\107\133\121\051\151\045\157\052\164\270\165" +
    "\044\167\303\170\175\171\267\172\050\173\047\174\153" +
    "\175\143\001\002\000\002\001\ufecb\000\002\001\ufec0\000" +
    "\002\001\ufec2\000\002\001\ufec5\000\002\001\ufebe\000\002" +
    "\001\ufec3\000\002\001\ufec9\000\002\001\ufec8\000\002\001" +
    "\ufec1\000\002\001\ufec6\000\002\001\ufebf\000\002\001\ufecc" +
    "\000\002\001\ufeca\000\060\031\124\032\150\033\154\034" +
    "\155\044\106\050\273\054\227\074\122\101\302\102\131" +
    "\107\133\121\051\151\045\157\052\164\270\165\044\167" +
    "\303\170\175\171\267\172\050\173\047\174\153\175\143" +
    "\001\002\000\002\001\ufec7\000\002\001\ufec4\000\002\001" +
    "\ufebd\000\002\001\ufeb9\000\004\144\301\001\ufeb5\000\002" +
    "\001\ufe99\000\002\001\ufe9a\000\002\001\ufed5\000\010\026" +
    "\325\027\327\030\326\001\ufeea\000\002\001\ufeef\000\010" +
    "\026\325\027\327\030\326\001\ufee8\000\002\001\ufeed\000" +
    "\010\026\325\027\327\030\326\001\ufeeb\000\002\001\ufef0" +
    "\000\010\153\u0101\154\377\155\u0100\001\uff00\000\002\001" +
    "\uff14\000\100\031\124\032\150\033\154\034\155\037\200" +
    "\044\106\050\273\054\227\073\265\074\122\101\266\102" +
    "\131\104\221\105\210\107\133\117\156\121\051\132\117" +
    "\151\045\157\052\161\165\164\270\165\044\166\202\167" +
    "\276\170\175\171\267\172\050\173\047\174\153\175\143" +
    "\001\002\000\100\031\124\032\150\033\154\034\155\037" +
    "\200\044\106\050\273\054\227\073\265\074\122\101\266" +
    "\102\131\104\221\105\210\107\133\117\156\121\051\132" +
    "\117\151\045\157\052\161\165\164\270\165\044\166\202" +
    "\167\276\170\175\171\267\172\050\173\047\174\153\175" +
    "\143\001\002\000\100\031\124\032\150\033\154\034\155" +
    "\037\200\044\106\050\273\054\227\073\265\074\122\101" +
    "\266\102\131\104\221\105\210\107\133\117\156\121\051" +
    "\132\117\151\045\157\052\161\165\164\270\165\044\166" +
    "\202\167\276\170\175\171\267\172\050\173\047\174\153" +
    "\175\143\001\002\000\010\026\325\027\327\030\326\001" +
    "\ufeec\000\012\024\u0108\025\u0106\114\u0107\140\u0105\001\ufef4" +
    "\000\002\001\ufef8\000\062\031\124\032\150\033\154\034" +
    "\155\044\106\050\273\054\227\073\265\074\122\101\266" +
    "\102\131\107\133\121\051\151\045\157\052\164\270\165" +
    "\044\167\276\170\175\171\267\172\050\173\047\174\153" +
    "\175\143\001\002\000\062\031\124\032\150\033\154\034" +
    "\155\044\106\050\273\054\227\073\265\074\122\101\266" +
    "\102\131\107\133\121\051\151\045\157\052\164\270\165" +
    "\044\167\276\170\175\171\267\172\050\173\047\174\153" +
    "\175\143\001\002\000\062\031\124\032\150\033\154\034" +
    "\155\044\106\050\273\054\227\073\265\074\122\101\266" +
    "\102\131\107\133\121\051\151\045\157\052\164\270\165" +
    "\044\167\276\170\175\171\267\172\050\173\047\174\153" +
    "\175\143\001\002\000\062\031\124\032\150\033\154\034" +
    "\155\044\106\050\273\054\227\073\265\074\122\101\266" +
    "\102\131\107\133\121\051\151\045\157\052\164\270\165" +
    "\044\167\276\170\175\171\267\172\050\173\047\174\153" +
    "\175\143\001\002\000\012\024\u0108\025\u0106\114\u0107\140" +
    "\u0105\001\ufef2\000\002\001\ufef6\000\012\024\u0108\025\u0106" +
    "\114\u0107\140\u0105\001\ufef3\000\002\001\ufef7\000\002\001" +
    "\ufe9f\000\002\001\ufe9c\000\010\153\u0101\154\377\155\u0100" +
    "\001\ufeff\000\002\001\uff13\000\002\001\uff72\000\010\045" +
    "\247\053\u0113\102\246\001\002\000\020\054\067\063\071" +
    "\137\070\143\100\151\057\170\053\173\047\001\002\000" +
    "\002\001\uff43\000\002\001\uff73\000\006\157\u0119\173\047" +
    "\001\002\000\010\153\u0101\154\377\155\u0100\001\ufefb\000" +
    "\002\001\uff0f\000\002\001\uffa1\000\010\153\u0101\154\377" +
    "\155\u0100\001\ufefc\000\002\001\uff10\000\010\045\247\053" +
    "\u0113\102\246\001\002\000\002\001\uff41\000\010\045\247" +
    "\053\u0113\102\246\001\002\000\002\001\uff46\000\076\031" +
    "\124\032\150\033\154\034\155\037\200\044\106\050\273" +
    "\054\227\074\122\101\302\102\131\104\221\105\210\107" +
    "\133\117\156\121\051\132\117\151\045\157\052\161\165" +
    "\164\270\165\044\166\202\167\303\170\175\171\267\172" +
    "\050\173\047\174\153\175\143\001\002\000\002\001\ufecf" +
    "\000\004\173\047\001\002\000\004\160\062\001\uff98\000" +
    "\100\031\124\032\150\033\154\034\155\037\200\044\106" +
    "\050\273\054\227\073\265\074\122\101\266\102\131\104" +
    "\221\105\210\107\133\117\156\121\051\132\117\151\045" +
    "\157\052\161\165\164\270\165\044\166\202\167\276\170" +
    "\175\171\267\172\050\173\047\174\153\175\143\001\002" +
    "\000\100\031\124\032\150\033\154\034\155\037\200\044" +
    "\106\050\273\054\227\073\265\074\122\101\266\102\131" +
    "\104\221\105\210\107\133\117\156\121\051\132\117\151" +
    "\045\157\052\161\165\164\270\165\044\166\202\167\276" +
    "\170\175\171\267\172\050\173\047\174\153\175\143\001" +
    "\002\000\100\031\124\032\150\033\154\034\155\037\200" +
    "\044\106\050\273\054\227\073\265\074\122\101\266\102" +
    "\131\104\221\105\210\107\133\117\156\121\051\132\117" +
    "\151\045\157\052\161\165\164\270\165\044\166\202\167" +
    "\276\170\175\171\267\172\050\173\047\174\153\175\143" +
    "\001\002\000\002\001\ufee5\000\002\001\ufee4\000\002\001" +
    "\ufee6\000\002\001\uff84\000\002\001\ufed9\000\002\001\ufedc" +
    "\000\002\001\ufea0\000\002\001\ufe9d\000\010\045\247\053" +
    "\u0113\102\246\001\002\000\002\001\uff44\000\116\031\124" +
    "\032\150\033\154\034\155\036\u013d\037\200\044\106\050" +
    "\273\054\227\073\265\074\122\101\266\102\131\104\221" +
    "\105\210\106\u013c\107\133\117\156\120\u013b\121\051\122" +
    "\u0134\132\117\133\u013a\151\u0132\152\u013f\157\052\161\165" +
    "\162\u0133\164\270\165\044\166\202\167\276\170\175\171" +
    "\267\172\050\173\047\174\153\175\143\001\002\000\064" +
    "\031\124\032\150\033\154\034\155\044\106\050\273\054" +
    "\227\073\265\074\122\101\266\102\131\107\133\121\051" +
    "\151\045\157\052\160\u0116\164\270\165\044\167\276\170" +
    "\175\171\267\172\050\173\047\174\153\175\143\001\002" +
    "\000\062\031\124\032\150\033\154\034\155\044\106\050" +
    "\273\054\227\073\265\074\122\101\266\102\131\107\133" +
    "\121\051\151\045\157\052\164\270\165\044\167\276\170" +
    "\175\171\267\172\050\173\047\174\153\175\143\001\002" +
    "\000\100\031\124\032\150\033\154\034\155\036\u013d\044" +
    "\106\050\273\054\227\073\265\074\122\101\266\102\131" +
    "\106\u013c\107\133\120\u013b\121\051\122\u0134\133\u013a\151" +
    "\u0132\152\u013f\157\052\162\u0133\164\270\165\044\167\276" +
    "\170\175\171\267\172\050\173\047\174\153\175\143\001" +
    "\002\000\010\153\u0143\154\u0141\155\u0142\001\ufefa\000\032" +
    "\061\u015a\071\u0158\072\u0153\077\u0152\110\u015b\111\u0154\123" +
    "\u0151\124\u0156\125\u0155\126\u0150\127\u0159\130\u0157\001\uff23" +
    "\000\006\041\u0149\076\u0148\001\uff2e\000\002\001\uff39\000" +
    "\012\024\u0108\025\u0106\114\u0107\140\u0105\001\ufef5\000\062" +
    "\031\124\032\150\033\154\034\155\044\106\050\273\054" +
    "\227\073\265\074\122\101\266\102\131\107\133\121\051" +
    "\151\045\157\052\164\270\165\044\167\276\170\175\171" +
    "\267\172\050\173\047\174\153\175\143\001\002\000\062" +
    "\031\124\032\150\033\154\034\155\044\106\050\273\054" +
    "\227\073\265\074\122\101\266\102\131\107\133\121\051" +
    "\151\045\157\052\164\270\165\044\167\276\170\175\171" +
    "\267\172\050\173\047\174\153\175\143\001\002\000\062" +
    "\031\124\032\150\033\154\034\155\044\106\050\273\054" +
    "\227\073\265\074\122\101\266\102\131\107\133\121\051" +
    "\151\045\157\052\164\270\165\044\167\276\170\175\171" +
    "\267\172\050\173\047\174\153\175\143\001\002\000\062" +
    "\031\124\032\150\033\154\034\155\044\106\050\273\054" +
    "\227\073\265\074\122\101\266\102\131\107\133\121\051" +
    "\151\045\157\052\164\270\165\044\167\276\170\175\171" +
    "\267\172\050\173\047\174\153\175\143\001\002\000\002" +
    "\001\uff3b\000\062\031\124\032\150\033\154\034\155\044" +
    "\106\050\273\054\227\073\265\074\122\101\266\102\131" +
    "\107\133\121\051\151\045\157\052\164\270\165\044\167" +
    "\276\170\175\171\267\172\050\173\047\174\153\175\143" +
    "\001\002\000\010\153\u0143\154\u0141\155\u0142\001\ufefc\000" +
    "\062\031\124\032\150\033\154\034\155\044\106\050\273" +
    "\054\227\073\265\074\122\101\266\102\131\107\133\121" +
    "\051\151\045\157\052\164\270\165\044\167\276\170\175" +
    "\171\267\172\050\173\047\174\153\175\143\001\002\000" +
    "\062\031\124\032\150\033\154\034\155\044\106\050\273" +
    "\054\227\073\265\074\122\101\266\102\131\107\133\121" +
    "\051\151\045\157\052\164\270\165\044\167\276\170\175" +
    "\171\267\172\050\173\047\174\153\175\143\001\002\000" +
    "\062\031\124\032\150\033\154\034\155\044\106\050\273" +
    "\054\227\073\265\074\122\101\266\102\131\107\133\121" +
    "\051\151\045\157\052\164\270\165\044\167\276\170\175" +
    "\171\267\172\050\173\047\174\153\175\143\001\002\000" +
    "\010\153\u0143\154\u0141\155\u0142\001\uff01\000\010\153\u0143" +
    "\154\u0141\155\u0142\001\ufefe\000\010\153\u0143\154\u0141\155" +
    "\u0142\001\uff00\000\010\153\u0143\154\u0141\155\u0142\001\ufefd" +
    "\000\100\031\124\032\150\033\154\034\155\036\u013d\044" +
    "\106\050\273\054\227\073\265\074\122\101\266\102\131" +
    "\106\u013c\107\133\120\u013b\121\051\122\u0134\133\u013a\151" +
    "\u0132\152\u013f\157\052\162\u0133\164\270\165\044\167\276" +
    "\170\175\171\267\172\050\173\047\174\153\175\143\001" +
    "\002\000\100\031\124\032\150\033\154\034\155\036\u013d" +
    "\044\106\050\273\054\227\073\265\074\122\101\266\102" +
    "\131\106\u013c\107\133\120\u013b\121\051\122\u0134\133\u013a" +
    "\151\u0132\152\u013f\157\052\162\u0133\164\270\165\044\167" +
    "\276\170\175\171\267\172\050\173\047\174\153\175\143" +
    "\001\002\000\002\001\uff27\000\002\001\uff2b\000\004\057" +
    "\u014d\001\uff30\000\100\031\124\032\150\033\154\034\155" +
    "\036\u013d\044\106\050\273\054\227\073\265\074\122\101" +
    "\266\102\131\106\u013c\107\133\120\u013b\121\051\122\u0134" +
    "\133\u013a\151\u0132\152\u013f\157\052\162\u0133\164\270\165" +
    "\044\167\276\170\175\171\267\172\050\173\047\174\153" +
    "\175\143\001\002\000\002\001\uff2c\000\002\001\uff2d\000" +
    "\062\031\124\032\150\033\154\034\155\044\106\050\273" +
    "\054\227\073\265\074\122\101\266\102\131\107\133\121" +
    "\051\151\045\157\052\164\270\165\044\167\276\170\175" +
    "\171\267\172\050\173\047\174\153\175\143\001\002\000" +
    "\062\031\124\032\150\033\154\034\155\044\106\050\273" +
    "\054\227\073\265\074\122\101\266\102\131\107\133\121" +
    "\051\151\045\157\052\164\270\165\044\167\276\170\175" +
    "\171\267\172\050\173\047\174\153\175\143\001\002\000" +
    "\062\031\124\032\150\033\154\034\155\044\106\050\273" +
    "\054\227\073\265\074\122\101\266\102\131\107\133\121" +
    "\051\151\045\157\052\164\270\165\044\167\276\170\175" +
    "\171\267\172\050\173\047\174\153\175\143\001\002\000" +
    "\062\031\124\032\150\033\154\034\155\044\106\050\273" +
    "\054\227\073\265\074\122\101\266\102\131\107\133\121" +
    "\051\151\045\157\052\164\270\165\044\167\276\170\175" +
    "\171\267\172\050\173\047\174\153\175\143\001\002\000" +
    "\062\031\124\032\150\033\154\034\155\044\106\050\273" +
    "\054\227\073\265\074\122\101\266\102\131\107\133\121" +
    "\051\151\045\157\052\164\270\165\044\167\276\170\175" +
    "\171\267\172\050\173\047\174\153\175\143\001\002\000" +
    "\062\031\124\032\150\033\154\034\155\044\106\050\273" +
    "\054\227\073\265\074\122\101\266\102\131\107\133\121" +
    "\051\151\045\157\052\164\270\165\044\167\276\170\175" +
    "\171\267\172\050\173\047\174\153\175\143\001\002\000" +
    "\062\031\124\032\150\033\154\034\155\044\106\050\273" +
    "\054\227\073\265\074\122\101\266\102\131\107\133\121" +
    "\051\151\045\157\052\164\270\165\044\167\276\170\175" +
    "\171\267\172\050\173\047\174\153\175\143\001\002\000" +
    "\062\031\124\032\150\033\154\034\155\044\106\050\273" +
    "\054\227\073\265\074\122\101\266\102\131\107\133\121" +
    "\051\151\045\157\052\164\270\165\044\167\276\170\175" +
    "\171\267\172\050\173\047\174\153\175\143\001\002\000" +
    "\062\031\124\032\150\033\154\034\155\044\106\050\273" +
    "\054\227\073\265\074\122\101\266\102\131\107\133\121" +
    "\051\151\045\157\052\164\270\165\044\167\276\170\175" +
    "\171\267\172\050\173\047\174\153\175\143\001\002\000" +
    "\062\031\124\032\150\033\154\034\155\044\106\050\273" +
    "\054\227\073\265\074\122\101\266\102\131\107\133\121" +
    "\051\151\045\157\052\164\270\165\044\167\276\170\175" +
    "\171\267\172\050\173\047\174\153\175\143\001\002\000" +
    "\062\031\124\032\150\033\154\034\155\044\106\050\273" +
    "\054\227\073\265\074\122\101\266\102\131\107\133\121" +
    "\051\151\045\157\052\164\270\165\044\167\276\170\175" +
    "\171\267\172\050\173\047\174\153\175\143\001\002\000" +
    "\062\031\124\032\150\033\154\034\155\044\106\050\273" +
    "\054\227\073\265\074\122\101\266\102\131\107\133\121" +
    "\051\151\045\157\052\164\270\165\044\167\276\170\175" +
    "\171\267\172\050\173\047\174\153\175\143\001\002\000" +
    "\010\153\u0143\154\u0141\155\u0142\001\uff0b\000\010\153\u0143" +
    "\154\u0141\155\u0142\001\uff0c\000\010\153\u0143\154\u0141\155" +
    "\u0142\001\uff05\000\010\153\u0143\154\u0141\155\u0142\001\uff0a" +
    "\000\010\153\u0143\154\u0141\155\u0142\001\uff03\000\010\153" +
    "\u0143\154\u0141\155\u0142\001\uff04\000\010\153\u0143\154\u0141" +
    "\155\u0142\001\uff02\000\010\153\u0143\154\u0141\155\u0142\001" +
    "\uff09\000\010\153\u0143\154\u0141\155\u0142\001\uff08\000\010" +
    "\153\u0143\154\u0141\155\u0142\001\uff0d\000\010\153\u0143\154" +
    "\u0141\155\u0142\001\uff06\000\010\153\u0143\154\u0141\155\u0142" +
    "\001\uff07\000\002\001\uff22\000\010\153\u0143\154\u0141\155" +
    "\u0142\001\ufeff\000\010\153\u0143\154\u0141\155\u0142\001\ufefb" +
    "\000\010\153\u0101\154\377\155\u0100\001\ufefd\000\002\001" +
    "\uff11\000\010\153\u0101\154\377\155\u0100\001\ufefe\000\002" +
    "\001\uff12\000\010\045\247\053\u0113\102\246\001\002\000" +
    "\002\001\uff45\000\116\031\124\032\150\033\154\034\155" +
    "\036\130\037\200\044\106\050\214\054\227\073\224\074" +
    "\122\101\171\102\131\104\221\105\210\106\157\107\133" +
    "\117\156\120\216\121\051\122\140\132\117\133\160\151" +
    "\204\152\203\157\052\161\165\162\211\164\166\165\044" +
    "\166\202\167\125\170\175\171\141\172\050\173\047\174" +
    "\153\175\143\001\uff4e\000\004\146\u0173\001\002\000\002" +
    "\001\ufeac\000\116\031\124\032\150\033\154\034\155\036" +
    "\u013d\037\200\044\106\050\273\054\227\073\265\074\122" +
    "\101\266\102\131\104\221\105\210\106\u013c\107\133\117" +
    "\156\120\u013b\121\051\122\u0134\132\117\133\u013a\151\u0132" +
    "\152\u013f\157\052\161\165\162\u0133\164\270\165\044\166" +
    "\202\167\276\170\175\171\267\172\050\173\047\174\153" +
    "\175\143\001\002\000\004\075\u0177\001\uff3d\000\002\001" +
    "\uff3f\000\100\031\124\032\150\033\154\034\155\036\u013d" +
    "\044\106\050\273\054\227\073\265\074\122\101\266\102" +
    "\131\106\u013c\107\133\120\u013b\121\051\122\u0134\133\u013a" +
    "\151\u0132\152\u013f\157\052\162\u0133\164\270\165\044\167" +
    "\276\170\175\171\267\172\050\173\047\174\153\175\143" +
    "\001\002\000\062\031\124\032\150\033\154\034\155\044" +
    "\106\050\214\054\227\073\224\074\122\101\171\102\131" +
    "\107\133\121\051\151\045\157\052\164\166\165\044\167" +
    "\125\170\175\171\141\172\050\173\047\174\153\175\143" +
    "\001\002\000\062\031\124\032\150\033\154\034\155\044" +
    "\106\050\214\054\227\073\224\074\122\101\171\102\131" +
    "\107\133\121\051\151\045\157\052\164\166\165\044\167" +
    "\125\170\175\171\141\172\050\173\047\174\153\175\143" +
    "\001\002\000\062\031\124\032\150\033\154\034\155\044" +
    "\106\050\214\054\227\073\224\074\122\101\171\102\131" +
    "\107\133\121\051\151\045\157\052\164\166\165\044\167" +
    "\125\170\175\171\141\172\050\173\047\174\153\175\143" +
    "\001\002\000\062\031\124\032\150\033\154\034\155\044" +
    "\106\050\214\054\227\073\224\074\122\101\171\102\131" +
    "\107\133\121\051\151\045\157\052\164\166\165\044\167" +
    "\125\170\175\171\141\172\050\173\047\174\153\175\143" +
    "\001\002\000\062\031\124\032\150\033\154\034\155\044" +
    "\106\050\214\054\227\073\224\074\122\101\171\102\131" +
    "\107\133\121\051\151\045\157\052\164\166\165\044\167" +
    "\125\170\175\171\141\172\050\173\047\174\153\175\143" +
    "\001\002\000\062\031\124\032\150\033\154\034\155\044" +
    "\106\050\214\054\227\073\224\074\122\101\171\102\131" +
    "\107\133\121\051\151\045\157\052\164\166\165\044\167" +
    "\125\170\175\171\141\172\050\173\047\174\153\175\143" +
    "\001\002\000\062\031\124\032\150\033\154\034\155\044" +
    "\106\050\214\054\227\073\224\074\122\101\171\102\131" +
    "\107\133\121\051\151\045\157\052\164\166\165\044\167" +
    "\125\170\175\171\141\172\050\173\047\174\153\175\143" +
    "\001\002\000\062\031\124\032\150\033\154\034\155\044" +
    "\106\050\214\054\227\073\224\074\122\101\171\102\131" +
    "\107\133\121\051\151\045\157\052\164\166\165\044\167" +
    "\125\170\175\171\141\172\050\173\047\174\153\175\143" +
    "\001\002\000\062\031\124\032\150\033\154\034\155\044" +
    "\106\050\214\054\227\073\224\074\122\101\171\102\131" +
    "\107\133\121\051\151\045\157\052\164\166\165\044\167" +
    "\125\170\175\171\141\172\050\173\047\174\153\175\143" +
    "\001\002\000\062\031\124\032\150\033\154\034\155\044" +
    "\106\050\214\054\227\073\224\074\122\101\171\102\131" +
    "\107\133\121\051\151\045\157\052\164\166\165\044\167" +
    "\125\170\175\171\141\172\050\173\047\174\153\175\143" +
    "\001\002\000\062\031\124\032\150\033\154\034\155\044" +
    "\106\050\214\054\227\073\224\074\122\101\171\102\131" +
    "\107\133\121\051\151\045\157\052\164\166\165\044\167" +
    "\125\170\175\171\141\172\050\173\047\174\153\175\143" +
    "\001\002\000\062\031\124\032\150\033\154\034\155\044" +
    "\106\050\214\054\227\073\224\074\122\101\171\102\131" +
    "\107\133\121\051\151\045\157\052\164\166\165\044\167" +
    "\125\170\175\171\141\172\050\173\047\174\153\175\143" +
    "\001\002\000\010\153\u0101\154\377\155\u0100\001\uff0b\000" +
    "\002\001\uff1f\000\010\153\u0101\154\377\155\u0100\001\uff0c" +
    "\000\002\001\uff20\000\010\153\u0101\154\377\155\u0100\001" +
    "\uff05\000\002\001\uff19\000\010\153\u0101\154\377\155\u0100" +
    "\001\uff0a\000\002\001\uff1e\000\010\153\u0101\154\377\155" +
    "\u0100\001\uff04\000\002\001\uff18\000\010\153\u0101\154\377" +
    "\155\u0100\001\uff03\000\002\001\uff17\000\010\153\u0101\154" +
    "\377\155\u0100\001\uff02\000\002\001\uff16\000\010\153\u0101" +
    "\154\377\155\u0100\001\uff09\000\002\001\uff1d\000\010\153" +
    "\u0101\154\377\155\u0100\001\uff0d\000\002\001\uff21\000\010" +
    "\153\u0101\154\377\155\u0100\001\uff06\000\002\001\uff1a\000" +
    "\010\153\u0101\154\377\155\u0100\001\uff08\000\002\001\uff1c" +
    "\000\010\153\u0101\154\377\155\u0100\001\uff07\000\002\001" +
    "\uff1b\000\002\001\ufea1\000\002\001\ufe9e\000\002\001\uff25" +
    "\000\002\001\uff24\000\076\031\124\032\150\033\154\034" +
    "\307\037\200\044\106\050\273\054\311\074\122\101\310" +
    "\102\131\104\221\105\210\107\133\117\156\121\051\132" +
    "\117\151\045\157\052\161\165\164\270\165\044\166\202" +
    "\167\312\170\175\171\267\172\050\173\047\174\153\175" +
    "\143\001\002\000\002\001\ufea8\000\076\031\124\032\150" +
    "\033\154\034\155\037\200\044\106\050\273\054\227\074" +
    "\122\101\302\102\131\104\221\105\210\107\133\117\156" +
    "\121\051\132\117\151\045\157\052\161\165\164\270\165" +
    "\044\166\202\167\303\170\175\171\267\172\050\173\047" +
    "\174\153\175\143\001\002\000\002\001\ufeb3\000\004\147" +
    "\u01a5\001\002\000\002\001\ufe90\000\010\151\057\170\053" +
    "\173\047\001\002\000\010\151\057\170\053\173\047\001" +
    "\002\000\006\052\u01c0\053\103\001\002\000\012\045\247" +
    "\053\u01ba\102\246\145\u01bc\001\002\000\012\103\231\151" +
    "\057\170\053\173\047\001\002\000\002\001\uff74\000\006" +
    "\052\uff94\053\uff94\001\uffa5\000\012\054\u01ae\151\057\170" +
    "\053\173\047\001\002\000\010\151\057\170\053\173\047" +
    "\001\002\000\006\052\105\053\103\001\002\000\006\052" +
    "\u01b1\053\103\001\002\000\116\031\124\032\150\033\154" +
    "\034\155\036\130\037\200\044\106\050\214\054\u01b3\073" +
    "\224\074\122\101\171\102\131\104\221\105\210\106\157" +
    "\107\133\117\156\120\216\121\051\122\140\132\117\133" +
    "\160\151\204\152\203\157\052\161\165\162\211\164\166" +
    "\165\044\166\202\167\125\170\175\171\141\172\050\173" +
    "\047\174\153\175\143\001\002\000\002\001\uff8b\000\120" +
    "\031\124\032\150\033\154\034\155\036\130\037\200\044" +
    "\106\050\214\054\227\073\224\074\122\101\171\102\131" +
    "\103\231\104\221\105\210\106\157\107\133\117\156\120" +
    "\216\121\051\122\140\132\117\133\160\151\204\152\203" +
    "\157\052\161\165\162\211\164\166\165\044\166\202\167" +
    "\125\170\175\171\141\172\050\173\047\174\153\175\143" +
    "\001\002\000\002\001\uff85\000\006\052\u01b6\053\103\001" +
    "\002\000\116\031\124\032\150\033\154\034\155\036\130" +
    "\037\200\044\106\050\214\054\u01b8\073\224\074\122\101" +
    "\171\102\131\104\221\105\210\106\157\107\133\117\156" +
    "\120\216\121\051\122\140\132\117\133\160\151\204\152" +
    "\203\157\052\161\165\162\211\164\166\165\044\166\202" +
    "\167\125\170\175\171\141\172\050\173\047\174\153\175" +
    "\143\001\002\000\002\001\uff8c\000\120\031\124\032\150" +
    "\033\154\034\155\036\130\037\200\044\106\050\214\054" +
    "\227\073\224\074\122\101\171\102\131\103\231\104\221" +
    "\105\210\106\157\107\133\117\156\120\216\121\051\122" +
    "\140\132\117\133\160\151\204\152\203\157\052\161\165" +
    "\162\211\164\166\165\044\166\202\167\125\170\175\171" +
    "\141\172\050\173\047\174\153\175\143\001\002\000\002" +
    "\001\uff86\000\020\054\u01be\063\u01a6\137\u01a7\143\u01ad\151" +
    "\057\170\053\173\047\001\002\000\004\145\u01bd\001\002" +
    "\000\002\001\ufe8b\000\002\001\ufe8c\000\010\151\057\170" +
    "\053\173\047\001\002\000\002\001\uff75\000\116\031\124" +
    "\032\150\033\154\034\155\036\130\037\200\044\106\050" +
    "\214\054\u01c2\073\224\074\122\101\171\102\131\104\221" +
    "\105\210\106\157\107\133\117\156\120\216\121\051\122" +
    "\140\132\117\133\160\151\204\152\203\157\052\161\165" +
    "\162\211\164\166\165\044\166\202\167\125\170\175\171" +
    "\141\172\050\173\047\174\153\175\143\001\002\000\002" +
    "\001\uff89\000\120\031\124\032\150\033\154\034\155\036" +
    "\130\037\200\044\106\050\214\054\227\073\224\074\122" +
    "\101\171\102\131\103\231\104\221\105\210\106\157\107" +
    "\133\117\156\120\216\121\051\122\140\132\117\133\160" +
    "\151\204\152\203\157\052\161\165\162\211\164\166\165" +
    "\044\166\202\167\125\170\175\171\141\172\050\173\047" +
    "\174\153\175\143\001\002\000\002\001\uff83\000\006\052" +
    "\u01c5\053\103\001\002\000\116\031\124\032\150\033\154" +
    "\034\155\036\130\037\200\044\106\050\214\054\u01c7\073" +
    "\224\074\122\101\171\102\131\104\221\105\210\106\157" +
    "\107\133\117\156\120\216\121\051\122\140\132\117\133" +
    "\160\151\204\152\203\157\052\161\165\162\211\164\166" +
    "\165\044\166\202\167\125\170\175\171\141\172\050\173" +
    "\047\174\153\175\143\001\002\000\002\001\uff8e\000\120" +
    "\031\124\032\150\033\154\034\155\036\130\037\200\044" +
    "\106\050\214\054\227\073\224\074\122\101\171\102\131" +
    "\103\231\104\221\105\210\106\157\107\133\117\156\120" +
    "\216\121\051\122\140\132\117\133\160\151\204\152\203" +
    "\157\052\161\165\162\211\164\166\165\044\166\202\167" +
    "\125\170\175\171\141\172\050\173\047\174\153\175\143" +
    "\001\002\000\002\001\uff88\000\006\052\u01ca\053\103\001" +
    "\002\000\116\031\124\032\150\033\154\034\155\036\130" +
    "\037\200\044\106\050\214\054\u01cc\073\224\074\122\101" +
    "\171\102\131\104\221\105\210\106\157\107\133\117\156" +
    "\120\216\121\051\122\140\132\117\133\160\151\204\152" +
    "\203\157\052\161\165\162\211\164\166\165\044\166\202" +
    "\167\125\170\175\171\141\172\050\173\047\174\153\175" +
    "\143\001\002\000\002\001\uff8d\000\120\031\124\032\150" +
    "\033\154\034\155\036\130\037\200\044\106\050\214\054" +
    "\227\073\224\074\122\101\171\102\131\103\231\104\221" +
    "\105\210\106\157\107\133\117\156\120\216\121\051\122" +
    "\140\132\117\133\160\151\204\152\203\157\052\161\165" +
    "\162\211\164\166\165\044\166\202\167\125\170\175\171" +
    "\141\172\050\173\047\174\153\175\143\001\002\000\002" +
    "\001\uff87\000\010\153\u0101\154\377\155\u0100\001\uff01\000" +
    "\002\001\uff15\000\002\001\ufeda\000\002\001\ufedd\000\076" +
    "\031\124\032\150\033\154\034\155\037\200\044\106\050" +
    "\273\054\227\074\122\101\302\102\131\104\221\105\210" +
    "\107\133\117\156\121\051\132\117\151\045\157\052\161" +
    "\165\164\270\165\044\166\202\167\303\170\175\171\267" +
    "\172\050\173\047\174\153\175\143\001\002\000\002\001" +
    "\ufed3\000\010\045\247\053\u0113\102\246\001\002\000\002" +
    "\001\uff42\000\076\031\124\032\150\033\154\034\155\037" +
    "\200\044\106\050\273\054\227\074\122\101\302\102\131" +
    "\104\221\105\210\107\133\117\156\121\051\132\117\151" +
    "\045\157\052\161\165\164\270\165\044\166\202\167\303" +
    "\170\175\171\267\172\050\173\047\174\153\175\143\001" +
    "\002\000\076\031\124\032\150\033\154\034\155\037\200" +
    "\044\106\050\273\054\227\074\122\101\302\102\131\104" +
    "\221\105\210\107\133\117\156\121\051\132\117\151\045" +
    "\157\052\161\165\164\270\165\044\166\202\167\303\170" +
    "\175\171\267\172\050\173\047\174\153\175\143\001\002" +
    "\000\002\001\ufebb\000\002\001\ufeb7\000\116\031\124\032" +
    "\150\033\154\034\155\036\130\037\200\044\106\050\214" +
    "\054\227\073\224\074\122\101\171\102\131\104\221\105" +
    "\210\106\157\107\133\117\156\120\216\121\051\122\140" +
    "\132\117\133\160\151\204\152\203\157\052\161\165\162" +
    "\211\164\166\165\044\166\202\167\125\170\175\171\141" +
    "\172\050\173\047\174\153\175\143\001\002\000\116\031" +
    "\124\032\150\033\154\034\155\036\u013d\037\200\044\106" +
    "\050\273\054\227\073\265\074\122\101\266\102\131\104" +
    "\221\105\210\106\u013c\107\133\117\156\120\u013b\121\051" +
    "\122\u0134\132\117\133\u013a\151\u0132\152\u013f\157\052\161" +
    "\165\162\u0133\164\270\165\044\166\202\167\276\170\175" +
    "\171\267\172\050\173\047\174\153\175\143\001\002\000" +
    "\002\001\uff29\000\002\001\uff33\000\002\001\uff31\000\004" +
    "\057\u01e0\001\uff30\000\116\031\124\032\150\033\154\034" +
    "\155\036\130\037\200\044\106\050\214\054\227\073\224" +
    "\074\122\101\171\102\131\104\221\105\210\106\157\107" +
    "\133\117\156\120\216\121\051\122\140\132\117\133\160" +
    "\151\204\152\203\157\052\161\165\162\211\164\166\165" +
    "\044\166\202\167\125\170\175\171\141\172\050\173\047" +
    "\174\153\175\143\001\002\000\002\001\uff32\000\002\001" +
    "\uff35\000\002\001\uff34\000\002\001\ufe8e\000\002\001\uff7d" +
    "\000\120\031\124\032\150\033\154\034\155\036\130\037" +
    "\200\044\106\050\214\054\227\073\224\074\122\101\171" +
    "\102\131\103\231\104\221\105\210\106\157\107\133\117" +
    "\156\120\216\121\051\122\140\132\117\133\160\151\204" +
    "\152\203\157\052\161\165\162\211\164\166\165\044\166" +
    "\202\167\125\170\175\171\141\172\050\173\047\174\153" +
    "\175\143\001\002\000\002\001\uff77\000\002\001\uff93\000" +
    "\010\052\u01b1\053\103\061\u01ea\001\002\000\116\031\124" +
    "\032\150\033\154\034\155\036\130\037\200\044\106\050" +
    "\214\054\u01ec\073\224\074\122\101\171\102\131\104\221" +
    "\105\210\106\157\107\133\117\156\120\216\121\051\122" +
    "\140\132\117\133\160\151\204\152\203\157\052\161\165" +
    "\162\211\164\166\165\044\166\202\167\125\170\175\171" +
    "\141\172\050\173\047\174\153\175\143\001\002\000\002" +
    "\001\uff7e\000\120\031\124\032\150\033\154\034\155\036" +
    "\130\037\200\044\106\050\214\054\227\073\224\074\122" +
    "\101\171\102\131\103\231\104\221\105\210\106\157\107" +
    "\133\117\156\120\216\121\051\122\140\132\117\133\160" +
    "\151\204\152\203\157\052\161\165\162\211\164\166\165" +
    "\044\166\202\167\125\170\175\171\141\172\050\173\047" +
    "\174\153\175\143\001\002\000\002\001\uff78\000\004\052" +
    "\u01ef\001\002\000\116\031\124\032\150\033\154\034\155" +
    "\036\130\037\200\044\106\050\214\054\227\073\224\074" +
    "\122\101\171\102\131\104\221\105\210\106\157\107\133" +
    "\117\156\120\216\121\051\122\140\132\117\133\160\151" +
    "\204\152\203\157\052\161\165\162\211\164\166\165\044" +
    "\166\202\167\125\170\175\171\141\172\050\173\047\174" +
    "\153\175\143\001\002\000\004\102\246\001\002\000\002" +
    "\001\uffbc\000\002\001\uff6e\000\116\031\124\032\150\033" +
    "\154\034\155\036\130\037\200\044\106\050\214\054\u01f5" +
    "\073\224\074\122\101\171\102\131\104\221\105\210\106" +
    "\157\107\133\117\156\120\216\121\051\122\140\132\117" +
    "\133\160\151\204\152\203\157\052\161\165\162\211\164" +
    "\166\165\044\166\202\167\125\170\175\171\141\172\050" +
    "\173\047\174\153\175\143\001\002\000\002\001\uff7c\000" +
    "\120\031\124\032\150\033\154\034\155\036\130\037\200" +
    "\044\106\050\214\054\227\073\224\074\122\101\171\102" +
    "\131\103\231\104\221\105\210\106\157\107\133\117\156" +
    "\120\216\121\051\122\140\132\117\133\160\151\204\152" +
    "\203\157\052\161\165\162\211\164\166\165\044\166\202" +
    "\167\125\170\175\171\141\172\050\173\047\174\153\175" +
    "\143\001\002\000\002\001\uff76\000\022\053\076\054\067" +
    "\063\071\137\070\143\100\151\057\170\053\173\047\001" +
    "\uff71\000\002\001\uff6f\000\010\052\u01ca\053\103\061\u01fa" +
    "\001\002\000\116\031\124\032\150\033\154\034\155\036" +
    "\130\037\200\044\106\050\214\054\u01fc\073\224\074\122" +
    "\101\171\102\131\104\221\105\210\106\157\107\133\117" +
    "\156\120\216\121\051\122\140\132\117\133\160\151\204" +
    "\152\203\157\052\161\165\162\211\164\166\165\044\166" +
    "\202\167\125\170\175\171\141\172\050\173\047\174\153" +
    "\175\143\001\002\000\002\001\uff80\000\120\031\124\032" +
    "\150\033\154\034\155\036\130\037\200\044\106\050\214" +
    "\054\227\073\224\074\122\101\171\102\131\103\231\104" +
    "\221\105\210\106\157\107\133\117\156\120\216\121\051" +
    "\122\140\132\117\133\160\151\204\152\203\157\052\161" +
    "\165\162\211\164\166\165\044\166\202\167\125\170\175" +
    "\171\141\172\050\173\047\174\153\175\143\001\002\000" +
    "\002\001\uff7a\000\010\052\u01c5\053\103\061\u01ff\001\002" +
    "\000\116\031\124\032\150\033\154\034\155\036\130\037" +
    "\200\044\106\050\214\054\u0201\073\224\074\122\101\171" +
    "\102\131\104\221\105\210\106\157\107\133\117\156\120" +
    "\216\121\051\122\140\132\117\133\160\151\204\152\203" +
    "\157\052\161\165\162\211\164\166\165\044\166\202\167" +
    "\125\170\175\171\141\172\050\173\047\174\153\175\143" +
    "\001\002\000\002\001\uff81\000\120\031\124\032\150\033" +
    "\154\034\155\036\130\037\200\044\106\050\214\054\227" +
    "\073\224\074\122\101\171\102\131\103\231\104\221\105" +
    "\210\106\157\107\133\117\156\120\216\121\051\122\140" +
    "\132\117\133\160\151\204\152\203\157\052\161\165\162" +
    "\211\164\166\165\044\166\202\167\125\170\175\171\141" +
    "\172\050\173\047\174\153\175\143\001\002\000\002\001" +
    "\uff7b\000\010\052\u01b6\053\103\061\u0204\001\002\000\116" +
    "\031\124\032\150\033\154\034\155\036\130\037\200\044" +
    "\106\050\214\054\u0206\073\224\074\122\101\171\102\131" +
    "\104\221\105\210\106\157\107\133\117\156\120\216\121" +
    "\051\122\140\132\117\133\160\151\204\152\203\157\052" +
    "\161\165\162\211\164\166\165\044\166\202\167\125\170" +
    "\175\171\141\172\050\173\047\174\153\175\143\001\002" +
    "\000\002\001\uff7f\000\120\031\124\032\150\033\154\034" +
    "\155\036\130\037\200\044\106\050\214\054\227\073\224" +
    "\074\122\101\171\102\131\103\231\104\221\105\210\106" +
    "\157\107\133\117\156\120\216\121\051\122\140\132\117" +
    "\133\160\151\204\152\203\157\052\161\165\162\211\164" +
    "\166\165\044\166\202\167\125\170\175\171\141\172\050" +
    "\173\047\174\153\175\143\001\002\000\002\001\uff79\000" +
    "\004\147\u0209\001\002\000\004\052\u020a\001\002\000\116" +
    "\031\124\032\150\033\154\034\155\036\130\037\200\044" +
    "\106\050\214\054\227\073\224\074\122\101\171\102\131" +
    "\104\221\105\210\106\157\107\133\117\156\120\216\121" +
    "\051\122\140\132\117\133\160\151\204\152\203\157\052" +
    "\161\165\162\211\164\166\165\044\166\202\167\125\170" +
    "\175\171\141\172\050\173\047\174\153\175\143\001\002" +
    "\000\004\102\246\001\002\000\002\001\uffbd\000\004\102" +
    "\246\001\002\000\002\001\uffbb\000\116\031\124\032\150" +
    "\033\154\034\155\036\130\037\200\044\106\050\214\054" +
    "\227\073\224\074\122\101\171\102\131\104\221\105\210" +
    "\106\157\107\133\117\156\120\216\121\051\122\140\132" +
    "\117\133\160\151\204\152\203\157\052\161\165\162\211" +
    "\164\166\165\044\166\202\167\125\170\175\171\141\172" +
    "\050\173\047\174\153\175\143\001\002\000\022\053\076" +
    "\054\067\063\071\137\070\143\100\151\057\170\053\173" +
    "\047\001\uff71\000\022\053\076\054\067\063\071\137\070" +
    "\143\100\151\057\170\053\173\047\001\uff71\000\004\146" +
    "\u0213\001\002\000\004\052\u0214\001\002\000\116\031\124" +
    "\032\150\033\154\034\155\036\130\037\200\044\106\050" +
    "\214\054\227\073\224\074\122\101\171\102\131\104\221" +
    "\105\210\106\157\107\133\117\156\120\216\121\051\122" +
    "\140\132\117\133\160\151\204\152\203\157\052\161\165" +
    "\162\211\164\166\165\044\166\202\167\125\170\175\171" +
    "\141\172\050\173\047\174\153\175\143\001\002\000\004" +
    "\102\246\001\002\000\002\001\uffbf\000\004\147\u0218\001" +
    "\002\000\004\052\u0219\001\002\000\116\031\124\032\150" +
    "\033\154\034\155\036\130\037\200\044\106\050\214\054" +
    "\227\073\224\074\122\101\171\102\131\104\221\105\210" +
    "\106\157\107\133\117\156\120\216\121\051\122\140\132" +
    "\117\133\160\151\204\152\203\157\052\161\165\162\211" +
    "\164\166\165\044\166\202\167\125\170\175\171\141\172" +
    "\050\173\047\174\153\175\143\001\002\000\004\102\246" +
    "\001\002\000\002\001\uffc0\000\004\102\246\001\002\000" +
    "\002\001\uffbe\000\006\042\u021f\103\u0220\001\ufffd\000\010" +
    "\151\057\170\053\173\047\001\002\000\020\121\051\151" +
    "\045\157\052\165\044\170\053\172\050\173\047\001\uff9f" +
    "\000\004\146\u0226\001\002\000\004\053\u0224\001\uff9e\000" +
    "\002\001\uff9d\000\020\121\051\151\045\157\052\165\044" +
    "\170\053\172\050\173\047\001\002\000\002\001\uff9c\000" +
    "\004\042\u0227\001\ufffb\000\010\151\057\170\053\173\047" +
    "\001\002\000\002\001\ufffa\000\002\001\ufffc\000\010\102" +
    "\246\103\u0239\107\u0238\001\uffa5\000\004\056\u022c\001\002" +
    "\000\010\151\057\170\053\173\047\001\002\000\010\102" +
    "\246\103\u0230\107\u022f\001\002\000\002\001\uffb5\000\022" +
    "\053\076\054\067\063\071\137\070\143\100\151\057\170" +
    "\053\173\047\001\uff71\000\022\053\076\054\067\063\071" +
    "\137\070\143\100\151\057\170\053\173\047\001\uff71\000" +
    "\004\146\u0232\001\002\000\004\102\246\001\002\000\002" +
    "\001\uffb6\000\004\147\u0235\001\002\000\004\102\246\001" +
    "\002\000\002\001\uffb7\000\002\001\uffb8\000\022\053\076" +
    "\054\067\063\071\137\070\143\100\151\057\170\053\173" +
    "\047\001\uff71\000\022\053\076\054\067\063\071\137\070" +
    "\143\100\151\057\170\053\173\047\001\uff71\000\004\146" +
    "\u023b\001\002\000\004\102\246\001\002\000\002\001\uffb9" +
    "\000\004\147\u023e\001\002\000\004\102\246\001\002\000" +
    "\002\001\uffba\000\012\061\u0241\102\246\103\u0245\107\u0244" +
    "\001\002\000\116\031\124\032\150\033\154\034\155\036" +
    "\130\037\200\044\106\050\214\054\227\073\224\074\122" +
    "\101\171\102\131\104\221\105\210\106\157\107\133\117" +
    "\156\120\216\121\051\122\140\132\117\133\160\151\204" +
    "\152\203\157\052\161\165\162\211\164\166\165\044\166" +
    "\202\167\125\170\175\171\141\172\050\173\047\174\153" +
    "\175\143\001\002\000\002\001\uffc3\000\002\001\uffc2\000" +
    "\012\147\u024b\151\057\170\053\173\047\001\002\000\012" +
    "\146\u0247\151\057\170\053\173\047\001\002\000\006\053" +
    "\103\146\u0249\001\002\000\006\061\u0241\102\246\001\002" +
    "\000\002\001\uffc4\000\006\061\u0241\102\246\001\002\000" +
    "\002\001\uffc5\000\006\061\u0241\102\246\001\002\000\006" +
    "\053\103\147\u024d\001\002\000\006\061\u0241\102\246\001" +
    "\002\000\002\001\uffc7\000\002\001\uffc6\000\002\001\uffc1" +
    "\000\004\102\u0252\001\002\000\012\145\u0254\151\057\170" +
    "\053\173\047\001\002\000\006\053\103\145\u0255\001\002" +
    "\000\002\001\ufff8\000\002\001\ufff9\000\006\051\020\150" +
    "\026\001\002\000\012\102\246\151\057\170\053\173\047" +
    "\001\002\000\014\067\u025b\102\246\151\057\170\053\173" +
    "\047\001\uffd9\000\004\067\u025b\001\uffd9\000\004\064\u027d" +
    "\001\uffde\000\006\062\u025c\174\u025f\001\002\000\004\174" +
    "\u0274\001\002\000\022\101\u026d\121\u0272\151\u0270\157\u0273" +
    "\165\u026f\170\053\172\u0271\173\047\001\002\000\004\053" +
    "\u026a\001\uffda\000\030\046\u0262\052\u0261\056\u0263\101\uffcb" +
    "\121\uffcb\151\uffcb\157\uffcb\165\uffcb\170\uffcb\172\uffcb\173" +
    "\uffcb\001\uffdc\000\002\001\uffd8\000\004\174\u026c\001\002" +
    "\000\006\062\u025c\174\u0269\001\002\000\004\056\u0264\001" +
    "\002\000\004\174\u0265\001\002\000\004\052\u0266\001\uffca" +
    "\000\004\174\u0267\001\002\000\002\001\uffc9\000\004\053" +
    "\u026a\001\uffdb\000\006\052\u0261\056\u0263\001\uffcb\000\006" +
    "\062\u025c\174\u0269\001\002\000\002\001\uffd7\000\002\001" +
    "\uffc8\000\002\001\uffd4\000\002\001\uffd6\000\002\001\uffd1" +
    "\000\004\160\060\001\uffd3\000\002\001\uffd2\000\002\001" +
    "\uffd0\000\002\001\uffd5\000\006\052\u0275\056\u0276\001\uffcf" +
    "\000\004\174\u027b\001\002\000\004\056\u0277\001\002\000" +
    "\004\174\u0278\001\002\000\004\052\u0279\001\uffce\000\004" +
    "\174\u027a\001\002\000\002\001\uffcd\000\002\001\uffcc\000" +
    "\002\001\uffe4\000\004\174\u027e\001\002\000\002\001\uffdd" +
    "\000\004\067\u025b\001\uffd9\000\004\067\u025b\001\uffd9\000" +
    "\004\064\u027d\001\uffde\000\002\001\uffe0\000\004\064\u027d" +
    "\001\uffde\000\002\001\uffe5\000\004\064\u027d\001\uffde\000" +
    "\002\001\uffe1\000\012\053\103\061\u028a\065\u0289\077\u0288" +
    "\001\uffa6\000\020\121\051\151\045\157\052\165\044\170" +
    "\053\172\050\173\047\001\002\000\020\121\051\151\045" +
    "\157\052\165\044\170\053\172\050\173\047\001\002\000" +
    "\020\121\051\151\045\157\052\165\044\170\053\172\050" +
    "\173\047\001\002\000\004\102\u028c\001\002\000\022\053" +
    "\076\054\067\063\071\137\070\143\100\151\057\170\053" +
    "\173\047\001\uff71\000\004\145\u028e\001\002\000\004\102" +
    "\246\001\uff56\000\002\001\uffb1\000\002\001\uff55\000\004" +
    "\140\u0293\001\uffa7\000\002\001\uff9b\000\020\121\051\151" +
    "\045\157\052\165\044\170\053\172\050\173\047\001\002" +
    "\000\002\001\uff9a\000\002\001\uffa9\000\004\140\u0293\001" +
    "\uffa8\000\004\102\u0298\001\002\000\016\062\u025c\120\u029b" +
    "\151\057\170\053\173\047\174\u029a\001\002\000\014\151" +
    "\057\157\u02ba\163\u02bc\170\053\173\047\001\002\000\012" +
    "\052\u0261\053\uff61\056\u0263\145\uff61\001\uffcb\000\010\151" +
    "\057\170\053\173\047\001\002\000\010\061\u02a5\077\u02a4" +
    "\100\u02a6\001\002\000\002\001\uff62\000\006\053\u02a0\145" +
    "\u02a1\001\002\000\002\001\uff5a\000\016\062\u025c\120\u029b" +
    "\151\057\170\053\173\047\174\u029a\001\002\000\004\102" +
    "\246\001\uff56\000\002\001\uffb2\000\002\001\uff59\000\014" +
    "\107\u02ac\151\057\170\053\173\047\174\u02a7\001\002\000" +
    "\014\107\u02ac\151\057\170\053\173\047\174\u02a7\001\002" +
    "\000\014\107\u02ac\151\057\170\053\173\047\174\u02a7\001" +
    "\002\000\002\001\uff6c\000\002\001\uff6d\000\010\004\u02b0" +
    "\116\u02b5\140\u02af\001\uff5c\000\002\001\uff6a\000\002\001" +
    "\uff6b\000\014\107\u02ac\151\057\170\053\173\047\174\u02a7" +
    "\001\002\000\010\004\u02b0\140\u02af\147\u02ae\001\002\000" +
    "\002\001\uff65\000\012\151\057\170\053\173\047\174\u02a7" +
    "\001\002\000\012\151\057\170\053\173\047\174\u02a7\001" +
    "\002\000\002\001\uff67\000\002\001\uff66\000\002\001\uff69" +
    "\000\002\001\uff68\000\014\107\u02ac\151\057\170\053\173" +
    "\047\174\u02a7\001\002\000\006\004\u02b0\140\u02af\001\uff5b" +
    "\000\006\004\u02b0\140\u02af\001\uff5f\000\006\004\u02b0\140" +
    "\u02af\001\uff5d\000\002\001\uff5e\000\002\001\uff64\000\002" +
    "\001\uff60\000\004\157\u02bd\001\002\000\002\001\uff63\000" +
    "\002\001\uffaa\000\002\001\uffac\000\004\103\u02c1\001\uffff" +
    "\000\012\062\u02c3\151\057\170\053\173\047\001\002\000" +
    "\002\001\uff92\000\010\151\057\170\053\173\047\001\002" +
    "\000\006\053\u02c5\146\u02c6\001\002\000\012\062\u02c8\151" +
    "\057\170\053\173\047\001\002\000\002\001\ufffe\000\002" +
    "\001\uff90\000\010\151\057\170\053\173\047\001\002\000" +
    "\002\001\uff8f\000\002\001\uff91\000\004\102\246\001\002" +
    "\000\004\102\246\001\002\000\002\001\ufff7\000\002\001" +
    "\ufff5\000\002\001\ufff6\000\014\067\u02d4\102\246\151\057" +
    "\170\053\173\047\001\uffd9\000\004\067\u025b\001\uffd9\000" +
    "\004\064\u027d\001\uffde\000\002\001\uffe6\000\014\062\u025c" +
    "\151\057\170\053\173\047\174\u025f\001\002\000\004\067" +
    "\u025b\001\uffd9\000\004\067\u025b\001\uffd9\000\004\064\u027d" +
    "\001\uffde\000\002\001\uffe2\000\004\064\u027d\001\uffde\000" +
    "\002\001\uffe7\000\004\064\u027d\001\uffde\000\002\001\uffe3" +
    "\000\004\135\u02de\001\uffdf\000\010\151\057\170\053\173" +
    "\047\001\002\000\002\001\ufe85\000\004\102\246\001\002" +
    "\000\004\102\246\001\002\000\002\001\ufff4\000\002\001" +
    "\ufff2\000\002\001\ufff3\000\004\102\u02e6\001\002\000\006" +
    "\112\u02e9\113\u02e8\001\002\000\002\001\ufe89\000\116\031" +
    "\124\032\150\033\154\034\155\036\130\037\200\044\106" +
    "\050\214\054\227\073\224\074\122\101\171\102\131\104" +
    "\221\105\210\106\157\107\133\117\156\120\216\121\051" +
    "\122\140\132\117\133\160\151\204\152\203\157\052\161" +
    "\165\162\211\164\166\165\044\166\202\167\125\170\175" +
    "\171\141\172\050\173\047\174\153\175\143\001\002\000" +
    "\116\031\124\032\150\033\154\034\155\036\130\037\200" +
    "\044\106\050\214\054\227\073\224\074\122\101\171\102" +
    "\131\104\221\105\210\106\157\107\133\117\156\120\216" +
    "\121\051\122\140\132\117\133\160\151\204\152\203\157" +
    "\052\161\165\162\211\164\166\165\044\166\202\167\125" +
    "\170\175\171\141\172\050\173\047\174\153\175\143\001" +
    "\002\000\006\053\u02eb\145\u02ec\001\002\000\006\112\u02e9" +
    "\113\u02e8\001\002\000\002\001\ufe8a\000\002\001\ufe88\000" +
    "\002\001\ufe87\000\002\001\ufe86\000\002\001\000" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u02ee\000\006\106\003\107\004\001\001\000\002\001" +
    "\001\000\030\012\027\013\014\037\015\051\011\067\007" +
    "\076\020\100\022\101\024\123\034\124\031\133\026\001" +
    "\001\000\006\053\u02e4\054\045\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\031\u02e1\053\u02df\054\045\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\031\u02d0\053\u02cf\054\045\001\001\000\002\001" +
    "\001\000\010\031\u02cc\053\u02ca\054\045\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\053\u02bf\054\045\001" +
    "\001\000\006\100\022\101\u02bd\001\001\000\006\053\u0296" +
    "\054\045\001\001\000\010\053\072\054\045\055\u0286\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\053\u0250\054\045" +
    "\001\001\000\006\053\u023f\054\045\001\001\000\010\053" +
    "\u0229\054\045\102\u022a\001\001\000\006\053\u021d\054\045" +
    "\001\001\000\010\053\042\054\045\102\053\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\053\055\054\045\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\054\060\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\140\002\112\003" +
    "\111\004\171\005\110\006\136\007\135\010\146\011\145" +
    "\021\114\022\113\023\206\024\205\025\161\026\160\030" +
    "\u020c\031\214\040\107\041\106\042\212\043\211\044\222" +
    "\045\221\046\200\047\176\053\204\054\045\057\126\060" +
    "\125\061\117\062\115\063\151\064\150\065\122\066\120" +
    "\070\134\071\133\073\163\074\162\102\141\113\144\114" +
    "\143\115\175\116\173\117\217\120\216\121\167\122\166" +
    "\001\001\000\016\014\074\015\071\017\u0207\053\072\054" +
    "\045\055\073\001\001\000\016\014\074\015\071\017\076" +
    "\053\072\054\045\055\073\001\001\000\010\053\072\054" +
    "\045\055\u0202\001\001\000\010\053\072\054\045\055\u01fd" +
    "\001\001\000\010\053\072\054\045\055\u01f8\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\014\074\015\071\017\u01f1\053\072\054" +
    "\045\055\073\001\001\000\002\001\001\000\010\053\072" +
    "\054\045\055\101\001\001\000\010\053\072\054\045\055" +
    "\u01e8\001\001\000\002\001\001\000\006\053\u01e7\054\045" +
    "\001\001\000\140\002\112\003\111\004\171\005\110\006" +
    "\136\007\135\010\146\011\145\021\114\022\113\023\206" +
    "\024\205\025\161\026\160\030\u01e4\031\214\040\107\041" +
    "\106\042\212\043\211\044\222\045\221\046\200\047\176" +
    "\053\204\054\045\057\126\060\125\061\117\062\115\063" +
    "\151\064\150\065\122\066\120\070\134\071\133\073\163" +
    "\074\162\102\141\113\144\114\143\115\175\116\173\117" +
    "\217\120\216\121\167\122\166\001\001\000\140\002\112" +
    "\003\111\004\171\005\110\006\136\007\135\010\146\011" +
    "\145\021\114\022\113\023\206\024\205\025\161\026\160" +
    "\030\131\031\214\040\107\041\106\042\212\043\211\044" +
    "\222\045\221\046\200\047\176\053\204\054\045\057\126" +
    "\060\125\061\117\062\115\063\151\064\150\065\122\066" +
    "\120\070\134\071\133\073\163\074\162\102\141\113\144" +
    "\114\143\115\175\116\173\117\217\120\216\121\167\122" +
    "\166\001\001\000\006\053\u01e3\054\045\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\072\u01d6\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\014\074\015\u0110\016" +
    "\u01d3\053\072\054\045\055\073\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\062\004\171\005\u01d0\006\136\007\135" +
    "\021\114\022\113\023\206\024\205\031\214\046\200\047" +
    "\176\053\204\054\045\061\u01cf\062\323\065\122\066\120" +
    "\070\134\071\133\073\163\074\162\102\141\121\167\122" +
    "\166\001\001\000\002\001\001\000\002\001\001\000\074" +
    "\004\171\006\136\007\135\021\114\022\113\023\206\024" +
    "\205\031\214\046\200\047\176\053\204\054\045\061\117" +
    "\062\115\065\122\066\120\070\134\071\133\073\163\074" +
    "\162\102\141\113\u01ce\114\u01cd\115\175\116\173\117\217" +
    "\120\216\121\167\122\166\001\001\000\150\002\112\003" +
    "\111\004\171\005\110\006\136\007\135\010\146\011\145" +
    "\014\u01aa\020\u01a8\021\114\022\113\023\206\024\205\025" +
    "\161\026\160\030\252\031\214\033\253\040\107\041\106" +
    "\042\212\043\211\044\222\045\221\046\200\047\176\053" +
    "\u01ab\054\045\055\u01a7\057\126\060\125\061\117\062\115" +
    "\063\151\064\150\065\122\066\120\070\134\071\133\073" +
    "\163\074\162\102\141\113\144\114\143\115\175\116\173" +
    "\117\217\120\216\121\167\122\166\001\001\000\002\001" +
    "\001\000\140\002\112\003\111\004\171\005\110\006\136" +
    "\007\135\010\146\011\145\021\114\022\113\023\206\024" +
    "\205\025\161\026\160\030\u01a3\031\214\040\107\041\106" +
    "\042\212\043\211\044\222\045\221\046\200\047\176\053" +
    "\204\054\045\057\126\060\125\061\117\062\115\063\151" +
    "\064\150\065\122\066\120\070\134\071\133\073\163\074" +
    "\162\102\141\113\144\114\143\115\175\116\173\117\217" +
    "\120\216\121\167\122\166\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\106" +
    "\004\171\005\u019d\006\136\007\135\010\146\011\145\021" +
    "\114\022\113\023\206\024\205\031\214\046\200\047\176" +
    "\053\204\054\045\057\u019e\060\u0167\061\117\062\115\065" +
    "\122\066\120\070\134\071\133\073\163\074\162\102\141" +
    "\113\144\114\143\115\175\116\173\117\217\120\216\121" +
    "\167\122\166\001\001\000\022\004\171\005\u019b\031\214" +
    "\053\204\054\045\102\141\121\u019c\122\364\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\014\074\015" +
    "\u0110\016\u016e\053\072\054\045\055\073\001\001\000\074" +
    "\004\171\006\136\007\135\021\114\022\113\023\206\024" +
    "\205\031\214\046\200\047\176\053\204\054\045\061\117" +
    "\062\115\065\122\066\120\070\134\071\133\073\163\074" +
    "\162\102\141\113\u016d\114\u016c\115\175\116\173\117\217" +
    "\120\216\121\167\122\166\001\001\000\074\004\171\006" +
    "\136\007\135\021\114\022\113\023\206\024\205\031\214" +
    "\046\200\047\176\053\204\054\045\061\117\062\115\065" +
    "\122\066\120\070\134\071\133\073\163\074\162\102\141" +
    "\113\u016b\114\u016a\115\175\116\173\117\217\120\216\121" +
    "\167\122\166\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\014\074\015" +
    "\u0110\016\u012e\053\072\054\045\055\073\001\001\000\022" +
    "\004\171\005\u012c\031\214\053\204\054\045\102\141\121" +
    "\u012d\122\363\001\001\000\002\001\001\000\002\001\001" +
    "\000\062\004\171\005\u012b\006\136\007\135\021\114\022" +
    "\113\023\206\024\205\031\214\046\200\047\176\053\204" +
    "\054\045\061\u012a\062\365\065\122\066\120\070\134\071" +
    "\133\073\163\074\162\102\141\121\167\122\166\001\001" +
    "\000\002\001\001\000\140\002\112\003\111\004\171\005" +
    "\110\006\136\007\135\010\146\011\145\021\114\022\113" +
    "\023\206\024\205\025\161\026\160\030\u0129\031\214\040" +
    "\107\041\106\042\212\043\211\044\222\045\221\046\200" +
    "\047\176\053\204\054\045\057\126\060\125\061\117\062" +
    "\115\063\151\064\150\065\122\066\120\070\134\071\133" +
    "\073\163\074\162\102\141\113\144\114\143\115\175\116" +
    "\173\117\217\120\216\121\167\122\166\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\014\074\015\u0110\016\u011d\053\072\054\045" +
    "\055\073\001\001\000\002\001\001\000\016\014\074\015" +
    "\u0110\016\u011b\053\072\054\045\055\073\001\001\000\074" +
    "\004\171\006\136\007\135\021\114\022\113\023\206\024" +
    "\205\031\214\046\200\047\176\053\204\054\045\061\117" +
    "\062\115\065\122\066\120\070\134\071\133\073\163\074" +
    "\162\102\141\113\u011a\114\u0119\115\175\116\173\117\217" +
    "\120\216\121\167\122\166\001\001\000\074\004\171\006" +
    "\136\007\135\021\114\022\113\023\206\024\205\031\214" +
    "\046\200\047\176\053\204\054\045\061\117\062\115\065" +
    "\122\066\120\070\134\071\133\073\163\074\162\102\141" +
    "\113\u0117\114\u0116\115\175\116\173\117\217\120\216\121" +
    "\167\122\166\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\014\074\015\u0110\016\u0111\053" +
    "\072\054\045\055\073\001\001\000\074\004\171\006\136" +
    "\007\135\021\114\022\113\023\206\024\205\031\214\046" +
    "\200\047\176\053\204\054\045\061\117\062\115\065\122" +
    "\066\120\070\134\071\133\073\163\074\162\102\141\113" +
    "\u010f\114\u010e\115\175\116\173\117\217\120\216\121\167" +
    "\122\166\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\004\171\005\u010c\031\214\053\204\054\045\102\141" +
    "\121\u010d\122\332\001\001\000\002\001\001\000\074\004" +
    "\171\006\136\007\135\021\114\022\113\023\206\024\205" +
    "\031\214\046\200\047\176\053\204\054\045\061\117\062" +
    "\115\065\122\066\120\070\134\071\133\073\163\074\162" +
    "\102\141\113\375\114\374\115\175\116\173\117\217\120" +
    "\216\121\167\122\166\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\050\240\053\237\054\045\001\001\000" +
    "\002\001\001\000\002\001\001\000\062\004\171\005\227" +
    "\006\136\007\135\021\114\022\113\023\206\024\205\031" +
    "\214\046\200\047\176\053\204\054\045\061\225\062\224" +
    "\065\122\066\120\070\134\071\133\073\163\074\162\102" +
    "\141\121\167\122\166\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\144\002" +
    "\112\003\111\004\171\005\110\006\136\007\135\010\146" +
    "\011\145\021\114\022\113\023\206\024\205\025\161\026" +
    "\160\030\231\031\214\035\232\036\233\040\107\041\106" +
    "\042\212\043\211\044\222\045\221\046\200\047\176\053" +
    "\204\054\045\057\126\060\125\061\117\062\115\063\151" +
    "\064\150\065\122\066\120\070\134\071\133\073\163\074" +
    "\162\102\141\113\144\114\143\115\175\116\173\117\217" +
    "\120\216\121\167\122\166\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\140\002\112\003\111" +
    "\004\171\005\110\006\136\007\135\010\146\011\145\021" +
    "\114\022\113\023\206\024\205\025\161\026\160\030\235" +
    "\031\214\040\107\041\106\042\212\043\211\044\222\045" +
    "\221\046\200\047\176\053\204\054\045\057\126\060\125" +
    "\061\117\062\115\063\151\064\150\065\122\066\120\070" +
    "\134\071\133\073\163\074\162\102\141\113\144\114\143" +
    "\115\175\116\173\117\217\120\216\121\167\122\166\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\140\002\112\003\111\004\171\005" +
    "\110\006\136\007\135\010\146\011\145\021\114\022\113" +
    "\023\206\024\205\025\161\026\160\030\242\031\214\040" +
    "\107\041\106\042\212\043\211\044\222\045\221\046\200" +
    "\047\176\053\204\054\045\057\126\060\125\061\117\062" +
    "\115\063\151\064\150\065\122\066\120\070\134\071\133" +
    "\073\163\074\162\102\141\113\144\114\143\115\175\116" +
    "\173\117\217\120\216\121\167\122\166\001\001\000\006" +
    "\031\247\034\244\001\001\000\010\050\256\053\237\054" +
    "\045\001\001\000\002\001\001\000\142\002\112\003\111" +
    "\004\171\005\110\006\136\007\135\010\146\011\145\021" +
    "\114\022\113\023\206\024\205\025\161\026\160\030\252" +
    "\031\214\033\253\040\107\041\106\042\212\043\211\044" +
    "\222\045\221\046\200\047\176\053\204\054\045\057\126" +
    "\060\125\061\117\062\115\063\151\064\150\065\122\066" +
    "\120\070\134\071\133\073\163\074\162\102\141\113\144" +
    "\114\143\115\175\116\173\117\217\120\216\121\167\122" +
    "\166\001\001\000\140\002\112\003\111\004\171\005\110" +
    "\006\136\007\135\010\146\011\145\021\114\022\113\023" +
    "\206\024\205\025\161\026\160\030\250\031\214\040\107" +
    "\041\106\042\212\043\211\044\222\045\221\046\200\047" +
    "\176\053\204\054\045\057\126\060\125\061\117\062\115" +
    "\063\151\064\150\065\122\066\120\070\134\071\133\073" +
    "\163\074\162\102\141\113\144\114\143\115\175\116\173" +
    "\117\217\120\216\121\167\122\166\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\140\002\112\003\111\004\171\005\110\006\136\007" +
    "\135\010\146\011\145\021\114\022\113\023\206\024\205" +
    "\025\161\026\160\030\255\031\214\040\107\041\106\042" +
    "\212\043\211\044\222\045\221\046\200\047\176\053\204" +
    "\054\045\057\126\060\125\061\117\062\115\063\151\064" +
    "\150\065\122\066\120\070\134\071\133\073\163\074\162" +
    "\102\141\113\144\114\143\115\175\116\173\117\217\120" +
    "\216\121\167\122\166\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\042\004\171\005\373\007" +
    "\274\022\270\024\205\031\214\047\263\053\204\054\045" +
    "\062\115\066\271\071\276\074\162\102\141\116\372\122" +
    "\166\001\001\000\042\004\171\005\371\007\274\022\270" +
    "\024\205\031\214\047\263\053\204\054\045\062\115\066" +
    "\271\071\276\074\162\102\141\116\370\122\166\001\001" +
    "\000\042\004\171\005\367\007\274\022\270\024\205\031" +
    "\214\047\263\053\204\054\045\062\115\066\271\071\276" +
    "\074\162\102\141\116\366\122\166\001\001\000\042\004" +
    "\171\005\277\007\274\022\270\024\205\031\214\047\263" +
    "\053\204\054\045\062\115\066\271\071\276\074\162\102" +
    "\141\116\273\122\166\001\001\000\002\001\001\000\036" +
    "\004\171\007\274\022\270\024\205\031\214\047\263\053" +
    "\204\054\045\062\224\066\271\071\276\074\162\102\141" +
    "\122\166\001\001\000\036\004\171\007\274\022\270\024" +
    "\205\031\214\047\263\053\204\054\045\062\365\066\271" +
    "\071\276\074\162\102\141\122\166\001\001\000\016\004" +
    "\171\031\214\053\204\054\045\102\141\122\364\001\001" +
    "\000\016\004\171\031\214\053\204\054\045\102\141\122" +
    "\363\001\001\000\004\072\355\001\001\000\002\001\001" +
    "\000\016\004\171\031\214\053\204\054\045\102\141\122" +
    "\332\001\001\000\002\001\001\000\002\001\001\000\036" +
    "\004\171\007\274\022\270\024\205\031\214\047\263\053" +
    "\204\054\045\062\323\066\271\071\276\074\162\102\141" +
    "\122\166\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\004\171\007\303\024\205\031\214\053\204\054\045" +
    "\102\141\122\166\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\144\002\112\003\111\004\171" +
    "\005\110\006\136\007\135\010\146\011\145\021\114\022" +
    "\113\023\206\024\205\025\161\026\160\030\231\031\214" +
    "\035\313\036\233\040\107\041\106\042\212\043\211\044" +
    "\222\045\221\046\200\047\176\053\204\054\045\057\126" +
    "\060\125\061\117\062\115\063\151\064\150\065\122\066" +
    "\120\070\134\071\133\073\163\074\162\102\141\113\144" +
    "\114\143\115\175\116\173\117\217\120\216\121\167\122" +
    "\166\001\001\000\016\004\171\031\214\053\204\054\045" +
    "\102\141\122\312\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\144\002\112\003" +
    "\111\004\171\005\110\006\136\007\135\010\146\011\145" +
    "\021\114\022\113\023\206\024\205\025\161\026\160\030" +
    "\231\031\214\035\316\036\233\040\107\041\106\042\212" +
    "\043\211\044\222\045\221\046\200\047\176\053\204\054" +
    "\045\057\126\060\125\061\117\062\115\063\151\064\150" +
    "\065\122\066\120\070\134\071\133\073\163\074\162\102" +
    "\141\113\144\114\143\115\175\116\173\117\217\120\216" +
    "\121\167\122\166\001\001\000\002\001\001\000\002\001" +
    "\001\000\144\002\112\003\111\004\171\005\110\006\136" +
    "\007\135\010\146\011\145\021\114\022\113\023\206\024" +
    "\205\025\161\026\160\030\231\031\214\035\321\036\233" +
    "\040\107\041\106\042\212\043\211\044\222\045\221\046" +
    "\200\047\176\053\204\054\045\057\126\060\125\061\117" +
    "\062\115\063\151\064\150\065\122\066\120\070\134\071" +
    "\133\073\163\074\162\102\141\113\144\114\143\115\175" +
    "\116\173\117\217\120\216\121\167\122\166\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\036" +
    "\004\171\007\274\022\270\024\205\031\214\047\263\053" +
    "\204\054\045\062\331\066\271\071\276\074\162\102\141" +
    "\122\166\001\001\000\036\004\171\007\274\022\270\024" +
    "\205\031\214\047\263\053\204\054\045\062\330\066\271" +
    "\071\276\074\162\102\141\122\166\001\001\000\036\004" +
    "\171\007\274\022\270\024\205\031\214\047\263\053\204" +
    "\054\045\062\327\066\271\071\276\074\162\102\141\122" +
    "\166\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\004\171\007\274\022" +
    "\270\024\205\031\214\047\334\053\204\054\045\071\276" +
    "\074\162\102\141\122\166\001\001\000\002\001\001\000" +
    "\030\004\171\007\274\022\270\024\205\031\214\053\204" +
    "\054\045\071\276\074\336\102\141\122\166\001\001\000" +
    "\002\001\001\000\024\004\171\007\274\024\205\031\214" +
    "\053\204\054\045\071\362\102\141\122\166\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\004\171\007\274\022\270\024\205\031\214\053\204" +
    "\054\045\071\276\074\361\102\141\122\166\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\044" +
    "\004\171\005\u010b\007\274\022\270\024\205\031\214\047" +
    "\263\053\204\054\045\062\115\066\271\071\276\074\162" +
    "\102\141\116\u0101\120\u010a\122\166\001\001\000\044\004" +
    "\171\005\u0109\007\274\022\270\024\205\031\214\047\263" +
    "\053\204\054\045\062\115\066\271\071\276\074\162\102" +
    "\141\116\u0101\120\u0108\122\166\001\001\000\044\004\171" +
    "\005\u0103\007\274\022\270\024\205\031\214\047\263\053" +
    "\204\054\045\062\115\066\271\071\276\074\162\102\141" +
    "\116\u0101\120\u0102\122\166\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\040\004\171\007\274" +
    "\022\270\024\205\031\214\047\263\053\204\054\045\062" +
    "\115\066\271\071\276\074\162\102\141\116\372\122\166" +
    "\001\001\000\040\004\171\007\274\022\270\024\205\031" +
    "\214\047\263\053\204\054\045\062\115\066\271\071\276" +
    "\074\162\102\141\116\370\122\166\001\001\000\040\004" +
    "\171\007\274\022\270\024\205\031\214\047\263\053\204" +
    "\054\045\062\115\066\271\071\276\074\162\102\141\116" +
    "\366\122\166\001\001\000\040\004\171\007\274\022\270" +
    "\024\205\031\214\047\263\053\204\054\045\062\115\066" +
    "\271\071\276\074\162\102\141\116\273\122\166\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\031" +
    "\247\034\u0113\001\001\000\014\014\074\015\u0114\053\072" +
    "\054\045\055\073\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\054\060\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\031\247\034\u011c\001\001\000\002\001\001" +
    "\000\006\031\247\034\u011e\001\001\000\002\001\001\000" +
    "\032\004\171\005\u0120\007\274\022\270\024\205\031\214" +
    "\053\204\054\045\071\276\074\336\102\141\122\166\001" +
    "\001\000\002\001\001\000\004\054\u0122\001\001\000\002" +
    "\001\001\000\040\004\171\005\u0128\007\274\022\270\024" +
    "\205\031\214\047\263\053\204\054\045\062\331\066\271" +
    "\071\276\074\162\102\141\122\166\001\001\000\040\004" +
    "\171\005\u0127\007\274\022\270\024\205\031\214\047\263" +
    "\053\204\054\045\062\330\066\271\071\276\074\162\102" +
    "\141\122\166\001\001\000\040\004\171\005\u0126\007\274" +
    "\022\270\024\205\031\214\047\263\053\204\054\045\062" +
    "\327\066\271\071\276\074\162\102\141\122\166\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\031\247\034\u012f\001" +
    "\001\000\002\001\001\000\062\003\u0136\004\171\005\u013d" +
    "\007\274\011\u0135\022\270\024\205\031\214\041\u0137\043" +
    "\211\045\221\047\263\053\204\054\045\060\125\062\115" +
    "\066\271\071\276\074\162\102\141\114\u0134\116\u0101\120" +
    "\u0138\122\166\001\001\000\044\004\171\007\274\022\270" +
    "\024\205\031\214\047\263\053\204\054\045\062\115\066" +
    "\271\071\276\074\162\102\141\114\u0169\116\u0101\120\u0138" +
    "\122\166\001\001\000\044\004\171\007\274\022\270\024" +
    "\205\031\214\047\263\053\204\054\045\062\115\066\271" +
    "\071\276\074\162\102\141\114\u0168\116\u0101\120\u0138\122" +
    "\166\001\001\000\050\004\171\007\274\011\u0135\022\270" +
    "\024\205\031\214\047\263\053\204\054\045\060\u0167\062" +
    "\115\066\271\071\276\074\162\102\141\114\u0134\116\u0101" +
    "\120\u0138\122\166\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\044\004\171\007\274\022\270\024\205\031\214\047" +
    "\263\053\204\054\045\062\115\066\271\071\276\074\162" +
    "\102\141\114\u0146\116\u0101\120\u0138\122\166\001\001\000" +
    "\044\004\171\007\274\022\270\024\205\031\214\047\263" +
    "\053\204\054\045\062\115\066\271\071\276\074\162\102" +
    "\141\114\u0145\116\u0101\120\u0138\122\166\001\001\000\044" +
    "\004\171\007\274\022\270\024\205\031\214\047\263\053" +
    "\204\054\045\062\115\066\271\071\276\074\162\102\141" +
    "\114\u0144\116\u0101\120\u0138\122\166\001\001\000\044\004" +
    "\171\007\274\022\270\024\205\031\214\047\263\053\204" +
    "\054\045\062\115\066\271\071\276\074\162\102\141\114" +
    "\u0143\116\u0101\120\u0138\122\166\001\001\000\002\001\001" +
    "\000\044\004\171\007\274\022\270\024\205\031\214\047" +
    "\263\053\204\054\045\062\115\066\271\071\276\074\162" +
    "\102\141\114\u013f\116\u0101\120\u0138\122\166\001\001\000" +
    "\002\001\001\000\042\004\171\007\274\022\270\024\205" +
    "\031\214\047\263\053\204\054\045\062\115\066\271\071" +
    "\276\074\162\102\141\116\u0101\120\u010a\122\166\001\001" +
    "\000\042\004\171\007\274\022\270\024\205\031\214\047" +
    "\263\053\204\054\045\062\115\066\271\071\276\074\162" +
    "\102\141\116\u0101\120\u0108\122\166\001\001\000\042\004" +
    "\171\007\274\022\270\024\205\031\214\047\263\053\204" +
    "\054\045\062\115\066\271\071\276\074\162\102\141\116" +
    "\u0101\120\u0102\122\166\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\060\003" +
    "\u0136\004\171\007\274\011\u0135\022\270\024\205\031\214" +
    "\041\u014a\043\u014b\045\221\047\263\053\204\054\045\060" +
    "\125\062\115\066\271\071\276\074\162\102\141\114\u0134" +
    "\116\u0101\120\u0138\122\166\001\001\000\050\004\171\007" +
    "\274\011\u0135\022\270\024\205\031\214\047\263\053\204" +
    "\054\045\060\u0149\062\115\066\271\071\276\074\162\102" +
    "\141\114\u0134\116\u0101\120\u0138\122\166\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\056\003" +
    "\u0136\004\171\007\274\011\u0135\022\270\024\205\031\214" +
    "\043\u014e\045\u014d\047\263\053\204\054\045\060\125\062" +
    "\115\066\271\071\276\074\162\102\141\114\u0134\116\u0101" +
    "\120\u0138\122\166\001\001\000\002\001\001\000\002\001" +
    "\001\000\044\004\171\007\274\022\270\024\205\031\214" +
    "\047\263\053\204\054\045\062\115\066\271\071\276\074" +
    "\162\102\141\114\u0166\116\u0101\120\u0138\122\166\001\001" +
    "\000\044\004\171\007\274\022\270\024\205\031\214\047" +
    "\263\053\204\054\045\062\115\066\271\071\276\074\162" +
    "\102\141\114\u0165\116\u0101\120\u0138\122\166\001\001\000" +
    "\044\004\171\007\274\022\270\024\205\031\214\047\263" +
    "\053\204\054\045\062\115\066\271\071\276\074\162\102" +
    "\141\114\u0164\116\u0101\120\u0138\122\166\001\001\000\044" +
    "\004\171\007\274\022\270\024\205\031\214\047\263\053" +
    "\204\054\045\062\115\066\271\071\276\074\162\102\141" +
    "\114\u0163\116\u0101\120\u0138\122\166\001\001\000\044\004" +
    "\171\007\274\022\270\024\205\031\214\047\263\053\204" +
    "\054\045\062\115\066\271\071\276\074\162\102\141\114" +
    "\u0162\116\u0101\120\u0138\122\166\001\001\000\044\004\171" +
    "\007\274\022\270\024\205\031\214\047\263\053\204\054" +
    "\045\062\115\066\271\071\276\074\162\102\141\114\u0161" +
    "\116\u0101\120\u0138\122\166\001\001\000\044\004\171\007" +
    "\274\022\270\024\205\031\214\047\263\053\204\054\045" +
    "\062\115\066\271\071\276\074\162\102\141\114\u0160\116" +
    "\u0101\120\u0138\122\166\001\001\000\044\004\171\007\274" +
    "\022\270\024\205\031\214\047\263\053\204\054\045\062" +
    "\115\066\271\071\276\074\162\102\141\114\u015f\116\u0101" +
    "\120\u0138\122\166\001\001\000\044\004\171\007\274\022" +
    "\270\024\205\031\214\047\263\053\204\054\045\062\115" +
    "\066\271\071\276\074\162\102\141\114\u015e\116\u0101\120" +
    "\u0138\122\166\001\001\000\044\004\171\007\274\022\270" +
    "\024\205\031\214\047\263\053\204\054\045\062\115\066" +
    "\271\071\276\074\162\102\141\114\u015d\116\u0101\120\u0138" +
    "\122\166\001\001\000\044\004\171\007\274\022\270\024" +
    "\205\031\214\047\263\053\204\054\045\062\115\066\271" +
    "\071\276\074\162\102\141\114\u015c\116\u0101\120\u0138\122" +
    "\166\001\001\000\044\004\171\007\274\022\270\024\205" +
    "\031\214\047\263\053\204\054\045\062\115\066\271\071" +
    "\276\074\162\102\141\114\u015b\116\u0101\120\u0138\122\166" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\031\247\034\u016f\001\001\000\002\001\001\000" +
    "\144\002\112\003\111\004\171\005\110\006\136\007\135" +
    "\010\146\011\145\021\114\022\113\023\206\024\205\025" +
    "\161\026\160\030\231\031\214\035\u0171\036\233\040\107" +
    "\041\106\042\212\043\211\044\222\045\221\046\200\047" +
    "\176\053\204\054\045\057\126\060\125\061\117\062\115" +
    "\063\151\064\150\065\122\066\120\070\134\071\133\073" +
    "\163\074\162\102\141\113\144\114\143\115\175\116\173" +
    "\117\217\120\216\121\167\122\166\001\001\000\002\001" +
    "\001\000\002\001\001\000\064\003\u0136\004\171\005\u0175" +
    "\007\274\011\u0135\022\270\024\205\026\u0174\031\214\041" +
    "\106\043\211\045\221\047\263\053\204\054\045\060\125" +
    "\062\115\066\271\071\276\074\162\102\141\114\u0134\116" +
    "\u0101\120\u0138\122\166\001\001\000\002\001\001\000\002" +
    "\001\001\000\060\003\u0136\004\171\007\274\011\u0135\022" +
    "\270\024\205\031\214\041\u0137\043\211\045\221\047\263" +
    "\053\204\054\045\060\125\062\115\066\271\071\276\074" +
    "\162\102\141\114\u0134\116\u0101\120\u0138\122\166\001\001" +
    "\000\074\004\171\006\136\007\135\021\114\022\113\023" +
    "\206\024\205\031\214\046\200\047\176\053\204\054\045" +
    "\061\117\062\115\065\122\066\120\070\134\071\133\073" +
    "\163\074\162\102\141\113\u019a\114\u0199\115\175\116\173" +
    "\117\217\120\216\121\167\122\166\001\001\000\074\004" +
    "\171\006\136\007\135\021\114\022\113\023\206\024\205" +
    "\031\214\046\200\047\176\053\204\054\045\061\117\062" +
    "\115\065\122\066\120\070\134\071\133\073\163\074\162" +
    "\102\141\113\u0198\114\u0197\115\175\116\173\117\217\120" +
    "\216\121\167\122\166\001\001\000\074\004\171\006\136" +
    "\007\135\021\114\022\113\023\206\024\205\031\214\046" +
    "\200\047\176\053\204\054\045\061\117\062\115\065\122" +
    "\066\120\070\134\071\133\073\163\074\162\102\141\113" +
    "\u0196\114\u0195\115\175\116\173\117\217\120\216\121\167" +
    "\122\166\001\001\000\074\004\171\006\136\007\135\021" +
    "\114\022\113\023\206\024\205\031\214\046\200\047\176" +
    "\053\204\054\045\061\117\062\115\065\122\066\120\070" +
    "\134\071\133\073\163\074\162\102\141\113\u0194\114\u0193" +
    "\115\175\116\173\117\217\120\216\121\167\122\166\001" +
    "\001\000\074\004\171\006\136\007\135\021\114\022\113" +
    "\023\206\024\205\031\214\046\200\047\176\053\204\054" +
    "\045\061\117\062\115\065\122\066\120\070\134\071\133" +
    "\073\163\074\162\102\141\113\u0192\114\u0191\115\175\116" +
    "\173\117\217\120\216\121\167\122\166\001\001\000\074" +
    "\004\171\006\136\007\135\021\114\022\113\023\206\024" +
    "\205\031\214\046\200\047\176\053\204\054\045\061\117" +
    "\062\115\065\122\066\120\070\134\071\133\073\163\074" +
    "\162\102\141\113\u0190\114\u018f\115\175\116\173\117\217" +
    "\120\216\121\167\122\166\001\001\000\074\004\171\006" +
    "\136\007\135\021\114\022\113\023\206\024\205\031\214" +
    "\046\200\047\176\053\204\054\045\061\117\062\115\065" +
    "\122\066\120\070\134\071\133\073\163\074\162\102\141" +
    "\113\u018e\114\u018d\115\175\116\173\117\217\120\216\121" +
    "\167\122\166\001\001\000\074\004\171\006\136\007\135" +
    "\021\114\022\113\023\206\024\205\031\214\046\200\047" +
    "\176\053\204\054\045\061\117\062\115\065\122\066\120" +
    "\070\134\071\133\073\163\074\162\102\141\113\u018c\114" +
    "\u018b\115\175\116\173\117\217\120\216\121\167\122\166" +
    "\001\001\000\074\004\171\006\136\007\135\021\114\022" +
    "\113\023\206\024\205\031\214\046\200\047\176\053\204" +
    "\054\045\061\117\062\115\065\122\066\120\070\134\071" +
    "\133\073\163\074\162\102\141\113\u018a\114\u0189\115\175" +
    "\116\173\117\217\120\216\121\167\122\166\001\001\000" +
    "\074\004\171\006\136\007\135\021\114\022\113\023\206" +
    "\024\205\031\214\046\200\047\176\053\204\054\045\061" +
    "\117\062\115\065\122\066\120\070\134\071\133\073\163" +
    "\074\162\102\141\113\u0188\114\u0187\115\175\116\173\117" +
    "\217\120\216\121\167\122\166\001\001\000\074\004\171" +
    "\006\136\007\135\021\114\022\113\023\206\024\205\031" +
    "\214\046\200\047\176\053\204\054\045\061\117\062\115" +
    "\065\122\066\120\070\134\071\133\073\163\074\162\102" +
    "\141\113\u0186\114\u0185\115\175\116\173\117\217\120\216" +
    "\121\167\122\166\001\001\000\074\004\171\006\136\007" +
    "\135\021\114\022\113\023\206\024\205\031\214\046\200" +
    "\047\176\053\204\054\045\061\117\062\115\065\122\066" +
    "\120\070\134\071\133\073\163\074\162\102\141\113\u0184" +
    "\114\u0183\115\175\116\173\117\217\120\216\121\167\122" +
    "\166\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\004\171\005\u01a0\031\214\053\204\054\045\102\141\122" +
    "\312\001\001\000\002\001\001\000\024\004\171\005\u01a2" +
    "\007\303\024\205\031\214\053\204\054\045\102\141\122" +
    "\166\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\053\072\054\045\055\u01c8\001\001\000" +
    "\010\053\072\054\045\055\u01c3\001\001\000\002\001\001" +
    "\000\006\031\247\034\u01ba\001\001\000\010\053\072\054" +
    "\045\055\u01b4\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\053\072\054\045\055\u01ae\001\001\000\010\053" +
    "\072\054\045\055\u01af\001\001\000\002\001\001\000\002" +
    "\001\001\000\140\002\112\003\111\004\171\005\110\006" +
    "\136\007\135\010\146\011\145\021\114\022\113\023\206" +
    "\024\205\025\161\026\160\030\u01b1\031\214\040\107\041" +
    "\106\042\212\043\211\044\222\045\221\046\200\047\176" +
    "\053\204\054\045\057\126\060\125\061\117\062\115\063" +
    "\151\064\150\065\122\066\120\070\134\071\133\073\163" +
    "\074\162\102\141\113\144\114\143\115\175\116\173\117" +
    "\217\120\216\121\167\122\166\001\001\000\002\001\001" +
    "\000\140\002\112\003\111\004\171\005\110\006\136\007" +
    "\135\010\146\011\145\021\114\022\113\023\206\024\205" +
    "\025\161\026\160\030\u01b3\031\214\040\107\041\106\042" +
    "\212\043\211\044\222\045\221\046\200\047\176\053\204" +
    "\054\045\057\126\060\125\061\117\062\115\063\151\064" +
    "\150\065\122\066\120\070\134\071\133\073\163\074\162" +
    "\102\141\113\144\114\143\115\175\116\173\117\217\120" +
    "\216\121\167\122\166\001\001\000\002\001\001\000\002" +
    "\001\001\000\140\002\112\003\111\004\171\005\110\006" +
    "\136\007\135\010\146\011\145\021\114\022\113\023\206" +
    "\024\205\025\161\026\160\030\u01b6\031\214\040\107\041" +
    "\106\042\212\043\211\044\222\045\221\046\200\047\176" +
    "\053\204\054\045\057\126\060\125\061\117\062\115\063" +
    "\151\064\150\065\122\066\120\070\134\071\133\073\163" +
    "\074\162\102\141\113\144\114\143\115\175\116\173\117" +
    "\217\120\216\121\167\122\166\001\001\000\002\001\001" +
    "\000\140\002\112\003\111\004\171\005\110\006\136\007" +
    "\135\010\146\011\145\021\114\022\113\023\206\024\205" +
    "\025\161\026\160\030\u01b8\031\214\040\107\041\106\042" +
    "\212\043\211\044\222\045\221\046\200\047\176\053\204" +
    "\054\045\057\126\060\125\061\117\062\115\063\151\064" +
    "\150\065\122\066\120\070\134\071\133\073\163\074\162" +
    "\102\141\113\144\114\143\115\175\116\173\117\217\120" +
    "\216\121\167\122\166\001\001\000\002\001\001\000\012" +
    "\014\u01be\053\072\054\045\055\u01a7\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\053\072" +
    "\054\045\055\u01b4\001\001\000\002\001\001\000\140\002" +
    "\112\003\111\004\171\005\110\006\136\007\135\010\146" +
    "\011\145\021\114\022\113\023\206\024\205\025\161\026" +
    "\160\030\u01c0\031\214\040\107\041\106\042\212\043\211" +
    "\044\222\045\221\046\200\047\176\053\204\054\045\057" +
    "\126\060\125\061\117\062\115\063\151\064\150\065\122" +
    "\066\120\070\134\071\133\073\163\074\162\102\141\113" +
    "\144\114\143\115\175\116\173\117\217\120\216\121\167" +
    "\122\166\001\001\000\002\001\001\000\140\002\112\003" +
    "\111\004\171\005\110\006\136\007\135\010\146\011\145" +
    "\021\114\022\113\023\206\024\205\025\161\026\160\030" +
    "\u01c2\031\214\040\107\041\106\042\212\043\211\044\222" +
    "\045\221\046\200\047\176\053\204\054\045\057\126\060" +
    "\125\061\117\062\115\063\151\064\150\065\122\066\120" +
    "\070\134\071\133\073\163\074\162\102\141\113\144\114" +
    "\143\115\175\116\173\117\217\120\216\121\167\122\166" +
    "\001\001\000\002\001\001\000\002\001\001\000\140\002" +
    "\112\003\111\004\171\005\110\006\136\007\135\010\146" +
    "\011\145\021\114\022\113\023\206\024\205\025\161\026" +
    "\160\030\u01c5\031\214\040\107\041\106\042\212\043\211" +
    "\044\222\045\221\046\200\047\176\053\204\054\045\057" +
    "\126\060\125\061\117\062\115\063\151\064\150\065\122" +
    "\066\120\070\134\071\133\073\163\074\162\102\141\113" +
    "\144\114\143\115\175\116\173\117\217\120\216\121\167" +
    "\122\166\001\001\000\002\001\001\000\140\002\112\003" +
    "\111\004\171\005\110\006\136\007\135\010\146\011\145" +
    "\021\114\022\113\023\206\024\205\025\161\026\160\030" +
    "\u01c7\031\214\040\107\041\106\042\212\043\211\044\222" +
    "\045\221\046\200\047\176\053\204\054\045\057\126\060" +
    "\125\061\117\062\115\063\151\064\150\065\122\066\120" +
    "\070\134\071\133\073\163\074\162\102\141\113\144\114" +
    "\143\115\175\116\173\117\217\120\216\121\167\122\166" +
    "\001\001\000\002\001\001\000\002\001\001\000\140\002" +
    "\112\003\111\004\171\005\110\006\136\007\135\010\146" +
    "\011\145\021\114\022\113\023\206\024\205\025\161\026" +
    "\160\030\u01ca\031\214\040\107\041\106\042\212\043\211" +
    "\044\222\045\221\046\200\047\176\053\204\054\045\057" +
    "\126\060\125\061\117\062\115\063\151\064\150\065\122" +
    "\066\120\070\134\071\133\073\163\074\162\102\141\113" +
    "\144\114\143\115\175\116\173\117\217\120\216\121\167" +
    "\122\166\001\001\000\002\001\001\000\140\002\112\003" +
    "\111\004\171\005\110\006\136\007\135\010\146\011\145" +
    "\021\114\022\113\023\206\024\205\025\161\026\160\030" +
    "\u01cc\031\214\040\107\041\106\042\212\043\211\044\222" +
    "\045\221\046\200\047\176\053\204\054\045\057\126\060" +
    "\125\061\117\062\115\063\151\064\150\065\122\066\120" +
    "\070\134\071\133\073\163\074\162\102\141\113\144\114" +
    "\143\115\175\116\173\117\217\120\216\121\167\122\166" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\004\171" +
    "\005\u01d2\007\274\022\270\024\205\031\214\047\334\053" +
    "\204\054\045\071\276\074\162\102\141\122\166\001\001" +
    "\000\002\001\001\000\006\031\247\034\u01d4\001\001\000" +
    "\002\001\001\000\026\004\171\005\u01d8\007\274\024\205" +
    "\031\214\053\204\054\045\071\362\102\141\122\166\001" +
    "\001\000\032\004\171\005\u01d7\007\274\022\270\024\205" +
    "\031\214\053\204\054\045\071\276\074\361\102\141\122" +
    "\166\001\001\000\002\001\001\000\002\001\001\000\126" +
    "\002\112\003\111\004\171\005\u01dd\006\136\007\135\010" +
    "\146\011\145\021\114\022\113\023\206\024\205\031\214" +
    "\040\u01dc\041\u014a\042\212\043\u01de\044\222\045\221\046" +
    "\200\047\176\053\204\054\045\057\126\060\125\061\117" +
    "\062\115\065\122\066\120\070\134\071\133\073\163\074" +
    "\162\102\141\113\144\114\143\115\175\116\173\117\217" +
    "\120\216\121\167\122\166\001\001\000\052\004\171\005" +
    "\u01db\007\274\011\u0135\022\270\024\205\031\214\047\263" +
    "\053\204\054\045\060\u0149\062\115\066\271\071\276\074" +
    "\162\102\141\114\u0134\116\u0101\120\u0138\122\166\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\122\002\112\003\111\004\171\005\u01e0" +
    "\006\136\007\135\010\146\011\145\021\114\022\113\023" +
    "\206\024\205\031\214\042\u01e1\043\u014e\044\u01e2\045\u014d" +
    "\046\200\047\176\053\204\054\045\057\126\060\125\061" +
    "\117\062\115\065\122\066\120\070\134\071\133\073\163" +
    "\074\162\102\141\113\144\114\143\115\175\116\173\117" +
    "\217\120\216\121\167\122\166\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\140\002\112\003\111\004\171\005\110" +
    "\006\136\007\135\010\146\011\145\021\114\022\113\023" +
    "\206\024\205\025\161\026\160\030\u01e6\031\214\040\107" +
    "\041\106\042\212\043\211\044\222\045\221\046\200\047" +
    "\176\053\204\054\045\057\126\060\125\061\117\062\115" +
    "\063\151\064\150\065\122\066\120\070\134\071\133\073" +
    "\163\074\162\102\141\113\144\114\143\115\175\116\173" +
    "\117\217\120\216\121\167\122\166\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\140\002\112" +
    "\003\111\004\171\005\110\006\136\007\135\010\146\011" +
    "\145\021\114\022\113\023\206\024\205\025\161\026\160" +
    "\030\u01ea\031\214\040\107\041\106\042\212\043\211\044" +
    "\222\045\221\046\200\047\176\053\204\054\045\057\126" +
    "\060\125\061\117\062\115\063\151\064\150\065\122\066" +
    "\120\070\134\071\133\073\163\074\162\102\141\113\144" +
    "\114\143\115\175\116\173\117\217\120\216\121\167\122" +
    "\166\001\001\000\002\001\001\000\140\002\112\003\111" +
    "\004\171\005\110\006\136\007\135\010\146\011\145\021" +
    "\114\022\113\023\206\024\205\025\161\026\160\030\u01ec" +
    "\031\214\040\107\041\106\042\212\043\211\044\222\045" +
    "\221\046\200\047\176\053\204\054\045\057\126\060\125" +
    "\061\117\062\115\063\151\064\150\065\122\066\120\070" +
    "\134\071\133\073\163\074\162\102\141\113\144\114\143" +
    "\115\175\116\173\117\217\120\216\121\167\122\166\001" +
    "\001\000\002\001\001\000\002\001\001\000\140\002\112" +
    "\003\111\004\171\005\110\006\136\007\135\010\146\011" +
    "\145\021\114\022\113\023\206\024\205\025\161\026\160" +
    "\030\u01ef\031\214\040\107\041\106\042\212\043\211\044" +
    "\222\045\221\046\200\047\176\053\204\054\045\057\126" +
    "\060\125\061\117\062\115\063\151\064\150\065\122\066" +
    "\120\070\134\071\133\073\163\074\162\102\141\113\144" +
    "\114\143\115\175\116\173\117\217\120\216\121\167\122" +
    "\166\001\001\000\004\031\u01f0\001\001\000\002\001\001" +
    "\000\002\001\001\000\140\002\112\003\111\004\171\005" +
    "\110\006\136\007\135\010\146\011\145\021\114\022\113" +
    "\023\206\024\205\025\161\026\160\030\u01f3\031\214\040" +
    "\107\041\106\042\212\043\211\044\222\045\221\046\200" +
    "\047\176\053\204\054\045\057\126\060\125\061\117\062" +
    "\115\063\151\064\150\065\122\066\120\070\134\071\133" +
    "\073\163\074\162\102\141\113\144\114\143\115\175\116" +
    "\173\117\217\120\216\121\167\122\166\001\001\000\002" +
    "\001\001\000\140\002\112\003\111\004\171\005\110\006" +
    "\136\007\135\010\146\011\145\021\114\022\113\023\206" +
    "\024\205\025\161\026\160\030\u01f5\031\214\040\107\041" +
    "\106\042\212\043\211\044\222\045\221\046\200\047\176" +
    "\053\204\054\045\057\126\060\125\061\117\062\115\063" +
    "\151\064\150\065\122\066\120\070\134\071\133\073\163" +
    "\074\162\102\141\113\144\114\143\115\175\116\173\117" +
    "\217\120\216\121\167\122\166\001\001\000\002\001\001" +
    "\000\016\014\074\015\071\017\u01f7\053\072\054\045\055" +
    "\073\001\001\000\002\001\001\000\002\001\001\000\140" +
    "\002\112\003\111\004\171\005\110\006\136\007\135\010" +
    "\146\011\145\021\114\022\113\023\206\024\205\025\161" +
    "\026\160\030\u01fa\031\214\040\107\041\106\042\212\043" +
    "\211\044\222\045\221\046\200\047\176\053\204\054\045" +
    "\057\126\060\125\061\117\062\115\063\151\064\150\065" +
    "\122\066\120\070\134\071\133\073\163\074\162\102\141" +
    "\113\144\114\143\115\175\116\173\117\217\120\216\121" +
    "\167\122\166\001\001\000\002\001\001\000\140\002\112" +
    "\003\111\004\171\005\110\006\136\007\135\010\146\011" +
    "\145\021\114\022\113\023\206\024\205\025\161\026\160" +
    "\030\u01fc\031\214\040\107\041\106\042\212\043\211\044" +
    "\222\045\221\046\200\047\176\053\204\054\045\057\126" +
    "\060\125\061\117\062\115\063\151\064\150\065\122\066" +
    "\120\070\134\071\133\073\163\074\162\102\141\113\144" +
    "\114\143\115\175\116\173\117\217\120\216\121\167\122" +
    "\166\001\001\000\002\001\001\000\002\001\001\000\140" +
    "\002\112\003\111\004\171\005\110\006\136\007\135\010" +
    "\146\011\145\021\114\022\113\023\206\024\205\025\161" +
    "\026\160\030\u01ff\031\214\040\107\041\106\042\212\043" +
    "\211\044\222\045\221\046\200\047\176\053\204\054\045" +
    "\057\126\060\125\061\117\062\115\063\151\064\150\065" +
    "\122\066\120\070\134\071\133\073\163\074\162\102\141" +
    "\113\144\114\143\115\175\116\173\117\217\120\216\121" +
    "\167\122\166\001\001\000\002\001\001\000\140\002\112" +
    "\003\111\004\171\005\110\006\136\007\135\010\146\011" +
    "\145\021\114\022\113\023\206\024\205\025\161\026\160" +
    "\030\u0201\031\214\040\107\041\106\042\212\043\211\044" +
    "\222\045\221\046\200\047\176\053\204\054\045\057\126" +
    "\060\125\061\117\062\115\063\151\064\150\065\122\066" +
    "\120\070\134\071\133\073\163\074\162\102\141\113\144" +
    "\114\143\115\175\116\173\117\217\120\216\121\167\122" +
    "\166\001\001\000\002\001\001\000\002\001\001\000\140" +
    "\002\112\003\111\004\171\005\110\006\136\007\135\010" +
    "\146\011\145\021\114\022\113\023\206\024\205\025\161" +
    "\026\160\030\u0204\031\214\040\107\041\106\042\212\043" +
    "\211\044\222\045\221\046\200\047\176\053\204\054\045" +
    "\057\126\060\125\061\117\062\115\063\151\064\150\065" +
    "\122\066\120\070\134\071\133\073\163\074\162\102\141" +
    "\113\144\114\143\115\175\116\173\117\217\120\216\121" +
    "\167\122\166\001\001\000\002\001\001\000\140\002\112" +
    "\003\111\004\171\005\110\006\136\007\135\010\146\011" +
    "\145\021\114\022\113\023\206\024\205\025\161\026\160" +
    "\030\u0206\031\214\040\107\041\106\042\212\043\211\044" +
    "\222\045\221\046\200\047\176\053\204\054\045\057\126" +
    "\060\125\061\117\062\115\063\151\064\150\065\122\066" +
    "\120\070\134\071\133\073\163\074\162\102\141\113\144" +
    "\114\143\115\175\116\173\117\217\120\216\121\167\122" +
    "\166\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\140\002\112\003\111\004\171\005\110\006" +
    "\136\007\135\010\146\011\145\021\114\022\113\023\206" +
    "\024\205\025\161\026\160\030\u020a\031\214\040\107\041" +
    "\106\042\212\043\211\044\222\045\221\046\200\047\176" +
    "\053\204\054\045\057\126\060\125\061\117\062\115\063" +
    "\151\064\150\065\122\066\120\070\134\071\133\073\163" +
    "\074\162\102\141\113\144\114\143\115\175\116\173\117" +
    "\217\120\216\121\167\122\166\001\001\000\004\031\u020b" +
    "\001\001\000\002\001\001\000\004\031\u020d\001\001\000" +
    "\002\001\001\000\140\002\112\003\111\004\171\005\110" +
    "\006\136\007\135\010\146\011\145\021\114\022\113\023" +
    "\206\024\205\025\161\026\160\030\u021b\031\214\040\107" +
    "\041\106\042\212\043\211\044\222\045\221\046\200\047" +
    "\176\053\204\054\045\057\126\060\125\061\117\062\115" +
    "\063\151\064\150\065\122\066\120\070\134\071\133\073" +
    "\163\074\162\102\141\113\144\114\143\115\175\116\173" +
    "\117\217\120\216\121\167\122\166\001\001\000\016\014" +
    "\074\015\071\017\u0216\053\072\054\045\055\073\001\001" +
    "\000\016\014\074\015\071\017\u0211\053\072\054\045\055" +
    "\073\001\001\000\002\001\001\000\002\001\001\000\140" +
    "\002\112\003\111\004\171\005\110\006\136\007\135\010" +
    "\146\011\145\021\114\022\113\023\206\024\205\025\161" +
    "\026\160\030\u0214\031\214\040\107\041\106\042\212\043" +
    "\211\044\222\045\221\046\200\047\176\053\204\054\045" +
    "\057\126\060\125\061\117\062\115\063\151\064\150\065" +
    "\122\066\120\070\134\071\133\073\163\074\162\102\141" +
    "\113\144\114\143\115\175\116\173\117\217\120\216\121" +
    "\167\122\166\001\001\000\004\031\u0215\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\140\002" +
    "\112\003\111\004\171\005\110\006\136\007\135\010\146" +
    "\011\145\021\114\022\113\023\206\024\205\025\161\026" +
    "\160\030\u0219\031\214\040\107\041\106\042\212\043\211" +
    "\044\222\045\221\046\200\047\176\053\204\054\045\057" +
    "\126\060\125\061\117\062\115\063\151\064\150\065\122" +
    "\066\120\070\134\071\133\073\163\074\162\102\141\113" +
    "\144\114\143\115\175\116\173\117\217\120\216\121\167" +
    "\122\166\001\001\000\004\031\u021a\001\001\000\002\001" +
    "\001\000\004\031\u021c\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\053\u0228\054\045\001\001\000\014\053" +
    "\204\054\045\102\u0222\103\u0221\104\u0220\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\053" +
    "\204\054\045\102\u0224\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\053\u0227\054\045\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\031\u0236\001\001\000\002" +
    "\001\001\000\006\053\u022c\054\045\001\001\000\004\031" +
    "\u022d\001\001\000\002\001\001\000\016\014\074\015\071" +
    "\017\u0233\053\072\054\045\055\073\001\001\000\016\014" +
    "\074\015\071\017\u0230\053\072\054\045\055\073\001\001" +
    "\000\002\001\001\000\004\031\u0232\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\031\u0235\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\014\074\015\071\017" +
    "\u023c\053\072\054\045\055\073\001\001\000\016\014\074" +
    "\015\071\017\u0239\053\072\054\045\055\073\001\001\000" +
    "\002\001\001\000\004\031\u023b\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\031\u023e\001\001\000\002\001" +
    "\001\000\006\031\u0242\052\u0241\001\001\000\140\002\112" +
    "\003\111\004\171\005\110\006\136\007\135\010\146\011" +
    "\145\021\114\022\113\023\206\024\205\025\161\026\160" +
    "\030\u024f\031\214\040\107\041\106\042\212\043\211\044" +
    "\222\045\221\046\200\047\176\053\204\054\045\057\126" +
    "\060\125\061\117\062\115\063\151\064\150\065\122\066" +
    "\120\070\134\071\133\073\163\074\162\102\141\113\144" +
    "\114\143\115\175\116\173\117\217\120\216\121\167\122" +
    "\166\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\053\072\054\045\055\u024b\001\001\000\010\053\072\054" +
    "\045\055\u0245\001\001\000\002\001\001\000\006\031\u0242" +
    "\052\u0247\001\001\000\002\001\001\000\006\031\u0242\052" +
    "\u0249\001\001\000\002\001\001\000\006\031\u0242\052\u024e" +
    "\001\001\000\002\001\001\000\006\031\u0242\052\u024d\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\053\072\054\045\055\u0252\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\u0256\001\001\000\010\031\u0258\053\u0257\054" +
    "\045\001\001\000\012\031\u027f\053\u027e\054\045\075\u0280" +
    "\001\001\000\004\075\u0259\001\001\000\004\027\u027b\001" +
    "\001\000\010\110\u025c\111\u025f\112\u025d\001\001\000\002" +
    "\001\001\000\006\053\u026d\054\045\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\110\u025c\111\u025f\112\u0267\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\110\u025c\111\u026a\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\075\u0284" +
    "\001\001\000\004\075\u0282\001\001\000\004\027\u0281\001" +
    "\001\000\002\001\001\000\004\027\u0283\001\001\000\002" +
    "\001\001\000\004\027\u0285\001\001\000\002\001\001\000" +
    "\004\077\u028a\001\001\000\012\053\204\054\045\102\u0291" +
    "\105\u0295\001\001\000\010\053\204\054\045\102\u0294\001" +
    "\001\000\012\053\204\054\045\102\u0291\105\u0290\001\001" +
    "\000\002\001\001\000\016\014\074\015\071\017\u028c\053" +
    "\072\054\045\055\073\001\001\000\002\001\001\000\006" +
    "\031\u028f\032\u028e\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\053\204" +
    "\054\045\102\u0293\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\053\u029b" +
    "\054\045\110\u0298\130\u029e\131\u029c\132\u029d\001\001\000" +
    "\006\053\u02ba\054\045\001\001\000\002\001\001\000\006" +
    "\053\u02b8\054\045\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\053\u029b" +
    "\054\045\110\u0298\130\u02a2\131\u029c\001\001\000\006\031" +
    "\u028f\032\u02a1\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\053\u02a7\054\045\125\u02aa\126\u02a9\127\u02b7\001" +
    "\001\000\014\053\u02a7\054\045\125\u02aa\126\u02a9\127\u02b6" +
    "\001\001\000\014\053\u02a7\054\045\125\u02aa\126\u02a9\127" +
    "\u02a8\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\053" +
    "\u02a7\054\045\125\u02aa\126\u02a9\127\u02ac\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\053\u02a7\054\045\125" +
    "\u02b2\126\u02b3\001\001\000\012\053\u02a7\054\045\125\u02b0" +
    "\126\u02b1\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\053\u02a7\054\045" +
    "\125\u02aa\126\u02a9\127\u02b5\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\053\u02c1\054\045\056\u02c3\001\001\000\002\001" +
    "\001\000\006\053\u02c9\054\045\001\001\000\002\001\001" +
    "\000\006\053\u02c6\054\045\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\053\u02c8\054\045\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\031\u02ce\001\001\000" +
    "\004\031\u02cd\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\031\u02d5\053\u02d4\054\045\075" +
    "\u02d6\001\001\000\004\075\u02d1\001\001\000\004\027\u02d2" +
    "\001\001\000\002\001\001\000\014\053\u02dc\054\045\110" +
    "\u025c\111\u025f\112\u025d\001\001\000\004\075\u02da\001\001" +
    "\000\004\075\u02d8\001\001\000\004\027\u02d7\001\001\000" +
    "\002\001\001\000\004\027\u02d9\001\001\000\002\001\001" +
    "\000\004\027\u02db\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\053\u02de\054\045\001\001\000\002\001\001" +
    "\000\004\031\u02e3\001\001\000\004\031\u02e2\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\134\u02e9\135\u02e6\001\001\000\002\001" +
    "\001\000\140\002\112\003\111\004\171\005\110\006\136" +
    "\007\135\010\146\011\145\021\114\022\113\023\206\024" +
    "\205\025\161\026\160\030\u02ee\031\214\040\107\041\106" +
    "\042\212\043\211\044\222\045\221\046\200\047\176\053" +
    "\204\054\045\057\126\060\125\061\117\062\115\063\151" +
    "\064\150\065\122\066\120\070\134\071\133\073\163\074" +
    "\162\102\141\113\144\114\143\115\175\116\173\117\217" +
    "\120\216\121\167\122\166\001\001\000\140\002\112\003" +
    "\111\004\171\005\110\006\136\007\135\010\146\011\145" +
    "\021\114\022\113\023\206\024\205\025\161\026\160\030" +
    "\u02ed\031\214\040\107\041\106\042\212\043\211\044\222" +
    "\045\221\046\200\047\176\053\204\054\045\057\126\060" +
    "\125\061\117\062\115\063\151\064\150\065\122\066\120" +
    "\070\134\071\133\073\163\074\162\102\141\113\144\114" +
    "\143\115\175\116\173\117\217\120\216\121\167\122\166" +
    "\001\001\000\002\001\001\000\004\135\u02ec\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$CompParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$CompParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$CompParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




  public CompModule alloymodule=null;

  @Override public Symbol parse() throws java.lang.Exception {
     int act; // current action code
     Symbol lhs_sym = null; // the Symbol/stack element returned by a reduce
     short handle_size, lhs_sym_num; // information about production being reduced with
     boolean logging = "yes".equals(System.getProperty("debug"));
     production_tab = production_table();
     action_tab     = action_table();
     reduce_tab     = reduce_table();
     init_actions();
     user_init();
     // start
     cur_token = scan();
     stack.removeAllElements();
     stack.push(getSymbolFactory().startSymbol("START", 0, start_state()));
     tos = 0;
     for (_done_parsing = false; !_done_parsing; ) {
        act = get_action(((Symbol)stack.peek()).parse_state, cur_token.sym);
        if (act > 0) { // "shift"; thus, we shift to the encoded state by pushing it on the stack
           if (logging) System.out.println("shift " + cur_token.sym);
           cur_token.parse_state = act-1;
           stack.push(cur_token);
           tos++;
           cur_token = scan();
        } else if (act<0) { // "reduce"
           if (logging) System.out.println("reduce " + ((-act)-1));
           lhs_sym = do_action((-act)-1, this, stack, tos);
           lhs_sym_num = production_tab[(-act)-1][0];
           handle_size = production_tab[(-act)-1][1];
           for (int i = 0; i < handle_size; i++)  {  stack.pop(); tos--; }
           act = get_reduce(((Symbol)stack.peek()).parse_state, lhs_sym_num);
           lhs_sym.parse_state = act;
           stack.push(lhs_sym);
           tos++;
        } else { // "error"
           if (logging) System.out.println("error");
           syntax_error(cur_token);
           done_parsing();
        }
     }
     return lhs_sym;
  }

  public void syntax_error(Symbol x) throws Err {
    Map<Integer,String> ch = new LinkedHashMap<Integer,String>();
    ch.put(CompSym.ARROW, "->");
    ch.put(CompSym.ANY_ARROW_SOME, "->");
    ch.put(CompSym.ANY_ARROW_ONE, "->");
    ch.put(CompSym.ANY_ARROW_LONE, "->");
    ch.put(CompSym.SOME_ARROW_ANY, "some");
    ch.put(CompSym.SOME_ARROW_SOME, "some");
    ch.put(CompSym.SOME_ARROW_ONE, "some");
    ch.put(CompSym.SOME_ARROW_LONE, "some");
    ch.put(CompSym.ONE_ARROW_ANY, "one");
    ch.put(CompSym.ONE_ARROW_SOME, "one");
    ch.put(CompSym.ONE_ARROW_ONE, "one");
    ch.put(CompSym.ONE_ARROW_LONE, "one");
    ch.put(CompSym.LONE_ARROW_ANY, "lone");
    ch.put(CompSym.LONE_ARROW_SOME, "lone");
    ch.put(CompSym.LONE_ARROW_ONE, "lone");
    ch.put(CompSym.LONE_ARROW_LONE, "lone");
    ch.put(CompSym.INTADD, "fun");
    ch.put(CompSym.INTSUB, "fun");
    ch.put(CompSym.INTMUL, "fun");
    ch.put(CompSym.INTDIV, "fun");
    ch.put(CompSym.INTREM, "fun");
    ch.put(CompSym.INTMIN, "fun");
    ch.put(CompSym.INTMAX, "fun");
    ch.put(CompSym.INTNEXT, "fun");
    ch.put(CompSym.TOTALORDER, "pred");
    ch.put(CompSym.ABSTRACT, "abstract");
    ch.put(CompSym.ALL, "all");
    ch.put(CompSym.ALL2, "all");
    ch.put(CompSym.AMPERSAND, "&");
    ch.put(CompSym.AND, "&&");
    ch.put(CompSym.AS, "as");
    ch.put(CompSym.ASSERT, "assert");
    ch.put(CompSym.AT, "@");
    ch.put(CompSym.BAR, "|");
    ch.put(CompSym.BUT, "but");
    ch.put(CompSym.CARET, "^");
    ch.put(CompSym.CHECK, "check");
    ch.put(CompSym.COLON, ":");
    ch.put(CompSym.COMMA, ", ");
    ch.put(CompSym.DISJ, "disj");
    ch.put(CompSym.DOMAIN, "<:");
    ch.put(CompSym.DOT, ".");
    ch.put(CompSym.ELSE, "else");
    ch.put(CompSym.ENUM, "enum");
    ch.put(CompSym.EQUALS, "=");
    ch.put(CompSym.EXACTLY, "exactly");
    ch.put(CompSym.EXH, "exh");
    ch.put(CompSym.EXPECT, "expect");
    ch.put(CompSym.EXTENDS, "extends");
    ch.put(CompSym.FACT, "fact");
    ch.put(CompSym.FOR, "for");
    ch.put(CompSym.FUN, "fun");
    ch.put(CompSym.GT, ">");
    ch.put(CompSym.GTE, ">=");
    ch.put(CompSym.HASH, "#");
    ch.put(CompSym.IDEN, "iden");
    ch.put(CompSym.IFF, "iff");
    ch.put(CompSym.IMPLIES, "=>");
    ch.put(CompSym.IN, "in");
    ch.put(CompSym.INT, "int");
    ch.put(CompSym.LBRACE, "{");
    ch.put(CompSym.LBRACKET, "[");
    ch.put(CompSym.LET, "let");
    ch.put(CompSym.LONE2, "lone");
    ch.put(CompSym.LONE, "lone");
    ch.put(CompSym.LPAREN, "(");
    ch.put(CompSym.LT, "<");
    ch.put(CompSym.LTE, "<=");
    ch.put(CompSym.MAXIMIZE, "maximize"); // ObjDecl
    ch.put(CompSym.MINIMIZE, "minimize"); // ObjDecl
    ch.put(CompSym.MINUS, "-");
    ch.put(CompSym.MODULE, "module");
    ch.put(CompSym.NO2, "no");
    ch.put(CompSym.NO, "no");
    ch.put(CompSym.NONE, "none");
    ch.put(CompSym.NOT, "!");
    ch.put(CompSym.NOTEQUALS, "!");
    ch.put(CompSym.NOTGT, "!");
    ch.put(CompSym.NOTGTE, "!");
    ch.put(CompSym.NOTIN, "!");
    ch.put(CompSym.NOTLT, "!");
    ch.put(CompSym.NOTLTE, "!");
    ch.put(CompSym.ONE2, "one");
    ch.put(CompSym.ONE, "one");
    ch.put(CompSym.OPEN, "open");
    ch.put(CompSym.OPTIMIZE, "optimize"); // Command
    ch.put(CompSym.OR, "||");
    ch.put(CompSym.PART, "part");
    ch.put(CompSym.PLUS, "+");
    ch.put(CompSym.PLUSPLUS, "++");
    ch.put(CompSym.PRED, "pred");
    ch.put(CompSym.PRIVATE, "private");
    ch.put(CompSym.RANGE, ":>");
    ch.put(CompSym.RBRACE, "}");
    ch.put(CompSym.RBRACKET, "]");
    ch.put(CompSym.RPAREN, ")");
    ch.put(CompSym.RUN, "run");
    ch.put(CompSym.SEQ, "seq");
    ch.put(CompSym.SET, "set");
    ch.put(CompSym.SHL, "<<");
    ch.put(CompSym.SHR, ">>>");
    ch.put(CompSym.SHA, ">>");
    ch.put(CompSym.SIG, "sig");
    ch.put(CompSym.SIGINT, "Int");
    ch.put(CompSym.SLASH, "/");
    ch.put(CompSym.SOME2, "some");
    ch.put(CompSym.SOME, "some");
	ch.put(CompSym.SPARSE, "sparse");
    ch.put(CompSym.STAR, "*");
    ch.put(CompSym.STRING, "String");
    ch.put(CompSym.SUM2, "sum");
    ch.put(CompSym.SUM, "sum");
    ch.put(CompSym.THIS, "this");
    ch.put(CompSym.TILDE, "~");
    ch.put(CompSym.UNIV, "univ");
    ch.put(CompSym.ID, "NAME");
    ch.put(CompSym.NUMBER, "NUMBER");
    ch.put(CompSym.STR, "STRING");
    ch.put(CompSym.BOUND, "inst");
    ch.put(CompSym.MORE, "moreover");

    
    TreeSet<String> list = new TreeSet<String>();
    Pos p=Pos.UNKNOWN;
    if (x!=null && x.value instanceof Pos) p=(Pos)(x.value);
       else if (x!=null && x.value instanceof Expr) p=((Expr)(x.value)).pos;
       else if (x!=null) p=x.pos;
    if (!stack.empty()) for(Map.Entry<Integer,String> e:ch.entrySet()) {
        int key=e.getKey(), act=get_action(((Symbol)stack.peek()).parse_state, key);
        if (act==0) continue;
        try {
            if (act>0 || alloy_confirm(key)) list.add(e.getValue());
        } catch(Throwable ex) {
            // If the parser is really really confused, alloy_confirm() could fail with array out-of-bound exception, etc.
        }
    }
    String result="There are "+list.size()+" possible tokens that can appear here:\n";
    for(String item:list) result=result+item+" ";
    throw new ErrorSyntax(p, (list.size()!=0)?result:"");
  }

  private boolean alloy_confirm(int key) {
    int state = ((Symbol)stack.peek()).parse_state;
    Stack<Object> newstack=new Stack<Object>(); for(Object x:stack) newstack.push(x);
    while(true) {
      int act = get_action(state, key);
      if (act>0) return true;
      if (act==0) return false;
      int lhs_sym_num = production_tab[(-act)-1][0];
      int handle_size = production_tab[(-act)-1][1];
      for (int i = 0; i < handle_size; i++) { if (newstack.empty()) return false; newstack.pop(); }
      if (newstack.empty()) return false;
      if (newstack.peek() instanceof Symbol) state=((Symbol)newstack.peek()).parse_state;
      state=get_reduce(state, lhs_sym_num);
      newstack.push(null);
    }
  }

  static CompModule alloy_parseStream (List<Object> seenDollar,
  Map<String,String> loaded, Map<String,String> fc, CompModule root,
  int lineOffset, String filename, String prefix, int initialResolutionMode) throws Err, FileNotFoundException, IOException {
    Reader isr=null;
    try {
        if (root==null && prefix.length()!=0) throw new ErrorFatal("Internal error (parse subfile with root==null)");
        if (root!=null && prefix.length()==0) throw new ErrorFatal("Internal error (parse topfile with root!=null)");
        CompModule u = new CompModule(root, filename, prefix);
        if (root == null)
            u.addOpen(null, null, ExprVar.make(null, "util/integer"), null, ExprVar.make(null, "integer"));
        u.resolution = initialResolutionMode;
        String content = fc!=null ? fc.get(filename) : null;
        if (content==null && loaded!=null) content = loaded.get(filename);
        if (content==null) content = Util.readAll(filename);
        if (loaded!=null) loaded.put(filename,content);
        content = Util.convertLineBreak(content);
        isr = new StringReader(content);
        CompFilter s = new CompFilter(u, seenDollar, filename, lineOffset, new BufferedReader(isr));
        CompParser p = new CompParser(s);
        p.alloymodule=u;
        try {p.parse();} catch(Throwable ex) {if (ex instanceof Err) throw (Err)ex; throw new ErrorFatal("Parser Exception", ex);}
        // if no sigs are defined by the user, add one
        if (root == null && u.getAllSigs().isEmpty()) {
            u.addGhostSig(); 
        }
        return u;
    } finally {
        Util.close(isr);
    }
  }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$CompParser$actions {


    /** This function is needed to handle a difficult parsing ambiguity.
     *
     * <p>
     * "some EXPR", "one EXPR", and "lone EXPR"
     * can be either formulas (saying the EXPR has at least 1, exactly 1, or at most 1 tuple),
     * or multiplicity constraints (saying something else has this multiplicity).
     *
     * <p>
     * So we let the parser generate the former by default.
     * And whenever we construct a Decl "x: y" object,
     * or an binary expression "x in y", or a function return type,
     * we call this method on y to convert it into a multiplicity constraint.
     *
     * <p>
     * This is safe, because in all 3 cases, a formula would be illegal.
     * So the first form is always wrong.
     *
     * <p>
     * And this is sufficient, because those are the only 3 places
     * where a mulitplicity constraint is allowed to appear.
     *
     * @return a newly formed multiplciity constraint (if this.op==SOME or LONE or ONE),
     * otherwise it just returns the original node.
     */
    private Expr mult(Expr x) throws Err {
        if (x instanceof ExprUnary) {
           ExprUnary y=(ExprUnary)x;
           if (y.op==ExprUnary.Op.SOME) return ExprUnary.Op.SOMEOF.make(y.pos, y.sub);
           if (y.op==ExprUnary.Op.LONE) return ExprUnary.Op.LONEOF.make(y.pos, y.sub);
           if (y.op==ExprUnary.Op.ONE)  return ExprUnary.Op.ONEOF.make(y.pos, y.sub);
        }
        return x;
    }
    private void nod(ExprVar name) throws Err {
        if (name.label.indexOf('$')>=0) throw new ErrorSyntax(name.pos, "The name cannot contain the '$' symbol.");
    }
    private void nod(List<ExprVar> names) throws Err {
        if (names!=null) for(ExprVar n:names) if (n!=null && n.label.indexOf('$')>=0) throw new ErrorSyntax(n.pos, "The name cannot contain the '$' symbol.");
    }
    private void c(boolean follow, ExprVar o, ExprVar x, ExprVar n, Expr e, List<CommandScope> s, ExprConstant c, ObjBlock ob) throws Err {
       if (n!=null) nod(n);
        int bitwidth=(-1), maxseq=(-1), overall=(-1), expects=(c==null ? -1 : c.num);
        //The integers inside the inst-block are grouped and added into the int scope.
        boolean isSparse=(false);
        Pos p = o.pos.merge(n!=null ? n.span() : e.span());
        for(int i=s.size()-1; i>=0; i--) {
          Sig j=s.get(i).sig;  
          int k=s.get(i).startingScope;
          p=p.merge(j.pos);
          if (j.label.equals("univ")) { overall=k; s.remove(i); continue; }
          if (j.label.equals("int"))  { 
          if (bitwidth>=0) 
          throw new ErrorSyntax(j.pos, "The bitwidth cannot be specified more than once."); 
          bitwidth=k; 
          isSparse = s.get(i).isSparse;
          s.remove(i); 
          continue; 
          }
          if (j.label.equals("seq"))  { if (maxseq>=0) throw new ErrorSyntax(j.pos, "The maximum sequence length cannot be specified more than once."); maxseq=k; s.remove(i); continue; }
          
        }
        if (n!=null)
          parser.alloymodule.addCommand(follow, p, n.label, o.label.equals("c"), overall, bitwidth, maxseq, expects, s, x,isSparse, ob);
        else
          parser.alloymodule.addCommand(follow, p, e,       o.label.equals("c"), overall, bitwidth, maxseq, expects, s, x,isSparse, ob);
    }
    private Expr t(Pos pos, Pos oldClosing, Expr left, Expr right, Pos close) throws Err {
      if (right instanceof ExprVar) {
         String n = ((ExprVar)right).label;
         if (n.equals("int"))             return ExprUnary.Op.CAST2INT.make(pos, left);
         if (n.equals("disj"))            return ExprList.makeDISJOINT(pos, close, Util.asList(left));
         if (n.equals("pred/totalOrder")) return ExprList.makeTOTALORDER(pos, close, Util.asList(left));
      }
      else if (right instanceof ExprList) {
         return ((ExprList)right).addArg(left);
      }
      return ExprBadJoin.make(pos, oldClosing, left, right);
    }

  private final CompParser parser;

  /** Constructor */
  CUP$CompParser$actions(CompParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$CompParser$do_action(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack            CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$CompParser$result;

      /* select the action based on the action number */
      switch (CUP$CompParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 380: // Command ::= CommandPrefix Name FOR Name OPTIMIZE Name 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).right;
		ExprVar o = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).right;
		ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		int nbleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int nbright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		ExprVar nb = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int nb2left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int nb2right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		ExprVar nb2 = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 
	for(Bounds b: parser.alloymodule.getAllBounds()){
		if(b.label.compareTo(nb.label) == 0){
			c(false ,o,null,n   ,null,b.scope,null, parser.alloymodule.getObjectiveBlock(nb2.label)); 
		}
	}

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Command",8, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 379: // ObjDecl ::= MINIMIZE Expr 
            {
              ObjDecl RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = new ObjDecl(false, e); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ObjDecl",91, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 378: // ObjDecl ::= MAXIMIZE Expr 
            {
              ObjDecl RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = new ObjDecl(true, e); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ObjDecl",91, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 377: // ObjDecls ::= ObjDecls COMMA ObjDecl 
            {
              ArrayList<ObjDecl> RESULT =null;
		int d1left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		ArrayList<ObjDecl> d1 = (ArrayList<ObjDecl>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int d2left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int d2right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		ObjDecl d2 = (ObjDecl)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 d1.add(d2); RESULT = d1; 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ObjDecls",90, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 376: // ObjDecls ::= ObjDecl 
            {
              ArrayList<ObjDecl> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		ObjDecl d = (ObjDecl)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = new ArrayList<ObjDecl>(); RESULT.add(d); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ObjDecls",90, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 375: // ObjBlock ::= OBJECTIVES Name LBRACE ObjDecls RBRACE 
            {
              ObjBlock RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).right;
		ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		ArrayList<ObjDecl> d = (ArrayList<ObjDecl>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		
	RESULT = new ObjBlock(n.label, d);
	parser.alloymodule.addObjectives(RESULT);

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ObjBlock",89, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 374: // BaseExpr ::= LBRACE Declz RBRACE 
            {
              Expr RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		List<Decl> a = (List<Decl>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Pos c = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprQt.Op.COMPREHENSION.make(o, c, a, ExprConstant.TRUE); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",2, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 373: // BaseExpr ::= LBRACE Declz SuperOrBar RBRACE 
            {
              Expr RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		List<Decl> a = (List<Decl>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Pos c = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprQt.Op.COMPREHENSION.make(o, c, a, b);                 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",2, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 372: // BaseExpr ::= Super 
            {
              Expr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr x = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = x;                                                        
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",2, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 371: // BaseExpr ::= AT Name 
            {
              Expr RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		ExprVar x = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(x); RESULT = ExprVar.make(o.merge(x.pos), "@"+x.label);        
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",2, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 370: // BaseExpr ::= SigRef 
            {
              Expr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		ExprVar x = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = x;                                                        
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",2, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 369: // BaseExpr ::= LPAREN Expr RPAREN 
            {
              Expr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Expr x = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		 RESULT = x;                                                        
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",2, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 368: // BaseExpr ::= INTNEXT 
            {
              Expr RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprConstant.Op.NEXT.make(o, 0);                          
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",2, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 367: // BaseExpr ::= INTMAX 
            {
              Expr RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprConstant.Op.MAX.make(o, 0);                           
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",2, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 366: // BaseExpr ::= INTMIN 
            {
              Expr RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprConstant.Op.MIN.make(o, 0);                           
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",2, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 365: // BaseExpr ::= THIS 
            {
              Expr RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprVar.make(o, "this");                                  
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",2, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 364: // BaseExpr ::= IDEN 
            {
              Expr RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprVar.make(o, "iden");                                  
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",2, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 363: // BaseExpr ::= STR 
            {
              Expr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		ExprConstant x = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = x;                                                        
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",2, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 362: // BaseExpr ::= NUMBER 
            {
              Expr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		ExprConstant x = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = x;                                                        
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",2, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 361: // UnopExprB ::= CARET UnopExprB 
            {
              Expr RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.CLOSURE  .make(o,b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnopExprB",80, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 360: // UnopExprB ::= STAR UnopExprB 
            {
              Expr RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.RCLOSURE .make(o,b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnopExprB",80, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 359: // UnopExprB ::= TILDE UnopExprB 
            {
              Expr RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.TRANSPOSE.make(o,b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnopExprB",80, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 358: // UnopExprB ::= BaseExpr 
            {
              Expr RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                             	
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnopExprB",80, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 357: // UnopExprA ::= CARET UnopExprA 
            {
              Expr RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.CLOSURE  .make(o,b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnopExprA",79, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 356: // UnopExprA ::= STAR UnopExprA 
            {
              Expr RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.RCLOSURE .make(o,b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnopExprA",79, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 355: // UnopExprA ::= TILDE UnopExprA 
            {
              Expr RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.TRANSPOSE.make(o,b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnopExprA",79, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 354: // UnopExprA ::= CARET Bind 
            {
              Expr RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.CLOSURE  .make(o,b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnopExprA",79, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 353: // UnopExprA ::= STAR Bind 
            {
              Expr RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.RCLOSURE .make(o,b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnopExprA",79, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 352: // UnopExprA ::= TILDE Bind 
            {
              Expr RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.TRANSPOSE.make(o,b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnopExprA",79, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 351: // DotExprB ::= BracketExprB DOT SUM 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		 RESULT=ExprUnary.Op.CAST2SIGINT.make(o, ExprUnary.Op.CAST2INT.make(o, a)); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("DotExprB",18, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 350: // DotExprB ::= BracketExprB DOT INT 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		 RESULT=ExprUnary.Op.CAST2SIGINT.make(o, ExprUnary.Op.CAST2INT.make(o, a)); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("DotExprB",18, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 349: // DotExprB ::= BracketExprB DOT TOTALORDER 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Pos b = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=t(o, null, a, ExprVar.make(b, "pred/totalOrder"), null); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("DotExprB",18, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 348: // DotExprB ::= BracketExprB DOT DISJ 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Pos b = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=t(o, null, a, ExprVar.make(b, "disj"),            null); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("DotExprB",18, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 347: // DotExprB ::= BracketExprB DOT UnopExprB 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=t(o, null, a, b,                                  null); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("DotExprB",18, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 346: // DotExprB ::= UnopExprB 
            {
              Expr RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                                                        
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("DotExprB",18, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 345: // DotExprA ::= BracketExprB DOT Bind 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=t(o, null, a, b,                                  null); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("DotExprA",17, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 344: // DotExprA ::= UnopExprA 
            {
              Expr RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                                                       
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("DotExprA",17, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 343: // BracketExprB ::= SUM LBRACKET Exprs RBRACKET 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).right;
		Pos a = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		List<Expr> b = (List<Expr>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Pos c = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 Expr aa=ExprVar.make(a, "int");             for(Expr bb:b) aa=t(aa.span().merge(bb.span()), c, bb, aa, c); RESULT=ExprUnary.Op.CAST2SIGINT.make(a, aa); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BracketExprB",5, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 342: // BracketExprB ::= INT LBRACKET Exprs RBRACKET 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).right;
		Pos a = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		List<Expr> b = (List<Expr>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Pos c = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 Expr aa=ExprVar.make(a, "int");             for(Expr bb:b) aa=t(aa.span().merge(bb.span()), c, bb, aa, c); RESULT=ExprUnary.Op.CAST2SIGINT.make(a, aa); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BracketExprB",5, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 341: // BracketExprB ::= TOTALORDER LBRACKET Exprs RBRACKET 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).right;
		Pos a = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		List<Expr> b = (List<Expr>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Pos c = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 Expr aa=ExprVar.make(a, "pred/totalOrder"); for(Expr bb:b) aa=t(aa.span().merge(bb.span()), c, bb, aa, c); RESULT=aa; 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BracketExprB",5, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 340: // BracketExprB ::= DISJ LBRACKET Exprs RBRACKET 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).right;
		Pos a = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		List<Expr> b = (List<Expr>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Pos c = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 Expr aa=ExprVar.make(a, "disj");            for(Expr bb:b) aa=t(aa.span().merge(bb.span()), c, bb, aa, c); RESULT=aa; 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BracketExprB",5, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 339: // BracketExprB ::= BracketExprB LBRACKET Exprs RBRACKET 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		List<Expr> b = (List<Expr>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Pos c = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 Expr aa=a;                                  for(Expr bb:b) aa=t(aa.span().merge(bb.span()), c, bb, aa, c); RESULT=aa; 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BracketExprB",5, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 338: // BracketExprB ::= DotExprB 
            {
              Expr RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                                                                                                             
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BracketExprB",5, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 337: // BracketExprA ::= DotExprA 
            {
              Expr RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                                                                                                             
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BracketExprA",4, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 336: // RangeExprB ::= RangeExprB RANGE BracketExprB 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.RANGE.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RangeExprB",55, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 335: // RangeExprB ::= BracketExprB 
            {
              Expr RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                                       
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RangeExprB",55, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 334: // RangeExprA ::= RangeExprB RANGE Bind 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.RANGE.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RangeExprA",54, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 333: // RangeExprA ::= BracketExprA 
            {
              Expr RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                                       
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RangeExprA",54, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 332: // DomainExprB ::= DomainExprB DOMAIN RangeExprB 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.DOMAIN.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("DomainExprB",16, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 331: // DomainExprB ::= RangeExprB 
            {
              Expr RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                                        
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("DomainExprB",16, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 330: // DomainExprA ::= DomainExprB DOMAIN Bind 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.DOMAIN.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("DomainExprA",15, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 329: // DomainExprA ::= RangeExprA 
            {
              Expr RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                                        
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("DomainExprA",15, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 328: // RelationExprB ::= DomainExprB RelOp RelationExprB 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pair<Pos,ExprBinary.Op> o = (Pair<Pos,ExprBinary.Op>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=o.b.make(o.a, null, a, b);  
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelationExprB",58, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 327: // RelationExprB ::= DomainExprB 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=a;                          
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelationExprB",58, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 326: // RelationExprA ::= DomainExprB RelOp Bind 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pair<Pos,ExprBinary.Op> o = (Pair<Pos,ExprBinary.Op>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=o.b.make(o.a, null, a, b);  
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelationExprA",57, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 325: // RelationExprA ::= DomainExprA 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=a;                          
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelationExprA",57, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 324: // RelOp ::= LONE_ARROW_LONE 
            {
              Pair<Pos,ExprBinary.Op> RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new Pair<Pos,ExprBinary.Op>(o, ExprBinary.Op.LONE_ARROW_LONE); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelOp",56, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 323: // RelOp ::= LONE_ARROW_ONE 
            {
              Pair<Pos,ExprBinary.Op> RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new Pair<Pos,ExprBinary.Op>(o, ExprBinary.Op.LONE_ARROW_ONE ); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelOp",56, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 322: // RelOp ::= LONE_ARROW_SOME 
            {
              Pair<Pos,ExprBinary.Op> RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new Pair<Pos,ExprBinary.Op>(o, ExprBinary.Op.LONE_ARROW_SOME); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelOp",56, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 321: // RelOp ::= LONE_ARROW_ANY 
            {
              Pair<Pos,ExprBinary.Op> RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new Pair<Pos,ExprBinary.Op>(o, ExprBinary.Op.LONE_ARROW_ANY ); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelOp",56, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 320: // RelOp ::= ONE_ARROW_LONE 
            {
              Pair<Pos,ExprBinary.Op> RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new Pair<Pos,ExprBinary.Op>(o, ExprBinary.Op.ONE_ARROW_LONE ); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelOp",56, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 319: // RelOp ::= ONE_ARROW_ONE 
            {
              Pair<Pos,ExprBinary.Op> RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new Pair<Pos,ExprBinary.Op>(o, ExprBinary.Op.ONE_ARROW_ONE  ); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelOp",56, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 318: // RelOp ::= ONE_ARROW_SOME 
            {
              Pair<Pos,ExprBinary.Op> RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new Pair<Pos,ExprBinary.Op>(o, ExprBinary.Op.ONE_ARROW_SOME ); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelOp",56, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 317: // RelOp ::= ONE_ARROW_ANY 
            {
              Pair<Pos,ExprBinary.Op> RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new Pair<Pos,ExprBinary.Op>(o, ExprBinary.Op.ONE_ARROW_ANY  ); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelOp",56, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 316: // RelOp ::= SOME_ARROW_LONE 
            {
              Pair<Pos,ExprBinary.Op> RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new Pair<Pos,ExprBinary.Op>(o, ExprBinary.Op.SOME_ARROW_LONE); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelOp",56, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 315: // RelOp ::= SOME_ARROW_ONE 
            {
              Pair<Pos,ExprBinary.Op> RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new Pair<Pos,ExprBinary.Op>(o, ExprBinary.Op.SOME_ARROW_ONE ); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelOp",56, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 314: // RelOp ::= SOME_ARROW_SOME 
            {
              Pair<Pos,ExprBinary.Op> RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new Pair<Pos,ExprBinary.Op>(o, ExprBinary.Op.SOME_ARROW_SOME); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelOp",56, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 313: // RelOp ::= SOME_ARROW_ANY 
            {
              Pair<Pos,ExprBinary.Op> RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new Pair<Pos,ExprBinary.Op>(o, ExprBinary.Op.SOME_ARROW_ANY ); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelOp",56, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 312: // RelOp ::= ANY_ARROW_LONE 
            {
              Pair<Pos,ExprBinary.Op> RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new Pair<Pos,ExprBinary.Op>(o, ExprBinary.Op.ANY_ARROW_LONE ); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelOp",56, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 311: // RelOp ::= ANY_ARROW_ONE 
            {
              Pair<Pos,ExprBinary.Op> RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new Pair<Pos,ExprBinary.Op>(o, ExprBinary.Op.ANY_ARROW_ONE  ); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelOp",56, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 310: // RelOp ::= ANY_ARROW_SOME 
            {
              Pair<Pos,ExprBinary.Op> RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new Pair<Pos,ExprBinary.Op>(o, ExprBinary.Op.ANY_ARROW_SOME ); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelOp",56, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 309: // RelOp ::= ARROW 
            {
              Pair<Pos,ExprBinary.Op> RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new Pair<Pos,ExprBinary.Op>(o, ExprBinary.Op.ARROW          ); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelOp",56, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 308: // IntersectExprB ::= IntersectExprB AMPERSAND RelationExprB 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.INTERSECT.make(o, null, a, b);     
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("IntersectExprB",37, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 307: // IntersectExprB ::= RelationExprB 
            {
              Expr RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;    	                                         
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("IntersectExprB",37, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 306: // IntersectExprA ::= IntersectExprB AMPERSAND Bind 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.INTERSECT.make(o, null, a, b);     
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("IntersectExprA",36, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 305: // IntersectExprA ::= RelationExprA 
            {
              Expr RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                                               
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("IntersectExprA",36, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 304: // OverrideExprB ::= OverrideExprB PLUSPLUS IntersectExprB 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.PLUSPLUS.make(o, null, a, b);      
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("OverrideExprB",52, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 303: // OverrideExprB ::= IntersectExprB 
            {
              Expr RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                                               
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("OverrideExprB",52, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 302: // OverrideExprA ::= OverrideExprB PLUSPLUS Bind 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.PLUSPLUS.make(o, null, a, b);      
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("OverrideExprA",51, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 301: // OverrideExprA ::= IntersectExprA 
            {
              Expr RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                                               
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("OverrideExprA",51, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 300: // NumUnopExprB ::= INT NumUnopExprB 
            {
              Expr RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.CAST2SIGINT.make(o, ExprUnary.Op.CAST2INT.make(o, b)); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NumUnopExprB",48, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // NumUnopExprB ::= SUM NumUnopExprB 
            {
              Expr RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.CAST2SIGINT.make(o, ExprUnary.Op.CAST2INT.make(o, b)); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NumUnopExprB",48, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // NumUnopExprB ::= HASH NumUnopExprB 
            {
              Expr RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.CARDINALITY.make(o, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NumUnopExprB",48, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // NumUnopExprB ::= OverrideExprB 
            {
              Expr RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                                   
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NumUnopExprB",48, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // NumUnopExprA ::= INT NumUnopExprA 
            {
              Expr RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.CAST2SIGINT.make(o, ExprUnary.Op.CAST2INT.make(o, b)); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NumUnopExprA",47, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // NumUnopExprA ::= SUM NumUnopExprA 
            {
              Expr RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.CAST2SIGINT.make(o, ExprUnary.Op.CAST2INT.make(o, b)); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NumUnopExprA",47, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // NumUnopExprA ::= HASH NumUnopExprA 
            {
              Expr RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.CARDINALITY.make(o, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NumUnopExprA",47, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // NumUnopExprA ::= INT Bind 
            {
              Expr RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.CAST2SIGINT.make(o, ExprUnary.Op.CAST2INT.make(o, b)); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NumUnopExprA",47, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // NumUnopExprA ::= SUM Bind 
            {
              Expr RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.CAST2SIGINT.make(o, ExprUnary.Op.CAST2INT.make(o, b)); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NumUnopExprA",47, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // NumUnopExprA ::= HASH Bind 
            {
              Expr RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.CARDINALITY.make(o, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NumUnopExprA",47, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // NumUnopExprA ::= OverrideExprA 
            {
              Expr RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                                   
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NumUnopExprA",47, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // MulExprB ::= MulExprB INTREM NumUnopExprB 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.REM       .make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("MulExprB",76, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // MulExprB ::= MulExprB INTDIV NumUnopExprB 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.DIV       .make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("MulExprB",76, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // MulExprB ::= MulExprB INTMUL NumUnopExprB 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.MUL       .make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("MulExprB",76, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // MulExprB ::= NumUnopExprB 
            {
              Expr RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                                            
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("MulExprB",76, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // MulExprA ::= MulExprB INTREM Bind 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.REM       .make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("MulExprA",75, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // MulExprA ::= MulExprB INTDIV Bind 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.DIV       .make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("MulExprA",75, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // MulExprA ::= MulExprB INTMUL Bind 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.MUL       .make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("MulExprA",75, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // MulExprA ::= NumUnopExprA 
            {
              Expr RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                                            
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("MulExprA",75, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // UnionDiffExprB ::= UnionDiffExprB INTSUB MulExprB 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.IMINUS.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnionDiffExprB",78, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // UnionDiffExprB ::= UnionDiffExprB INTADD MulExprB 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.IPLUS.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnionDiffExprB",78, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // UnionDiffExprB ::= UnionDiffExprB MINUS MulExprB 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.MINUS.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnionDiffExprB",78, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // UnionDiffExprB ::= UnionDiffExprB PLUS MulExprB 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.PLUS .make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnionDiffExprB",78, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // UnionDiffExprB ::= MulExprB 
            {
              Expr RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                                       
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnionDiffExprB",78, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // UnionDiffExprA ::= UnionDiffExprB INTSUB Bind 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.IMINUS.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnionDiffExprA",77, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // UnionDiffExprA ::= UnionDiffExprB INTADD Bind 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.IPLUS.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnionDiffExprA",77, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // UnionDiffExprA ::= UnionDiffExprB MINUS Bind 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.MINUS.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnionDiffExprA",77, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // UnionDiffExprA ::= UnionDiffExprB PLUS Bind 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.PLUS .make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnionDiffExprA",77, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // UnionDiffExprA ::= MulExprA 
            {
              Expr RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                                       
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnionDiffExprA",77, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // ShiftExprB ::= ShiftExprB SHA UnionDiffExprB 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.SHA.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ShiftExprB",74, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // ShiftExprB ::= ShiftExprB SHR UnionDiffExprB 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.SHR.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ShiftExprB",74, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // ShiftExprB ::= ShiftExprB SHL UnionDiffExprB 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.SHL.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ShiftExprB",74, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // ShiftExprB ::= UnionDiffExprB 
            {
              Expr RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                                     
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ShiftExprB",74, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // ShiftExprA ::= ShiftExprB SHA Bind 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.SHA.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ShiftExprA",73, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // ShiftExprA ::= ShiftExprB SHR Bind 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.SHR.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ShiftExprA",73, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // ShiftExprA ::= ShiftExprB SHL Bind 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.SHL.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ShiftExprA",73, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // ShiftExprA ::= UnionDiffExprA 
            {
              Expr RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                                     
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ShiftExprA",73, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // CompareExprB ::= ShiftExprB 
            {
              Expr RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                               
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB",7, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // CompareExprB ::= SEQ ShiftExprB 
            {
              Expr RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.ISSEQ_ARROW_LONE.make(o, null, ExprVar.make(o,"seq/Int"), b); parser.alloymodule.addSeq(o); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB",7, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // CompareExprB ::= SET ShiftExprB 
            {
              Expr RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.SETOF.make(o, b);   
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB",7, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // CompareExprB ::= ONE ShiftExprB 
            {
              Expr RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.ONE  .make(o, b);   
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB",7, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // CompareExprB ::= LONE ShiftExprB 
            {
              Expr RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.LONE .make(o, b);   
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB",7, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // CompareExprB ::= SOME ShiftExprB 
            {
              Expr RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.SOME .make(o, b);   
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB",7, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // CompareExprB ::= NO ShiftExprB 
            {
              Expr RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.NO   .make(o, b);   
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB",7, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // CompareExprB ::= ALL ShiftExprB 
            {
              Expr RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		 if (1==1) throw new ErrorSyntax(o,"The \"all x\" construct is no longer supported. If you know the range of possible values of x, consider rewriting it as \"x == set_of_all_possible_values\"."); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB",7, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // CompareExprB ::= CompareExprB NOTGTE ShiftExprB 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.NOT_GTE   .make(o, null, a, b);       
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB",7, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // CompareExprB ::= CompareExprB NOTLTE ShiftExprB 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.NOT_LTE   .make(o, null, a, b);       
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB",7, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // CompareExprB ::= CompareExprB NOTGT ShiftExprB 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.NOT_GT    .make(o, null, a, b);       
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB",7, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // CompareExprB ::= CompareExprB NOTLT ShiftExprB 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.NOT_LT    .make(o, null, a, b);       
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB",7, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // CompareExprB ::= CompareExprB NOTEQUALS ShiftExprB 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.NOT_EQUALS.make(o, null, a, b);       
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB",7, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // CompareExprB ::= CompareExprB NOTIN ShiftExprB 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.NOT_IN    .make(o, null, a, mult(b)); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB",7, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // CompareExprB ::= CompareExprB GTE ShiftExprB 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.GTE       .make(o, null, a, b);       
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB",7, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // CompareExprB ::= CompareExprB LTE ShiftExprB 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.LTE       .make(o, null, a, b);       
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB",7, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // CompareExprB ::= CompareExprB GT ShiftExprB 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.GT        .make(o, null, a, b);       
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB",7, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // CompareExprB ::= CompareExprB LT ShiftExprB 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.LT        .make(o, null, a, b);       
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB",7, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // CompareExprB ::= CompareExprB EQUALS ShiftExprB 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.EQUALS    .make(o, null, a, b);       
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB",7, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // CompareExprB ::= CompareExprB IN ShiftExprB 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.IN        .make(o, null, a, mult(b)); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB",7, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // CompareExprA ::= ShiftExprA 
            {
              Expr RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                               
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA",6, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // CompareExprA ::= SEQ ShiftExprA 
            {
              Expr RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.ISSEQ_ARROW_LONE.make(o, null, ExprVar.make(o, "seq/Int"), b); parser.alloymodule.addSeq(o); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA",6, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // CompareExprA ::= SET ShiftExprA 
            {
              Expr RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.SETOF.make(o, b);   
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA",6, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // CompareExprA ::= ONE ShiftExprA 
            {
              Expr RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.ONE  .make(o, b);   
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA",6, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // CompareExprA ::= LONE ShiftExprA 
            {
              Expr RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.LONE .make(o, b);   
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA",6, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // CompareExprA ::= SOME ShiftExprA 
            {
              Expr RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.SOME .make(o, b);   
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA",6, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // CompareExprA ::= NO ShiftExprA 
            {
              Expr RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.NO   .make(o, b);   
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA",6, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // CompareExprA ::= ALL ShiftExprA 
            {
              Expr RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		 if (1==1) throw new ErrorSyntax(o,"The \"all x\" construct is no longer supported. If you know the range of possible values of x, consider rewriting it as \"x == set_of_all_possible_values\"."); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA",6, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // CompareExprA ::= CompareExprB NOTGTE ShiftExprA 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.NOT_GTE   .make(o, null, a, b);       
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA",6, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // CompareExprA ::= CompareExprB NOTLTE ShiftExprA 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.NOT_LTE   .make(o, null, a, b);       
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA",6, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // CompareExprA ::= CompareExprB NOTGT ShiftExprA 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.NOT_GT    .make(o, null, a, b);       
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA",6, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // CompareExprA ::= CompareExprB NOTLT ShiftExprA 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.NOT_LT    .make(o, null, a, b);       
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA",6, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // CompareExprA ::= CompareExprB NOTEQUALS ShiftExprA 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.NOT_EQUALS.make(o, null, a, b);       
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA",6, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // CompareExprA ::= CompareExprB NOTIN ShiftExprA 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.NOT_IN    .make(o, null, a, mult(b)); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA",6, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // CompareExprA ::= CompareExprB GTE ShiftExprA 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.GTE       .make(o, null, a, b);       
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA",6, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // CompareExprA ::= CompareExprB LTE ShiftExprA 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.LTE       .make(o, null, a, b);       
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA",6, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // CompareExprA ::= CompareExprB GT ShiftExprA 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.GT        .make(o, null, a, b);       
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA",6, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // CompareExprA ::= CompareExprB LT ShiftExprA 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.LT        .make(o, null, a, b);       
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA",6, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // CompareExprA ::= CompareExprB EQUALS ShiftExprA 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.EQUALS    .make(o, null, a, b);       
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA",6, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // CompareExprA ::= CompareExprB IN ShiftExprA 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.IN        .make(o, null, a, mult(b)); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA",6, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // NegExprB ::= NOT NegExprB 
            {
              Expr RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.NOT.make(o, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NegExprB",46, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // NegExprB ::= CompareExprB 
            {
              Expr RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                           
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NegExprB",46, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // NegExprA ::= NOT NegExprA 
            {
              Expr RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.NOT.make(o, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NegExprA",45, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // NegExprA ::= NOT Bind 
            {
              Expr RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.NOT.make(o, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NegExprA",45, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // NegExprA ::= CompareExprA 
            {
              Expr RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                           
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NegExprA",45, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // AndExprB ::= AndExprB AND NegExprB 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.AND.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("AndExprB",1, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // AndExprB ::= NegExprB 
            {
              Expr RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                                     
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("AndExprB",1, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // AndExprA ::= AndExprB AND Bind 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.AND.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("AndExprA",0, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // AndExprA ::= NegExprA 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=a;                                     
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("AndExprA",0, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // ImpliesExprOpenB ::= AndExprB IMPLIES ImpliesExprB 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprBinary.Op.IMPLIES.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ImpliesExprOpenB",35, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // ImpliesExprOpenB ::= AndExprB IMPLIES ImpliesExprCloseB ELSE ImpliesExprOpenB 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr c = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprITE.make(o,a,b,c);                     
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ImpliesExprOpenB",35, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // ImpliesExprCloseB ::= AndExprB IMPLIES ImpliesExprCloseB ELSE ImpliesExprCloseB 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr c = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprITE.make(o,a,b,c);                     
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ImpliesExprCloseB",33, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // ImpliesExprCloseB ::= AndExprB 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=a; 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ImpliesExprCloseB",33, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // ImpliesExprB ::= ImpliesExprOpenB 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=a; 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ImpliesExprB",31, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // ImpliesExprB ::= ImpliesExprCloseB 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=a; 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ImpliesExprB",31, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // ImpliesExprOpenA ::= AndExprB IMPLIES Bind 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprBinary.Op.IMPLIES.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ImpliesExprOpenA",34, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // ImpliesExprCloseA ::= AndExprB IMPLIES ImpliesExprCloseB ELSE Bind 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr c = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprITE.make(o,a,b,c);                     
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ImpliesExprCloseA",32, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // ImpliesExprOpenA ::= AndExprB IMPLIES ImpliesExprA 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprBinary.Op.IMPLIES.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ImpliesExprOpenA",34, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // ImpliesExprOpenA ::= AndExprB IMPLIES ImpliesExprCloseB ELSE ImpliesExprOpenA 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr c = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprITE.make(o,a,b,c);                     
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ImpliesExprOpenA",34, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // ImpliesExprCloseA ::= AndExprB IMPLIES ImpliesExprCloseB ELSE ImpliesExprCloseA 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr c = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprITE.make(o,a,b,c);                     
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ImpliesExprCloseA",32, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // ImpliesExprCloseA ::= AndExprA 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=a; 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ImpliesExprCloseA",32, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // ImpliesExprA ::= ImpliesExprOpenA 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=a; 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ImpliesExprA",30, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // ImpliesExprA ::= ImpliesExprCloseA 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=a; 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ImpliesExprA",30, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // EquivExprB ::= EquivExprB IFF ImpliesExprB 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.IFF.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("EquivExprB",20, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // EquivExprB ::= ImpliesExprB 
            {
              Expr RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                                     
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("EquivExprB",20, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // EquivExprA ::= EquivExprB IFF Bind 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.IFF.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("EquivExprA",19, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // EquivExprA ::= ImpliesExprA 
            {
              Expr RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                                     
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("EquivExprA",19, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // OrExprB ::= OrExprB OR EquivExprB 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.OR.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("OrExprB",50, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // OrExprB ::= EquivExprB 
            {
              Expr RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                                    
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("OrExprB",50, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // OrExprA ::= OrExprB OR Bind 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.OR.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("OrExprA",49, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // OrExprA ::= EquivExprA 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=a;                                    
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("OrExprA",49, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // Bind ::= SUM2 Declp SuperOrBar 
            {
              Expr RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		List<Decl> a = (List<Decl>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprQt.Op.SUM .make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Bind",3, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // Bind ::= ONE2 Declp SuperOrBar 
            {
              Expr RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		List<Decl> a = (List<Decl>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprQt.Op.ONE .make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Bind",3, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // Bind ::= LONE2 Declp SuperOrBar 
            {
              Expr RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		List<Decl> a = (List<Decl>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprQt.Op.LONE.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Bind",3, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // Bind ::= SOME2 Declp SuperOrBar 
            {
              Expr RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		List<Decl> a = (List<Decl>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprQt.Op.SOME.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Bind",3, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // Bind ::= NO2 Declp SuperOrBar 
            {
              Expr RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		List<Decl> a = (List<Decl>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprQt.Op.NO  .make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Bind",3, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // Bind ::= ALL2 Declp SuperOrBar 
            {
              Expr RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		List<Decl> a = (List<Decl>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprQt.Op.ALL .make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Bind",3, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // Bind ::= LET Let 
            {
              Expr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr x = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = x;                                  
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Bind",3, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // Expr ::= Bind 
            {
              Expr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr x = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = x;                                  
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Expr",22, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // Expr ::= OrExprB 
            {
              Expr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr x = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = x;                                  
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Expr",22, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // Expr ::= OrExprA 
            {
              Expr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr x = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = x;                                  
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Expr",22, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // Exprp ::= Exprp COMMA Expr 
            {
              List<Expr> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		List<Expr> a = (List<Expr>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 a.add(b); RESULT=a;                          
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Exprp",28, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // Exprp ::= Expr 
            {
              List<Expr> RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr x = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new ArrayList<Expr>(); RESULT.add(x); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Exprp",28, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // Exprs ::= Exprp 
            {
              List<Expr> RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		List<Expr> x = (List<Expr>)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=x;                                    
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Exprs",27, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // Exprs ::= 
            {
              List<Expr> RESULT =null;
		 RESULT=new ArrayList<Expr>();                
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Exprs",27, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // SuperOrBar ::= Super 
            {
              Expr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr x = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=x; 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SuperOrBar",26, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // SuperOrBar ::= BAR Expr 
            {
              Expr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr x = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=x; 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SuperOrBar",26, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // SuperP ::= SuperP Expr 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.AND.make(null, null, a, b);  
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SuperP",25, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // SuperP ::= Expr 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=a;                                         
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SuperP",25, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // Super ::= LBRACE RBRACE 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos a = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Pos b = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprConstant.Op.TRUE.make(a.merge(b), 0);  
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Super",23, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // Super ::= LBRACE SuperP RBRACE 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Pos a = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Expr x = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Pos b = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.NOOP.make(a.merge(b), x);     
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Super",23, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // SuperOpt ::= Super 
            {
              Expr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr x = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=x;                                         
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SuperOpt",24, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // SuperOpt ::= 
            {
              Expr RESULT =null;
		 RESULT=null;                                      
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SuperOpt",24, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // Let ::= Name EQUALS Expr COMMA Let 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).right;
		ExprVar a = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr x = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		
  nod(a);
  if (a.label.indexOf('/')>=0) throw new ErrorSyntax(a.pos, "Let variable name cannot contain \'/\'");
  if (a.label.indexOf('@')>=0) throw new ErrorSyntax(a.pos, "Let variable name cannot contain \'@\'");
  RESULT = ExprLet.make(o, ExprVar.make(a.pos, a.label), b, x);

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Let",38, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // Let ::= Name EQUALS Expr SuperOrBar 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).right;
		ExprVar a = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr x = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		
  nod(a);
  if (a.label.indexOf('/')>=0) throw new ErrorSyntax(a.pos, "Let variable name cannot contain \'/\'");
  if (a.label.indexOf('@')>=0) throw new ErrorSyntax(a.pos, "Let variable name cannot contain \'@\'");
  RESULT = ExprLet.make(o, ExprVar.make(a.pos, a.label), b, x);

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Let",38, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // DeclsB ::= DeclsB COMMA DeclsBb 
            {
              List<CommandScope> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		List<CommandScope> a = (List<CommandScope>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		CommandScope b = (CommandScope)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=a; a.add(b);                    
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("DeclsB",88, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // DeclsB ::= DeclsBb 
            {
              List<CommandScope> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		CommandScope a = (CommandScope)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new ArrayList<CommandScope>(); RESULT.add(a); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("DeclsB",88, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // DeclsBb ::= Name INCLUDE ExprB MORE ExprB 
            {
              CommandScope RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).right;
		ExprVar a = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		List b = (List)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		List c = (List)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		  
	b.addAll(c);
	RESULT = new CommandScope(a.pos, new PrimSig(a.label, AttrType.WHERE.make(a.pos)), false, b.size(), b.size(), 1, b,b.size() - c.size()); 

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("DeclsBb",86, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // DeclsBb ::= Name INCLUDE ExprB 
            {
              CommandScope RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		ExprVar a = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		List b = (List)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		  //RESULT = new CommandScope(null,false,-1); 
	RESULT = new CommandScope(a.pos, new PrimSig(a.label, AttrType.WHERE.make(a.pos)), false, b.size(), b.size(), 1, b, b.size()); 

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("DeclsBb",86, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // DeclsBb ::= Name IN ExprB 
            {
              CommandScope RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		ExprVar a = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		List b = (List)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		  //RESULT = new CommandScope(null,false,-1); 
	RESULT = new CommandScope(a.pos, new PrimSig(a.label, AttrType.WHERE.make(a.pos)), false, b.size(), b.size(), 1, b,0); 

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("DeclsBb",86, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // DeclsBb ::= NO Name 
            {
              CommandScope RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		ExprVar a = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 
	RESULT = new CommandScope(a.pos, new PrimSig(a.label, AttrType.WHERE.make(a.pos)), true, 0, 0, 1, new ArrayList() , 0); 

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("DeclsBb",86, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // DeclsBb ::= Name EQUALS ExprB 
            {
              CommandScope RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		ExprVar a = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		List b = (List)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		  
	RESULT = new CommandScope(a.pos, new PrimSig(a.label, AttrType.WHERE.make(a.pos)), true, b.size(), b.size(), 1, b, b.size()); 

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("DeclsBb",86, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // DeclsBb ::= TypeNumber Name 
            {
              CommandScope RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		CommandScope a = (CommandScope)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		ExprVar b = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		
   nod(b);
   RESULT = new CommandScope(a.pos.merge(b.pos), new PrimSig(b.label, AttrType.WHERE.make(a.pos.merge(b.pos))), a.isExact, a.startingScope, a.endingScope, a.increment);

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("DeclsBb",86, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // DeclsBb ::= NUMBER 
            {
              CommandScope RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		ExprConstant a = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 
	RESULT = new CommandScope(a.pos, new PrimSig("univ", AttrType.WHERE.make(a.pos)), false, a.num, a.num, 1);  
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("DeclsBb",86, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // DeclsBb ::= TypescopeB 
            {
              CommandScope RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		CommandScope b = (CommandScope)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;	
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("DeclsBb",86, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // TypescopeB ::= TypeNumber SPARSE SIGINT 
            {
              CommandScope RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		CommandScope a = (CommandScope)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos s = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Pos b = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 
   Pos p = a.pos.merge(b);
   if (a.endingScope>a.startingScope) throw new ErrorSyntax(p, "Cannot specify a growing scope for \"Int\"");
   if (a.isExact) throw new ErrorSyntax(p, "The exactly keyword is redundant here since the integer bitwidth must be exact.");
   //[VM] I have exlpoited the idea of exact here. If the exact=true, it means that the integers are sparse. ( Iknow the meaning is in reverese, but
   //it made the least effort to change the code.)
   RESULT = new CommandScope(p, new PrimSig("int", AttrType.WHERE.make(p)), a.isExact, a.startingScope, a.startingScope, 1, true);

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("TypescopeB",87, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // TypescopeB ::= TypeNumber SIGINT 
            {
              CommandScope RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		CommandScope a = (CommandScope)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Pos b = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 
   Pos p = a.pos.merge(b);
   if (a.endingScope>a.startingScope) throw new ErrorSyntax(p, "Cannot specify a growing scope for \"Int\"");
   if (a.isExact) throw new ErrorSyntax(p, "The exactly keyword is redundant here since the integer bitwidth must be exact.");
   RESULT = new CommandScope(p, new PrimSig("int", AttrType.WHERE.make(p)), a.isExact, a.startingScope, a.startingScope, 1);

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("TypescopeB",87, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // ExprB ::= LPAREN ExprB RPAREN 
            {
              List RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		List a = (List)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		RESULT = a; 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ExprB",85, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // ExprB ::= ExprB ARROW ExprBbN 
            {
              List RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		List a = (List)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		ExprConstant b = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		
		ArrayList tmp = new ArrayList();
		if(a.size() > 0)
			tmp.add( a.get(a.size()-1)  );
		a.add(new Pair<ArrayList<ExprVar>,ExprConstant>(tmp,b)); 
		RESULT =  a;
		
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ExprB",85, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // ExprB ::= ExprB ARROW ExprBb 
            {
              List RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		List a = (List)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		ExprVar b = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		
		ArrayList tmp = new ArrayList();
		if(a.size() > 0)
			tmp.add( a.get(a.size()-1)  );
		a.add(new Pair<ArrayList<ExprVar>,ExprVar>(tmp,b)); 
		RESULT =  a;
		
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ExprB",85, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // ExprB ::= ExprB PLUS ExprBbN 
            {
              List RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		List a = (List)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		ExprConstant b = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		a.add(b); RESULT=a;
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ExprB",85, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // ExprB ::= ExprB PLUS ExprBb 
            {
              List RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		List a = (List)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		ExprVar b = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		a.add(b); RESULT=a;
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ExprB",85, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // ExprB ::= ExprBbN 
            {
              List RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		ExprConstant a = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		RESULT = new ArrayList/*<ExprVar>*/(); RESULT.add(a);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ExprB",85, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // ExprB ::= ExprBb 
            {
              List RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		ExprVar a = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		RESULT = new ArrayList/*<ExprVar>*/(); RESULT.add(a);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ExprB",85, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // ExprBbN ::= NUMBER 
            {
              ExprConstant RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		ExprConstant a = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		RESULT =a;
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ExprBbN",84, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // ExprBb ::= Name 
            {
              ExprVar RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		ExprVar a = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		RESULT = a;
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ExprBb",83, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // Decls ::= COMMA Decls 
            {
              List<Decl> RESULT =null;
		int yleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		List<Decl> y = (List<Decl>)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=y;                                     
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decls",13, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // Decls ::= Declb COMMA Decls 
            {
              List<Decl> RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Decl x = (Decl)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		List<Decl> y = (List<Decl>)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=y; RESULT.add(0,x);                    
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decls",13, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // Decls ::= Declb 
            {
              List<Decl> RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Decl x = (Decl)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new ArrayList<Decl>(); RESULT.add(x);  
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decls",13, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // Decls ::= 
            {
              List<Decl> RESULT =null;
		 RESULT=new ArrayList<Decl>();                 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decls",13, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // Declp ::= Declb 
            {
              List<Decl> RESULT =null;
		int yleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Decl y = (Decl)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new ArrayList<Decl>(); RESULT.add(y);  
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Declp",12, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // Declp ::= Declp COMMA Declb 
            {
              List<Decl> RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		List<Decl> x = (List<Decl>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Decl y = (Decl)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=x; RESULT.add(y);                      
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Declp",12, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // Declz ::= Decla 
            {
              List<Decl> RESULT =null;
		int yleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Decl y = (Decl)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new ArrayList<Decl>(); RESULT.add(y);  
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Declz",14, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // Declz ::= Declz COMMA Decla 
            {
              List<Decl> RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		List<Decl> x = (List<Decl>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Decl y = (Decl)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=x; RESULT.add(y);                      
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Declz",14, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // Declb ::= Names EQUALS DISJ Expr 
            {
              Decl RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos d = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		 if (1==1) throw new ErrorSyntax(d, "Defined fields cannot be disjoint."); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Declb",11, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // Declb ::= PRIVATE Names EQUALS DISJ Expr 
            {
              Decl RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos d = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		 if (1==1) throw new ErrorSyntax(d, "Defined fields cannot be disjoint."); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Declb",11, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // Declb ::= PRIVATE DISJ Names EQUALS DISJ Expr 
            {
              Decl RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos d = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		 if (1==1) throw new ErrorSyntax(d, "Defined fields cannot be disjoint."); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Declb",11, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // Declb ::= DISJ Names EQUALS DISJ Expr 
            {
              Decl RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos d = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		 if (1==1) throw new ErrorSyntax(d, "Defined fields cannot be disjoint."); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Declb",11, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // Declb ::= EXH Names EQUALS DISJ Expr 
            {
              Decl RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).right;
		Pos k = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		 if (1==1) throw CompModule.hint(k, "exh");                                    
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Declb",11, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // Declb ::= PART Names EQUALS DISJ Expr 
            {
              Decl RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).right;
		Pos k = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		 if (1==1) throw CompModule.hint(k, "part");                                   
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Declb",11, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // Declb ::= Names EQUALS Expr 
            {
              Decl RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		List<ExprVar> a = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new Decl(null, null, null,  a, ExprUnary.Op.EXACTLYOF.make(null, b)); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Declb",11, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // Declb ::= PRIVATE Names EQUALS Expr 
            {
              Decl RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).right;
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		List<ExprVar> a = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new Decl(p,    null, null,  a, ExprUnary.Op.EXACTLYOF.make(null, b)); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Declb",11, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // Declb ::= PRIVATE DISJ Names EQUALS Expr 
            {
              Decl RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).right;
		Pos d = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		 if (1==1) throw new ErrorSyntax(d, "Defined fields cannot be disjoint.");    
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Declb",11, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // Declb ::= DISJ Names EQUALS Expr 
            {
              Decl RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).right;
		Pos d = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		 if (1==1) throw new ErrorSyntax(d, "Defined fields cannot be disjoint.");    
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Declb",11, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // Declb ::= EXH Names EQUALS Expr 
            {
              Decl RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).right;
		Pos k = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		 if (1==1) throw CompModule.hint(k, "exh");                                       
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Declb",11, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // Declb ::= PART Names EQUALS Expr 
            {
              Decl RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).right;
		Pos k = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		 if (1==1) throw CompModule.hint(k, "part");                                      
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Declb",11, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // Declb ::= Decla 
            {
              Decl RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Decl x = (Decl)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=x; 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Declb",11, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // Decla ::= Names COLON DISJ Expr 
            {
              Decl RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).right;
		List<ExprVar> a = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos d = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new Decl(null, null, d,    a, mult(b)); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla",10, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // Decla ::= PRIVATE Names COLON DISJ Expr 
            {
              Decl RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).right;
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).right;
		List<ExprVar> a = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos d = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new Decl(p,    null, d,    a, mult(b)); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla",10, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // Decla ::= PRIVATE DISJ Names COLON DISJ Expr 
            {
              Decl RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).right;
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).value;
		int kleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).right;
		Pos k = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).right;
		List<ExprVar> a = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos d = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new Decl(p,    k,    d,    a, mult(b)); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla",10, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // Decla ::= DISJ Names COLON DISJ Expr 
            {
              Decl RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).right;
		Pos k = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).right;
		List<ExprVar> a = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos d = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new Decl(null, k,    d,    a, mult(b)); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla",10, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // Decla ::= EXH Names COLON DISJ Expr 
            {
              Decl RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).right;
		Pos k = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		 if (1==1) throw CompModule.hint(k, "exh");         
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla",10, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // Decla ::= PART Names COLON DISJ Expr 
            {
              Decl RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).right;
		Pos k = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		 if (1==1) throw CompModule.hint(k, "part");        
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla",10, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // Decla ::= Names COLON Expr 
            {
              Decl RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		List<ExprVar> a = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new Decl(null, null, null, a, mult(b)); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla",10, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // Decla ::= PRIVATE Names COLON Expr 
            {
              Decl RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).right;
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		List<ExprVar> a = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new Decl(p,    null, null, a, mult(b)); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla",10, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // Decla ::= PRIVATE DISJ Names COLON Expr 
            {
              Decl RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).right;
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		int kleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).right;
		Pos k = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		List<ExprVar> a = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new Decl(p,    k,    null, a, mult(b)); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla",10, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // Decla ::= DISJ Names COLON Expr 
            {
              Decl RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).right;
		Pos k = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		List<ExprVar> a = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new Decl(null, k,    null, a, mult(b)); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla",10, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // Decla ::= EXH Names COLON Expr 
            {
              Decl RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).right;
		Pos k = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		 if (1==1) throw CompModule.hint(k, "exh");         
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla",10, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // Decla ::= PART Names COLON Expr 
            {
              Decl RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).right;
		Pos k = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		 if (1==1) throw CompModule.hint(k, "part");        
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla",10, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // Namex ::= Namex COMMA EXACTLY Name 
            {
              List<ExprVar> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).right;
		List<ExprVar> a = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		ExprVar b = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(b); a.add(null); a.add(b); RESULT=a;                                   
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Namex",44, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // Namex ::= Namex COMMA Name 
            {
              List<ExprVar> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		List<ExprVar> a = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		ExprVar b = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(b);              a.add(b); RESULT=a;                                   
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Namex",44, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // Namex ::= EXACTLY Name 
            {
              List<ExprVar> RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		ExprVar x = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(x); RESULT=new ArrayList<ExprVar>(); RESULT.add(null); RESULT.add(x);  
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Namex",44, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // Namex ::= Name 
            {
              List<ExprVar> RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		ExprVar x = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(x); RESULT=new ArrayList<ExprVar>();                   RESULT.add(x);  
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Namex",44, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // Names ::= Names COMMA Name 
            {
              List<ExprVar> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		List<ExprVar> a = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		ExprVar b = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(b); a.add(b); RESULT=a;                              
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Names",43, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // Names ::= Name 
            {
              List<ExprVar> RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		ExprVar x = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(x); RESULT=new ArrayList<ExprVar>(); RESULT.add(x);  
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Names",43, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // NameHelper ::= NameHelper SLASH ID 
            {
              ExprVar RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		ExprVar a = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		ExprVar b = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprVar.make(a.pos.merge(b.pos), a.label+"/"+b.label); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NameHelper",42, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // NameHelper ::= ID 
            {
              ExprVar RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		ExprVar x = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=x;                                                  
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NameHelper",42, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // Name ::= SEQ SLASH NameHelper 
            {
              ExprVar RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Pos a = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		ExprVar b = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprVar.make(a.merge(b.pos),  "seq/"+b.label); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Name",41, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // Name ::= THIS SLASH NameHelper 
            {
              ExprVar RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Pos a = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		ExprVar b = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprVar.make(a.merge(b.pos), "this/"+b.label); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Name",41, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // Name ::= NameHelper 
            {
              ExprVar RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		ExprVar x = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=x;                                           
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Name",41, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // SigRefu ::= SigRefu PLUS SigRef 
            {
              List<ExprVar> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		List<ExprVar> a = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		ExprVar b = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 a.add(b); RESULT=a;                             
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigRefu",67, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // SigRefu ::= SigRef 
            {
              List<ExprVar> RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		ExprVar x = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new ArrayList<ExprVar>(); RESULT.add(x); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigRefu",67, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // SigRefp ::= SigRefp COMMA SigRef 
            {
              List<ExprVar> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		List<ExprVar> a = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		ExprVar b = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 a.add(b); RESULT=a;                             
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigRefp",65, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // SigRefp ::= SigRef 
            {
              List<ExprVar> RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		ExprVar x = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new ArrayList<ExprVar>(); RESULT.add(x); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigRefp",65, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // SigRefs ::= SigRefp 
            {
              List<ExprVar> RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		List<ExprVar> x = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=x;                        
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigRefs",66, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // SigRefs ::= 
            {
              List<ExprVar> RESULT =null;
		 RESULT=new ArrayList<ExprVar>(); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigRefs",66, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // SigRef ::= NONE 
            {
              ExprVar RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Pos x = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprVar.make(x, "none");              
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigRef",64, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // SigRef ::= SEQ SLASH SIGINT 
            {
              ExprVar RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Pos a = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Pos b = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprVar.make(a.merge(b), "seq/Int");  
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigRef",64, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // SigRef ::= SIGINT 
            {
              ExprVar RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Pos x = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprVar.make(x, "Int");               
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigRef",64, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // SigRef ::= STRING 
            {
              ExprVar RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Pos x = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprVar.make(x, "String");            
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigRef",64, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // SigRef ::= UNIV 
            {
              ExprVar RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Pos x = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprVar.make(x, "univ");              
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigRef",64, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // SigRef ::= Name 
            {
              ExprVar RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		ExprVar x = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=x;                                    
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigRef",64, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // SigIn ::= 
            {
              List<ExprVar> RESULT =null;
		 RESULT=null;                                                                             
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigIn",61, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // SigIn ::= EQUALS SigRefu 
            {
              List<ExprVar> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos a = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		List<ExprVar> x = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=x;  x.add(ExprVar.make(a,"="));                                                   
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigIn",61, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // SigIn ::= IN SigRefu 
            {
              List<ExprVar> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos a = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		List<ExprVar> x = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=x;  x.add(ExprVar.make(a,"in"));                                                  
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigIn",61, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // SigIn ::= EXTENDS SigRef 
            {
              List<ExprVar> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos a = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		ExprVar x = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new ArrayList<ExprVar>(2); RESULT.add(x); RESULT.add(ExprVar.make(a, "extends")); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigIn",61, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // SigQuals ::= SigQual SigQuals 
            {
              List<Pos> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		List<Pos> a = (List<Pos>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		List<Pos> b = (List<Pos>)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=a; for(int i=0;i<5;i++) if (a.get(i)==null) a.set(i,b.get(i)); else if (b.get(i)!=null) throw new ErrorSyntax(b.get(i), "The same qualifer cannot be specified more than once for the same sig."); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigQuals",63, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // SigQuals ::= SIG 
            {
              List<Pos> RESULT =null;
		 RESULT=new ArrayList<Pos>(5); RESULT.add(null); RESULT.add(null); RESULT.add(null); RESULT.add(null); RESULT.add(null); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigQuals",63, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // SigQual ::= PRIVATE 
            {
              List<Pos> RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Pos x = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new ArrayList<Pos>(5); RESULT.add(null); RESULT.add(null); RESULT.add(null); RESULT.add(null); RESULT.add(x);    
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigQual",62, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // SigQual ::= SOME 
            {
              List<Pos> RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Pos x = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new ArrayList<Pos>(5); RESULT.add(null); RESULT.add(null); RESULT.add(null); RESULT.add(x);    RESULT.add(null); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigQual",62, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // SigQual ::= ONE 
            {
              List<Pos> RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Pos x = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new ArrayList<Pos>(5); RESULT.add(null); RESULT.add(null); RESULT.add(x);    RESULT.add(null); RESULT.add(null); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigQual",62, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // SigQual ::= LONE 
            {
              List<Pos> RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Pos x = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new ArrayList<Pos>(5); RESULT.add(null); RESULT.add(x);    RESULT.add(null); RESULT.add(null); RESULT.add(null); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigQual",62, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // SigQual ::= ABSTRACT 
            {
              List<Pos> RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Pos x = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new ArrayList<Pos>(5); RESULT.add(x);    RESULT.add(null); RESULT.add(null); RESULT.add(null); RESULT.add(null); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigQual",62, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Sig ::= SigQuals Names SigIn LBRACE Decls RBRACE SuperOpt 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).right;
		List<Pos> a = (List<Pos>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).right;
		List<ExprVar> b = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).right;
		List<ExprVar> c = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		List<Decl> d = (List<Decl>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		
   if (e==null) e = ExprConstant.Op.TRUE.make(o, 0);
   ExprVar cc = (c!=null && c.size()>0) ? c.remove(c.size()-1) : null;
   for(ExprVar bb:b) {
      parser.alloymodule.addSig(bb.label, cc, c, d, e,
         AttrType.WHERE   .makenull(bb.pos.merge(e==null ? o : e.span())),
         AttrType.ABSTRACT.makenull(a.get(0)),
         AttrType.LONE    .makenull(a.get(1)),
         AttrType.ONE     .makenull(a.get(2)),
         AttrType.SOME    .makenull(a.get(3)),
         AttrType.PRIVATE .makenull(a.get(4)));
   }
 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Sig",60, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Bounds ::= BOUND Name LBRACE DeclsB RBRACE SuperOpt 
            {
              Bounds RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).right;
		ExprVar a = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		List<CommandScope> b = (List<CommandScope>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 
		parser.alloymodule.addBounds(a.pos.merge(o),a.label,b,e);

//Bounds ::= BOUND:o Name:a LBRACE DeclsB:b RBRACE {: 
//		parser.alloymodule.addBounds(a.pos.merge(o),a.label,b,new ArrayList<ExprVar>());

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Bounds",82, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Vis ::= PRIVATE 
            {
              Pos RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=p;    
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Vis",81, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Vis ::= 
            {
              Pos RESULT =null;
		 RESULT=null; 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Vis",81, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Predicate ::= Vis PRED SigRef DOT Name Super 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).right;
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).right;
		ExprVar f = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(n); parser.alloymodule.addFunc(o.merge(v.span()), p, n.label, f   , null , null, v); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Predicate",53, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Predicate ::= Vis PRED SigRef DOT Name LBRACKET Decls RBRACKET Super 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-8)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-8)).right;
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-8)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-7)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-7)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-7)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).right;
		ExprVar f = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).right;
		ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		List<Decl> d = (List<Decl>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(n); parser.alloymodule.addFunc(o.merge(v.span()), p, n.label, f   , d    , null, v); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Predicate",53, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-8)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Predicate ::= Vis PRED SigRef DOT Name LPAREN Decls RPAREN Super 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-8)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-8)).right;
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-8)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-7)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-7)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-7)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).right;
		ExprVar f = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).right;
		ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		List<Decl> d = (List<Decl>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(n); parser.alloymodule.addFunc(o.merge(v.span()), p, n.label, f   , d    , null, v); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Predicate",53, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-8)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Predicate ::= Vis PRED Name Super 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).right;
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(n); parser.alloymodule.addFunc(o.merge(v.span()), p, n.label, null, null , null, v); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Predicate",53, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Predicate ::= Vis PRED Name LBRACKET Decls RBRACKET Super 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).right;
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).right;
		ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		List<Decl> d = (List<Decl>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(n); parser.alloymodule.addFunc(o.merge(v.span()), p, n.label, null, d    , null, v); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Predicate",53, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Predicate ::= Vis PRED Name LPAREN Decls RPAREN Super 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).right;
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).right;
		ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		List<Decl> d = (List<Decl>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(n); parser.alloymodule.addFunc(o.merge(v.span()), p, n.label, null, d    , null, v); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Predicate",53, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Function ::= Vis FUN SigRef DOT Name COLON Expr Super 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-7)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-7)).right;
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-7)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).right;
		ExprVar f = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).right;
		ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(n); parser.alloymodule.addFunc(o.merge(v.span()), p, n.label, f   , null , mult(r), v); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Function",29, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-7)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Function ::= Vis FUN SigRef DOT Name LBRACKET Decls RBRACKET COLON Expr Super 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-10)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-10)).right;
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-10)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-9)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-9)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-9)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-8)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-8)).right;
		ExprVar f = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-8)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).right;
		ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).right;
		List<Decl> d = (List<Decl>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(n); parser.alloymodule.addFunc(o.merge(v.span()), p, n.label, f   , d    , mult(r), v); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Function",29, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-10)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Function ::= Vis FUN SigRef DOT Name LPAREN Decls RPAREN COLON Expr Super 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-10)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-10)).right;
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-10)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-9)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-9)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-9)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-8)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-8)).right;
		ExprVar f = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-8)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).right;
		ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).right;
		List<Decl> d = (List<Decl>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(n); parser.alloymodule.addFunc(o.merge(v.span()), p, n.label, f   , d    , mult(r), v); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Function",29, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-10)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Function ::= Vis FUN Name COLON Expr Super 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).right;
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).right;
		ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(n); parser.alloymodule.addFunc(o.merge(v.span()), p, n.label, null, null , mult(r), v); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Function",29, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Function ::= Vis FUN Name LBRACKET Decls RBRACKET COLON Expr Super 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-8)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-8)).right;
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-8)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-7)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-7)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-7)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).right;
		ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).right;
		List<Decl> d = (List<Decl>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(n); parser.alloymodule.addFunc(o.merge(v.span()), p, n.label, null, d    , mult(r), v); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Function",29, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-8)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Function ::= Vis FUN Name LPAREN Decls RPAREN COLON Expr Super 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-8)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-8)).right;
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-8)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-7)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-7)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-7)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).right;
		ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).right;
		List<Decl> d = (List<Decl>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(n); parser.alloymodule.addFunc(o.merge(v.span()), p, n.label, null, d    , mult(r), v); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Function",29, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-8)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // MacroBody ::= EQUALS Expr 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=a; 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("MacroBody",40, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // MacroBody ::= Super 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=a; 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("MacroBody",40, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Macro ::= Vis LET Name MacroBody 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).right;
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(n); parser.alloymodule.addMacro(o.merge(v.span()), p, n.label, null  , v); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Macro",39, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Macro ::= Vis LET Name LBRACKET RBRACKET MacroBody 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).right;
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).right;
		ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(n); parser.alloymodule.addMacro(o.merge(v.span()), p, n.label, null  , v); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Macro",39, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Macro ::= Vis LET Name LBRACKET Names RBRACKET MacroBody 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).right;
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).right;
		ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		List<ExprVar> d = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(n); parser.alloymodule.addMacro(o.merge(v.span()), p, n.label, d     , v); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Macro",39, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Macro ::= Vis LET Name LPAREN RPAREN MacroBody 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).right;
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).right;
		ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(n); parser.alloymodule.addMacro(o.merge(v.span()), p, n.label, null  , v); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Macro",39, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Macro ::= Vis LET Name LPAREN Names RPAREN MacroBody 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).right;
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).right;
		ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		List<ExprVar> d = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(n); parser.alloymodule.addMacro(o.merge(v.span()), p, n.label, d     , v); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Macro",39, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // TypeNumber ::= NUMBER COLON NUMBER 
            {
              CommandScope RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		ExprConstant a = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		ExprConstant i = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 if (!Version.experimental) throw new ErrorSyntax(a.pos, "Syntax error here."); RESULT = new CommandScope(a.pos.merge(i.pos), Sig.NONE, false, a.num, Integer.MAX_VALUE, i.num); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("TypeNumber",70, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // TypeNumber ::= NUMBER DOT DOT NUMBER COLON NUMBER 
            {
              CommandScope RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).right;
		ExprConstant a = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		ExprConstant b = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		ExprConstant i = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 if (!Version.experimental) throw new ErrorSyntax(a.pos, "Syntax error here."); RESULT = new CommandScope(a.pos.merge(i.pos), Sig.NONE, false, a.num, b.num,             i.num); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("TypeNumber",70, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // TypeNumber ::= NUMBER DOT DOT NUMBER 
            {
              CommandScope RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).right;
		ExprConstant a = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		ExprConstant b = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 if (!Version.experimental) throw new ErrorSyntax(a.pos, "Syntax error here."); RESULT = new CommandScope(a.pos.merge(b.pos), Sig.NONE, false, a.num, b.num,             1    ); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("TypeNumber",70, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // TypeNumber ::= NUMBER 
            {
              CommandScope RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		ExprConstant a = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		                                                                                RESULT = new CommandScope(a.pos             , Sig.NONE, false, a.num, a.num,             1    ); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("TypeNumber",70, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // TypeNumber ::= EXACTLY NUMBER COLON NUMBER 
            {
              CommandScope RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).right;
		Pos e = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		ExprConstant a = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		ExprConstant i = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 if (!Version.experimental) throw new ErrorSyntax(a.pos, "Syntax error here."); RESULT = new CommandScope(    e.merge(i.pos), Sig.NONE, true,  a.num, Integer.MAX_VALUE, i.num); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("TypeNumber",70, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // TypeNumber ::= EXACTLY NUMBER DOT DOT NUMBER COLON NUMBER 
            {
              CommandScope RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).right;
		Pos e = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).right;
		ExprConstant a = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		ExprConstant b = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		ExprConstant i = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 if (!Version.experimental) throw new ErrorSyntax(a.pos, "Syntax error here."); RESULT = new CommandScope(    e.merge(i.pos), Sig.NONE, true,  a.num, b.num,             i.num); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("TypeNumber",70, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // TypeNumber ::= EXACTLY NUMBER DOT DOT NUMBER 
            {
              CommandScope RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).right;
		Pos e = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).right;
		ExprConstant a = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		ExprConstant b = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 if (!Version.experimental) throw new ErrorSyntax(a.pos, "Syntax error here."); RESULT = new CommandScope(    e.merge(b.pos), Sig.NONE, true,  a.num, b.num,             1    ); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("TypeNumber",70, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // TypeNumber ::= EXACTLY NUMBER 
            {
              CommandScope RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos e = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		ExprConstant a = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		                                                                                RESULT = new CommandScope(    e.merge(a.pos), Sig.NONE, true,  a.num, a.num,             1    ); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("TypeNumber",70, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Typescope ::= TypeNumber NONE 
            {
              CommandScope RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		CommandScope e = (CommandScope)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Pos f = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 if (1==1) throw new ErrorSyntax(e.pos.merge(f), "You cannot set a scope on none."); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Typescope",71, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Typescope ::= TypeNumber STRING 
            {
              CommandScope RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		CommandScope a = (CommandScope)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Pos b = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = new CommandScope(a.pos.merge(b), new PrimSig("String", AttrType.WHERE.make(a.pos.merge(b))), a.isExact, a.startingScope, a.endingScope, a.increment); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Typescope",71, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Typescope ::= TypeNumber UNIV 
            {
              CommandScope RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		CommandScope e = (CommandScope)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Pos f = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 if (1==1) throw new ErrorSyntax(e.pos.merge(f), "You cannot set a scope on univ."); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Typescope",71, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Typescope ::= TypeNumber SEQ 
            {
              CommandScope RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		CommandScope a = (CommandScope)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Pos b = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		
   Pos p = a.pos.merge(b);
   if (a.endingScope>a.startingScope) throw new ErrorSyntax(p, "Cannot specify a growing scope for \"seq\"");
   if (a.isExact) throw new ErrorSyntax(p, "The exactly keyword is redundant here since the number of sequence index has to be exact.");
   RESULT = new CommandScope(p, new PrimSig("seq", AttrType.WHERE.make(p)), a.isExact, a.startingScope, a.startingScope, 1);

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Typescope",71, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Typescope ::= TypeNumber INT 
            {
              CommandScope RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		CommandScope a = (CommandScope)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Pos b = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 
   Pos p = a.pos.merge(b);
   if (a.endingScope>a.startingScope) throw new ErrorSyntax(p, "Cannot specify a growing scope for \"Int\"");
   if (a.isExact) throw new ErrorSyntax(p, "The exactly keyword is redundant here since the integer bitwidth must be exact.");
   RESULT = new CommandScope(p, new PrimSig("int", AttrType.WHERE.make(p)), a.isExact, a.startingScope, a.startingScope, 1);

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Typescope",71, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Typescope ::= TypeNumber SIGINT 
            {
              CommandScope RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		CommandScope a = (CommandScope)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Pos b = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 
   Pos p = a.pos.merge(b);
   if (a.endingScope>a.startingScope) throw new ErrorSyntax(p, "Cannot specify a growing scope for \"Int\"");
   if (a.isExact) throw new ErrorSyntax(p, "The exactly keyword is redundant here since the integer bitwidth must be exact.");
   RESULT = new CommandScope(p, new PrimSig("int", AttrType.WHERE.make(p)), a.isExact, a.startingScope, a.startingScope, 1);

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Typescope",71, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Typescope ::= TypeNumber Name 
            {
              CommandScope RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		CommandScope a = (CommandScope)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		ExprVar b = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		
   nod(b);
   RESULT = new CommandScope(a.pos.merge(b.pos), new PrimSig(b.label, AttrType.WHERE.make(a.pos.merge(b.pos))), a.isExact, a.startingScope, a.endingScope, a.increment);

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Typescope",71, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Typescopes ::= Typescopes COMMA Typescope 
            {
              List<CommandScope> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		List<CommandScope> a = (List<CommandScope>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		CommandScope b = (CommandScope)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=a; a.add(b);                                  
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Typescopes",72, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Typescopes ::= Typescope 
            {
              List<CommandScope> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		CommandScope a = (CommandScope)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new ArrayList<CommandScope>(); RESULT.add(a); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Typescopes",72, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Scope ::= 
            {
              List<CommandScope> RESULT =null;
		 RESULT=new ArrayList<CommandScope>();                                                                                         
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Scope",59, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Scope ::= FOR Typescopes 
            {
              List<CommandScope> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		List<CommandScope> b = (List<CommandScope>)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                                                                                                                     
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Scope",59, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Scope ::= FOR NUMBER BUT Typescopes 
            {
              List<CommandScope> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		ExprConstant a = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		List<CommandScope> b = (List<CommandScope>)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                                  b.add(new CommandScope(a.pos, new PrimSig("univ", AttrType.WHERE.make(a.pos)), true, a.num, a.num, 1)); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Scope",59, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Scope ::= FOR NUMBER 
            {
              List<CommandScope> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		ExprConstant a = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new ArrayList<CommandScope>(); RESULT.add(new CommandScope(a.pos, new PrimSig("univ", AttrType.WHERE.make(a.pos)), true, a.num, a.num, 1)); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Scope",59, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Expects ::= EXPECT NUMBER 
            {
              ExprConstant RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		ExprConstant a = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=a;    
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Expects",21, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Expects ::= 
            {
              ExprConstant RESULT =null;
		 RESULT=null; 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Expects",21, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Command ::= CommandPrefix Name FOR Name 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).right;
		ExprVar o = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int nbleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int nbright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		ExprVar nb = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 
	for(Bounds b: parser.alloymodule.getAllBounds()){
		if(b.label.compareTo(nb.label) == 0){
			c(false ,o,null,n   ,null,b.scope,null, null); 
			}

	}

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Command",8, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Command ::= Command IMPLIES CommandPrefix Name Scope Expects 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).right;
		ExprVar o = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		List<CommandScope> s = (List<CommandScope>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		ExprConstant c = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 c(true ,o,null,n   ,null,s,c, null); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Command",8, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Command ::= Command IMPLIES CommandPrefix Name Name Scope Expects 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).right;
		ExprVar o = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).right;
		ExprVar x = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		List<CommandScope> s = (List<CommandScope>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		ExprConstant c = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 c(true ,o,x   ,n   ,null,s,c, null); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Command",8, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Command ::= CommandPrefix Name Scope Expects 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).right;
		ExprVar o = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		List<CommandScope> s = (List<CommandScope>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		ExprConstant c = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 c(false,o,null,n   ,null,s,c, null); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Command",8, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Command ::= CommandPrefix Name Name Scope Expects 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).right;
		ExprVar o = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).right;
		ExprVar x = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		List<CommandScope> s = (List<CommandScope>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		ExprConstant c = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 c(false,o,x   ,n   ,null,s,c, null); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Command",8, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Command ::= Command IMPLIES CommandPrefix Super Scope Expects 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).right;
		ExprVar o = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		List<CommandScope> s = (List<CommandScope>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		ExprConstant c = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 c(true ,o,null,null,e   ,s,c, null); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Command",8, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Command ::= Command IMPLIES CommandPrefix Name Super Scope Expects 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).right;
		ExprVar o = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).right;
		ExprVar x = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		List<CommandScope> s = (List<CommandScope>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		ExprConstant c = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 c(true ,o,x   ,null,e   ,s,c, null); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Command",8, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Command ::= CommandPrefix Super Scope Expects 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).right;
		ExprVar o = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		List<CommandScope> s = (List<CommandScope>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		ExprConstant c = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 c(false,o,null,null,e   ,s,c, null); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Command",8, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Command ::= CommandPrefix Name Super Scope Expects 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).right;
		ExprVar o = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).right;
		ExprVar x = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		List<CommandScope> s = (List<CommandScope>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		ExprConstant c = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 c(false,o,x   ,null,e   ,s,c, null); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Command",8, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // CommandPrefix ::= RUN 
            {
              ExprVar RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Pos r = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprVar.make(r, "r"); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CommandPrefix",9, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // CommandPrefix ::= CHECK 
            {
              ExprVar RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Pos c = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprVar.make(c, "c"); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CommandPrefix",9, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Spec ::= 
            {
              Object RESULT =null;

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec",69, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Spec ::= Spec ObjBlock 
            {
              Object RESULT =null;

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec",69, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Spec ::= Spec Bounds 
            {
              Object RESULT =null;

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec",69, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Spec ::= Spec Command 
            {
              Object RESULT =null;

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec",69, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Spec ::= Spec Macro 
            {
              Object RESULT =null;

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec",69, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Spec ::= Spec Predicate 
            {
              Object RESULT =null;

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec",69, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Spec ::= Spec Function 
            {
              Object RESULT =null;

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec",69, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Spec ::= Spec Sig 
            {
              Object RESULT =null;

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec",69, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Spec ::= Spec ASSERT STR Super 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		ExprConstant n = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		         parser.alloymodule.addAssertion (o , n.string , e); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec",69, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Spec ::= Spec ASSERT Name Super 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(n); parser.alloymodule.addAssertion (o , n.label  , e); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec",69, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Spec ::= Spec ASSERT Super 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		         parser.alloymodule.addAssertion (o , ""       , e); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec",69, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Spec ::= Spec FACT STR Super 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		ExprConstant n = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		         parser.alloymodule.addFact      (o , n.string , e); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec",69, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Spec ::= Spec FACT Name Super 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(n); parser.alloymodule.addFact      (o , n.label  , e); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec",69, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Spec ::= Spec FACT Super 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		         parser.alloymodule.addFact      (o , ""       , e); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec",69, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Spec ::= Spec Vis ENUM Name LBRACE RBRACE 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).right;
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		ExprVar a = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Pos c = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(a);         parser.alloymodule.addEnum(o.merge(c),     p, a, null, c);    
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec",69, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Spec ::= Spec Vis ENUM Name LBRACE Names RBRACE 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).right;
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).right;
		ExprVar a = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		List<ExprVar> n = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Pos c = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(a);         parser.alloymodule.addEnum(o.merge(c),     p, a, n,    c);    
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec",69, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Spec ::= Spec Vis OPEN Name LBRACKET SigRefs RBRACKET AS Name 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-7)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-7)).right;
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-7)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).right;
		ExprVar a = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).right;
		List<ExprVar> b = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		ExprVar c = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(a); nod(c); parser.alloymodule.addOpen(o.merge(c.pos), p, a, b,    c);    
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec",69, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-8)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Spec ::= Spec Vis OPEN Name LBRACKET SigRefs RBRACKET 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).right;
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).right;
		ExprVar a = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		List<ExprVar> b = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Pos c = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(a);         parser.alloymodule.addOpen(o.merge(c),     p, a, b,    null); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec",69, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Spec ::= Spec Vis OPEN Name AS Name 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).right;
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		ExprVar a = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		ExprVar c = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(a); nod(c); parser.alloymodule.addOpen(o.merge(c.pos), p, a, null, c);    
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec",69, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Spec ::= Spec Vis OPEN Name 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		ExprVar a = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(a);         parser.alloymodule.addOpen(o.merge(a.pos), p, a, null, null); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec",69, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Spec ::= Spec MODULE Name LBRACKET Namex RBRACKET 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).right;
		ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		List<ExprVar> b = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Pos r = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(n); nod(b); parser.alloymodule.addModelName(o.merge(r)     , n.label , b                       ); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec",69, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Spec ::= Spec MODULE Name 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(n);         parser.alloymodule.addModelName(o.merge(n.pos) , n.label , new ArrayList<ExprVar>()); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec",69, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= File EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		RESULT = start_val;
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$CompParser$parser.done_parsing();
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // File ::= Spec 
            {
              Object RESULT =null;
		 parser.alloymodule.doneParsing(); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("File",68, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

