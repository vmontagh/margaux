

Main file = models/moop/01Knapsack.als
Sig this/Knapsack, Field items: {this/Knapsack->this/Item}
Sig this/Item, Field weight: {this/Item->Int}
Sig this/Item, Field value: {this/Item->Int}
Expr [(sum i | int[i . (this/Item <: value)])]: {Int}
pred this/knap1, RETURN: {PrimitiveBoolean}
fun integer/add, Param n1: {Int}
fun integer/add, Param n2: {Int}
fun integer/add, RETURN: {Int}
fun integer/plus, Param n1: {Int}
fun integer/plus, Param n2: {Int}
fun integer/plus, RETURN: {Int}
fun integer/sub, Param n1: {Int}
fun integer/sub, Param n2: {Int}
fun integer/sub, RETURN: {Int}
fun integer/minus, Param n1: {Int}
fun integer/minus, Param n2: {Int}
fun integer/minus, RETURN: {Int}
fun integer/mul, Param n1: {Int}
fun integer/mul, Param n2: {Int}
fun integer/mul, RETURN: {Int}
fun integer/div, Param n1: {Int}
fun integer/div, Param n2: {Int}
fun integer/div, RETURN: {Int}
fun integer/rem, Param n1: {Int}
fun integer/rem, Param n2: {Int}
fun integer/rem, RETURN: {Int}
fun integer/negate, Param n: {Int}
fun integer/negate, RETURN: {Int}
pred integer/eq, Param n1: {Int}
pred integer/eq, Param n2: {Int}
pred integer/eq, RETURN: {PrimitiveBoolean}
pred integer/gt, Param n1: {Int}
pred integer/gt, Param n2: {Int}
pred integer/gt, RETURN: {PrimitiveBoolean}
pred integer/lt, Param n1: {Int}
pred integer/lt, Param n2: {Int}
pred integer/lt, RETURN: {PrimitiveBoolean}
pred integer/gte, Param n1: {Int}
pred integer/gte, Param n2: {Int}
pred integer/gte, RETURN: {PrimitiveBoolean}
pred integer/lte, Param n1: {Int}
pred integer/lte, Param n2: {Int}
pred integer/lte, RETURN: {PrimitiveBoolean}
pred integer/zero, Param n: {Int}
pred integer/zero, RETURN: {PrimitiveBoolean}
pred integer/pos, Param n: {Int}
pred integer/pos, RETURN: {PrimitiveBoolean}
pred integer/neg, Param n: {Int}
pred integer/neg, RETURN: {PrimitiveBoolean}
pred integer/nonpos, Param n: {Int}
pred integer/nonpos, RETURN: {PrimitiveBoolean}
pred integer/nonneg, Param n: {Int}
pred integer/nonneg, RETURN: {PrimitiveBoolean}
fun integer/signum, Param n: {Int}
fun integer/signum, RETURN: {Int}
fun integer/int2elem, Param i: {Int}
fun integer/int2elem, Param next: {univ->univ}
fun integer/int2elem, Param s: {univ}
fun integer/int2elem, RETURN: {univ}
fun integer/elem2int, Param e: {univ}
fun integer/elem2int, Param next: {univ->univ}
fun integer/elem2int, RETURN: {Int}
fun integer/max, RETURN: {Int}
fun integer/max, Param es: {Int}
fun integer/max, RETURN: {Int}
fun integer/min, RETURN: {Int}
fun integer/min, Param es: {Int}
fun integer/min, RETURN: {Int}
fun integer/next, RETURN: {Int->Int}
fun integer/prev, RETURN: {Int->Int}
fun integer/prevs, Param e: {Int}
fun integer/prevs, RETURN: {Int}
fun integer/nexts, Param e: {Int}
fun integer/nexts, RETURN: {Int}
fun integer/larger, Param e1: {Int}
fun integer/larger, Param e2: {Int}
fun integer/larger, RETURN: {Int}
fun integer/smaller, Param e1: {Int}
fun integer/smaller, Param e2: {Int}
fun integer/smaller, RETURN: {Int}
pred this/knap1, BODY:{PrimitiveBoolean}
fun integer/add, BODY:{Int}
fun integer/plus, BODY:{Int}
fun integer/sub, BODY:{Int}
fun integer/minus, BODY:{Int}
fun integer/mul, BODY:{Int}
fun integer/div, BODY:{Int}
fun integer/rem, BODY:{Int}
fun integer/negate, BODY:{Int}
pred integer/eq, BODY:{PrimitiveBoolean}
pred integer/gt, BODY:{PrimitiveBoolean}
pred integer/lt, BODY:{PrimitiveBoolean}
pred integer/gte, BODY:{PrimitiveBoolean}
pred integer/lte, BODY:{PrimitiveBoolean}
pred integer/zero, BODY:{PrimitiveBoolean}
pred integer/pos, BODY:{PrimitiveBoolean}
pred integer/neg, BODY:{PrimitiveBoolean}
pred integer/nonpos, BODY:{PrimitiveBoolean}
pred integer/nonneg, BODY:{PrimitiveBoolean}
fun integer/signum, BODY:{Int}
fun integer/int2elem, BODY:{univ}
fun integer/elem2int, BODY:{Int}
fun integer/max, BODY:{Int}
fun integer/max, BODY:{Int}
fun integer/min, BODY:{Int}
fun integer/min, BODY:{Int}
fun integer/next, BODY:{Int->Int}
fun integer/prev, BODY:{Int->Int}
fun integer/prevs, BODY:{Int}
fun integer/nexts, BODY:{Int}
fun integer/larger, BODY:{Int}
fun integer/smaller, BODY:{Int}
Executing "Run knap1 for exactly 1 Knapsack, exactly  partial 5 Item, exactly  partial 5 weight, exactly  partial 5 value optimize o"
   Sig this/Knapsack scope <= 1
   Sig this/Item scope <= [apple%, orange%, pear%, banana%, peach%]
   Sig this/Item scope <= [apple%, orange%, pear%, banana%, peach%]
   Sig this/Item scope <= 5
   Filed's label weight scope <= [[apple%, 20], [orange%, 40], [pear%, 20], [banana%, 50], [peach%, 30]]
   Filed's label weight scope <= [[apple%, 20], [orange%, 40], [pear%, 20], [banana%, 50], [peach%, 30]]
   Filed's label value scope <= [[apple%, 60], [orange%, 30], [pear%, 50], [banana%, 40], [peach%, 30]]
   Filed's label value scope <= [[apple%, 60], [orange%, 30], [pear%, 50], [banana%, 40], [peach%, 30]]
   Sig this/Knapsack scope <= [Knapsack$0]
   Sig this/Knapsack scope <= [Knapsack$0]
   Sig this/Knapsack scope <= 1
   Sig this/Knapsack == [[Knapsack$0]]
   Sig this/Item == [[apple%], [orange%], [pear%], [banana%], [peach%]]
Generating facts...
Simplifying the bounds...
   Solver=mem Bitwidth=4 MaxSeq=4 Symmetry=20
Generating the solution...
   62 vars. 5 primary vars. 192 clauses. 12345ms.


Exception: Fatal error:
Unknown exception occurred: kodkod.engine.AbortedException: kodkod.engine.satlab.SATAbortedException: java.io.IOException: Cannot run program "/zweb/sat/mem": error=2, No such file or directory